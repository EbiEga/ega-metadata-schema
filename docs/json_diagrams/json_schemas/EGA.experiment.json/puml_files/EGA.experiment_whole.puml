@startjson

{
    "$schema": "https://json-schema.org/draft/2019-09/schema",
    "$id": "https://raw.githubusercontent.com/EbiEga/ega-metadata-schema/main/schemas/EGA.experiment.json",
    "type": "object",
    "title": "EGA Experiment metadata schema",
    "meta:version": "0.0.0",
    "$async": true,
    "description": "Metadata schema used by the European Genome-phenome Archive (EGA) to validate \\nits experiment metadata object. An experiment is considered a planned and \\nintentionally designed process performed as part of a study. Further details can \\nbe found in the EGA-metadata-schema GitHub repository \\n(https://github.com/EbiEga/ega-metadata-schema/tree/main/schemas) and \\nEGA-archive website (https://ega-archive.org/)",
    "required": [
        "objectId",
        "assayTechnology",
        "assayType",
        "assayedBiologicalMacromolecule",
        "experimentTypeSpecifications"
    ],
    "additionalProperties": false,
    "properties": {
        "objectId": {
            "type": "object",
            "title": "Object's IDs block",
            "description": "Node containing the main identifiers of the object (e.g. alias, centerName...), \\ninherited from the common definitions.",
            "allOf": [
                {
                    "type": "object",
                    "title": "Core identifiers of an object",
                    "description": "Base definition containing the properties (e.g. Sample's alias) of a minimal \\nidentification layer of an EGA object (e.g. Sample).",
                    "additionalProperties": false,
                    "properties": {
                        "alias": {
                            "type": "string",
                            "title": "Alias of an object",
                            "description": "Submitter designated name (e.g. 'my_sample_J13') for the object (e.g. Sample). \\nThe name must be unique within the submission account (e.g. 'ega-box-79'), since \\nthe aliases and submission accounts are concatenated within our database to \\nobtain the unique alias (e.g. 'ega-box-79::my_sample_J13').",
                            "minLength": 1,
                            "examples": [
                                "my_sample_J13"
                            ]
                        },
                        "centerName": {
                            "type": "string",
                            "title": "Center name of the submitter",
                            "description": "Center name (e.g. 'EBI-TEST') associated to the submitter. In other words, it is \\nthe acronym of the submitter's account (provided by the HelpDesk team).",
                            "minLength": 1,
                            "examples": [
                                "EBI-TEST"
                            ]
                        },
                        "egaAccession": {
                            "type": "string",
                            "title": "EGA's accession of the object",
                            "description": "The object accession (i.e. unique identifier) assigned by the archive (EGA). \\nObject accessions can be found in the 'Identifiers' section of the EGA-archive \\nwebsite (https://ega-archive.org/metadata/how-to-use-the-api) and commonly start \\nwith EGA, followed by the distinctive letter of the object and finally the \\nnumeric ID of the instance.",
                            "examples": [
                                "EGAN00003245489"
                            ]
                        },
                        "externalAccessions": {
                            "type": "array",
                            "title": "External accessions array",
                            "description": "External accession node to reference objects in other archives (e.g. an already \\nexisting sample at BioSamples).",
                            "minItems": 1,
                            "additionalProperties": false,
                            "uniqueItems": true,
                            "items": {
                                "type": "object",
                                "title": "Object External accession",
                                "description": "External accession property defining a reference to an external record in \\nanother resource. For example, a reference to a sequence deposited in NCBI's \\nNucleotide database (e.g. 'https://identifiers.org/nucleotide:T35715.1'); or a \\nsample record in BioSamples (e.g. \\n'https://identifiers.org/biosample:SAMEA7616999').",
                                "additionalProperties": false,
                                "properties": {
                                    "objectExternalAccessionIdentifier": {
                                        "type": "object",
                                        "title": "Identifier of the external accession",
                                        "description": "Unique identifier of an external record. Its 'termId' (e.g. \\n'biosample:SAMEA7616999', 'pubmed:30962759', 'biostudies:S-EPMC3314381', etc.) \\nshall follow CURIE format of ``prefix``:``accession``, where: (1) the prefix \\n(e.g. 'biosample') is unique and assigned to the external resource at \\nidentifiers.org; (2) and the unique accession of the object (e.g. SAMEA7616999) \\nshould resolve to an existing record within the resource. If in doubt, use \\nidentifiers.org to resolve your external accession: 'https://identifiers.org/' + \\n'termId', e.g. 'https://identifiers.org/biosample:SAMEA7616999'",
                                        "allOf": [
                                            {
                                                "type": "object",
                                                "title": "Ontology term",
                                                "description": "This property represents an ontology term (a.k.a. class). It consists on two \\nproperties: the term identifier (termId) and its label (termLabel). This \\nproperty and its structure is inherited across many other elements in the \\nschemas. It is there, when inherited, where the real ontology constraint is put \\nin place (e.g. using 'graphRestriction' keywords). Based on phenopacket's [OntologyClass](https://phenopacket-schema.readthedocs.io/en/latest/ontologyclass.html)",
                                                "additionalProperties": false,
                                                "required": [
                                                    "termId",
                                                    "termLabel"
                                                ],
                                                "properties": {
                                                    "termId": {
                                                        "type": "string",
                                                        "title": "ID of the term",
                                                        "description": "The identifier of an ontology term must be in CURIE format (check property \\n'curieGeneralPattern'). Whether a specific term is valid or not according to an \\nontology hierarchy is checked at each specific termId using ontology validation \\nkeywords (e.g. 'graphRestriction').",
                                                        "minLength": 1,
                                                        "allOf": [
                                                            {
                                                                "type": "string",
                                                                "title": "Compact URI (CURIE) pattern",
                                                                "description": "A [W3C Compact URI](https://www.w3.org/TR/curie/) formatted string. A CURIE \\nstring has the structure ``prefix``:``reference``, as defined by the W3C syntax. \\nEven though we do not restrict prefixes, we recommend that the term used as \\n``prefix`` is uniformely resolved. In other words, it is better to use prefixes \\n(e.g. 'ensembl') from identifiers.org.",
                                                                "minLength": 1,
                                                                "pattern": "^\\w[^:]*:.+$",
                                                                "examples": [
                                                                    "ensembl:ENSG00000139618",
                                                                    "HGNC:11535",
                                                                    "data:1026",
                                                                    "EFO:0003815"
                                                                ]
                                                            }
                                                        ],
                                                        "examples": [
                                                            "MONDO:0100096",
                                                            "EFO:0003101",
                                                            "EFO:0005518",
                                                            "EFO:0002944",
                                                            "EFO:0003813"
                                                        ]
                                                    },
                                                    "termLabel": {
                                                        "type": "string",
                                                        "title": "Label of the term",
                                                        "description": "The label of a term is the human-readable string associated with the identifier. \\nIt is not required that it matches the label of the termId within the referenced \\nontology, although it should. This is due to the fact that the source of truth \\nwill always be the termId, and not the label, which adds more context.",
                                                        "minLength": 1,
                                                        "examples": [
                                                            "COVID-19",
                                                            "Axila skin",
                                                            "bone marrow cell",
                                                            "astrocyte",
                                                            "oligodendrocyte",
                                                            "Unknown",
                                                            "Unaffected",
                                                            "homo sapiens"
                                                        ]
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    "objectExternalAccessionURI": {
                                        "type": "string",
                                        "title": "URI of the external accession",
                                        "description": "Full or partial URL/URI of the external accession, for systems to resolve it. \\nShould only be used in case identifiers.org does not contain a namespace for the \\nrequired resource or the mapping to the URI from its identifier is faulty.",
                                        "allOf": [
                                            {
                                                "type": "string",
                                                "title": "URL/URI pattern",
                                                "description": "This object exists to hold the pattern that a URL or URI should have. For it to \\nbe referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^((http|https)://)(www.)?[a-zA-Z0-9@:%._\\+~#?&//=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%._\\+~#?&//=]*)$",
                                                "examples": [
                                                    "https://phenopacket-schema.readthedocs.io/en/latest/externalreference.html",
                                                    "https://www.ebi.ac.uk/arrayexpress/experiments/E-MEXP-1712/",
                                                    "https://www.geeksforgeeks.org/check-if-an-url-is-valid-or-not-using-regular-expression/"
                                                ]
                                            }
                                        ],
                                        "examples": [
                                            "https://www.ebi.ac.uk/biosamples/samples/SAMN11716999",
                                            "https://pubmed.ncbi.nlm.nih.gov/19491253",
                                            "https://www.ebi.ac.uk/arrayexpress/experiments/E-MEXP-1712/"
                                        ]
                                    },
                                    "objectExternalAccessionDescription": {
                                        "type": [
                                            "string",
                                            "number"
                                        ],
                                        "title": "Description of the external accession",
                                        "description": "Optional description of the external accession, used to add context to the \\nidentifier if applicable.",
                                        "examples": [
                                            "taken from biosample temporarily",
                                            "Ensembl's part of the accessions",
                                            "first",
                                            2,
                                            "Recurrent Erythema Nodosum in a Child with a SHOC2 Gene Mutation"
                                        ]
                                    }
                                },
                                "anyOf": [
                                    {
                                        "title": "Either the identifier is needed",
                                        "required": [
                                            "objectExternalAccessionIdentifier"
                                        ]
                                    },
                                    {
                                        "title": "Or the reference is needed",
                                        "required": [
                                            "objectExternalAccessionURI"
                                        ]
                                    }
                                ]
                            }
                        }
                    },
                    "anyOf": [
                        {
                            "title": "Check core IDs: combination of Alias and Center name",
                            "required": [
                                "alias",
                                "centerName"
                            ]
                        },
                        {
                            "title": "Check core IDs: EGA accession ID",
                            "required": [
                                "egaAccession"
                            ]
                        },
                        {
                            "title": "Check core IDs: external accessions",
                            "required": [
                                "externalAccessions"
                            ]
                        }
                    ]
                },
                {
                    "title": "Check that experiment EGA ID (EGAX) is correct",
                    "properties": {
                        "egaAccession": {
                            "type": "string",
                            "title": "Pattern of an EGA experiment's ID (EGAX...)",
                            "pattern": "^EGAX[0-9]{11}$",
                            "examples": [
                                "EGAX00002189113"
                            ]
                        }
                    }
                }
            ]
        },
        "schemaDescriptor": {
            "type": "object",
            "title": "Schema descriptor",
            "description": "This node is intended to be used to describe the schemas and standards that a \\nJSON document was based on. For instance, if a sample.json document was created \\nto be validated against EGA.sample.json schema version 1.0.0, such information \\nshould be reflected in this block. This way, both a human and a machine can \\ninterpret and validate the JSON document efficiently, without the need of \\nguessing versions.",
            "additionalProperties": false,
            "required": [
                "objectType",
                "describedBySchemaUri",
                "objectSchemaVersion",
                "commonSchemaVersion"
            ],
            "properties": {
                "objectType": {
                    "type": "string",
                    "title": "Type of the object",
                    "description": "Type of the object (e.g. 'sample') the JSON document describes.",
                    "enum": [
                        "experiment",
                        "study",
                        "sample",
                        "individual",
                        "submission",
                        "assay",
                        "dataset",
                        "analysis",
                        "policy",
                        "DAC",
                        "protocol",
                        "object-set"
                    ]
                },
                "describedBySchemaUri": {
                    "type": "string",
                    "title": "URI of the schema",
                    "description": "URI of the schema (e.g. 'https://github.com/EbiEga/ega-metadata-schema/tree/main/schemas/EGA.sample.json') \\nthat describes the JSON document (e.g. 'my_sample.json')",
                    "pattern": "^https://github\\.com/EbiEga/ega-metadata-schema/tree/main/schemas/EGA\\..+\\.json$",
                    "examples": [
                        "https://github.com/EbiEga/ega-metadata-schema/tree/main/schemas/EGA.sample.json"
                    ]
                },
                "objectSchemaVersion": {
                    "type": "string",
                    "title": "Version of the object's schema",
                    "description": "The version of the object's schema, the one specific for the object the JSON \\ndocument corresponds to (e.g. 'EGA.sample.json'), not the common definitions \\nschema's version (i.e. 'EGA.common-definitions.json').",
                    "allOf": [
                        {
                            "type": "string",
                            "title": "Semantic versioning pattern",
                            "description": "This object exists to hold the pattern that semantic versioning has, for it to \\nbe referenced elsewhere within this (or other) JSON schema. For further details \\nabout semantic versioning check 'https://semver.org/'",
                            "pattern": "^[0-9]+\\.[0-9]+\\.[0-9]+$",
                            "examples": [
                                "2.5.1"
                            ]
                        }
                    ]
                },
                "commonSchemaVersion": {
                    "type": "string",
                    "title": "Version of the common definition's schema",
                    "description": "The version of the common definition's schema, the one containing all shared \\ndefinitions (i.e. 'EGA.common-definitions.json'), not the one specific to the \\nobject described by the JSON document (e.g. 'EGA.sample.json').",
                    "allOf": [
                        {
                            "type": "string",
                            "title": "Semantic versioning pattern",
                            "description": "This object exists to hold the pattern that semantic versioning has, for it to \\nbe referenced elsewhere within this (or other) JSON schema. For further details \\nabout semantic versioning check 'https://semver.org/'",
                            "pattern": "^[0-9]+\\.[0-9]+\\.[0-9]+$",
                            "examples": [
                                "2.5.1"
                            ]
                        }
                    ]
                }
            }
        },
        "objectTitle": {
            "type": "string",
            "title": "Title of the experiment",
            "description": "An informative experiment title that should serve as an overview of the \\nexperiment, including: used technology, samples, purpose... (e.g. 'Affymetrix-X \\nmicroarray of human breast cancer cell line MCF-7 treated with tamoxifen \\ncompared with untreated controls'). This short text can be used to call out \\nexperiment records in searches or in displays.",
            "examples": [
                "Affymetrix-X microarray of human breast cancer cell line MCF-7 treated with \\ntamoxifen compared with untreated controls"
            ]
        },
        "objectDescription": {
            "type": "string",
            "title": "Description of the experiment",
            "description": "An in-depth description of the biological relevance and intent of the \\nexperiment, including the experimental workflow.",
            "examples": [
                "The experiment was conducted with the objective of... ...and for that purpose we \\ncompared untreated controls against..."
            ]
        },
        "targetedLoci": {
            "type": "array",
            "title": "Loci of the targeted genomic feature",
            "description": "Array of items that unambiguously define the loci of targeted genomic features \\nin the experiment. For example, if the experiment aim was to detect variants in \\nthe human gene TAF1 and TP53, their identifiers will be expected in two items of \\nthis array.",
            "minItems": 1,
            "additionalProperties": false,
            "uniqueItems": true,
            "items": {
                "type": "object",
                "title": "Locus identifier",
                "description": "Node to unambiguously identify loci [OGI:0000022]: the unique chromosomal \\nlocation defining the position of an individual gene or DNA sequence. This node \\nshall be used to precisely define: (1) the organism of said locus; (2) the gene \\nand other genomic feature references in other accessions; (3) the genomic \\nsequence per se, including its assembly and position. These details, in \\ndifferent combinations, shall allow identification of any genomic feature, such \\nas SNPs (e.g. coordinates of a variant) or genes (e.g. PT53).",
                "required": [
                    "organismDescriptor",
                    "lociDescriptor"
                ],
                "additionalProperties": false,
                "properties": {
                    "organismDescriptor": {
                        "type": "object",
                        "title": "Organism [OBI:0100026] descriptor block",
                        "description": "This property describes the material entity the sample consists in. That is, an \\nindividual living system, such as animal, plant, bacteria or virus, that is \\ncapable of replicating or reproducing, growth and maintenance in the right \\nenvironment. An organism may be unicellular or, like humans, made up of many \\nbillions of cells divided into specialized tissues and organs. This node is of \\nspecial interest in case the provenance of the sample is not human (e.g. \\nmicrobiota taken from a donor). Unless stated otherwise, given the nature of the \\nEGA, it is expected to be of human provenance.",
                        "additionalProperties": false,
                        "required": [
                            "organismTaxon"
                        ],
                        "properties": {
                            "organismTaxon": {
                                "type": "object",
                                "title": "NCBI Taxon of the organism",
                                "meta:propertyCurie": "APOLLO_SV:00000203",
                                "description": "Taxonomic classification of the organism (e.g. 'NCBITaxon:9606' and 'homo \\nsapiens' for humans) curated by the NCBI Taxonomy (search for organisms here: \\nhttps://www.ncbi.nlm.nih.gov/taxonomy; or use the OLS: \\nhttps://www.ebi.ac.uk/ols/ontologies/ncbitaxon). You can find further details at \\n'https://www.uniprot.org/help/taxonomic_identifier'. This is appropriate for \\nindividual organisms and some environmental samples.",
                                "allOf": [
                                    {
                                        "type": "object",
                                        "title": "Ontology term",
                                        "description": "This property represents an ontology term (a.k.a. class). It consists on two \\nproperties: the term identifier (termId) and its label (termLabel). This \\nproperty and its structure is inherited across many other elements in the \\nschemas. It is there, when inherited, where the real ontology constraint is put \\nin place (e.g. using 'graphRestriction' keywords). Based on phenopacket's [OntologyClass](https://phenopacket-schema.readthedocs.io/en/latest/ontologyclass.html)",
                                        "additionalProperties": false,
                                        "required": [
                                            "termId",
                                            "termLabel"
                                        ],
                                        "properties": {
                                            "termId": {
                                                "type": "string",
                                                "title": "ID of the term",
                                                "description": "The identifier of an ontology term must be in CURIE format (check property \\n'curieGeneralPattern'). Whether a specific term is valid or not according to an \\nontology hierarchy is checked at each specific termId using ontology validation \\nkeywords (e.g. 'graphRestriction').",
                                                "minLength": 1,
                                                "allOf": [
                                                    {
                                                        "type": "string",
                                                        "title": "Compact URI (CURIE) pattern",
                                                        "description": "A [W3C Compact URI](https://www.w3.org/TR/curie/) formatted string. A CURIE \\nstring has the structure ``prefix``:``reference``, as defined by the W3C syntax. \\nEven though we do not restrict prefixes, we recommend that the term used as \\n``prefix`` is uniformely resolved. In other words, it is better to use prefixes \\n(e.g. 'ensembl') from identifiers.org.",
                                                        "minLength": 1,
                                                        "pattern": "^\\w[^:]*:.+$",
                                                        "examples": [
                                                            "ensembl:ENSG00000139618",
                                                            "HGNC:11535",
                                                            "data:1026",
                                                            "EFO:0003815"
                                                        ]
                                                    }
                                                ],
                                                "examples": [
                                                    "MONDO:0100096",
                                                    "EFO:0003101",
                                                    "EFO:0005518",
                                                    "EFO:0002944",
                                                    "EFO:0003813"
                                                ]
                                            },
                                            "termLabel": {
                                                "type": "string",
                                                "title": "Label of the term",
                                                "description": "The label of a term is the human-readable string associated with the identifier. \\nIt is not required that it matches the label of the termId within the referenced \\nontology, although it should. This is due to the fact that the source of truth \\nwill always be the termId, and not the label, which adds more context.",
                                                "minLength": 1,
                                                "examples": [
                                                    "COVID-19",
                                                    "Axila skin",
                                                    "bone marrow cell",
                                                    "astrocyte",
                                                    "oligodendrocyte",
                                                    "Unknown",
                                                    "Unaffected",
                                                    "homo sapiens"
                                                ]
                                            }
                                        }
                                    }
                                ],
                                "properties": {
                                    "termId": {
                                        "title": "Ontology constraints for this specific termId",
                                        "graphRestriction": {
                                            "ontologies": [
                                                "obo:ncbitaxon"
                                            ],
                                            "classes": [
                                                "NCBITaxon:1"
                                            ],
                                            "relations": [
                                                "rdfs:subClassOf"
                                            ],
                                            "direct": false,
                                            "include_self": false
                                        },
                                        "examples": [
                                            "NCBITaxon:9606",
                                            "NCBITaxon:155900",
                                            "NCBITaxon:408170",
                                            "NCBITaxon:447426"
                                        ]
                                    }
                                }
                            },
                            "commonName": {
                                "type": "string",
                                "title": "Biologic entity classification common name",
                                "meta:propertyCurie": "NCIT:C164690",
                                "description": "Common name (e.g. 'human') used to designate a plant, animal or other organism, \\nas opposed to the scientific name.",
                                "minLength": 1,
                                "examples": [
                                    "human",
                                    "goat",
                                    "horse"
                                ]
                            }
                        }
                    },
                    "lociDescriptor": {
                        "type": "array",
                        "title": "Loci context array",
                        "description": "Array of locus context items. Multiple loci can be described in the array if the \\norganism remains the same.",
                        "additionalProperties": false,
                        "uniqueItems": true,
                        "minItems": 1,
                        "items": {
                            "type": "object",
                            "title": "Locus context item",
                            "description": "Node providing the context of the locus: its sequence, coordinates, encompassed \\ngenes...",
                            "properties": {
                                "geneDescriptor": {
                                    "type": "object",
                                    "title": "Gene descriptor",
                                    "description": "Node to uniquely identify a gene [SO:0000704]: a region (or regions) that \\nincludes all of the sequence elements necessary to encode a functional \\ntranscript. A gene may include regulatory regions, transcribed regions and/or \\nother functional sequence regions. For human genes, the standard is to use \\nnomenclature provided by the HUGO Gene Nomenclature Committee (HGNC).",
                                    "required": [
                                        "geneIdentifier"
                                    ],
                                    "additionalProperties": false,
                                    "properties": {
                                        "geneIdentifier": {
                                            "type": "object",
                                            "title": "Gene identifier",
                                            "description": "Property uniquely identifying a gene. It consists of a 'termId' and 'termLabel', \\nwhich correspond to: (1) 'termId': A unique (and typically persistent) \\nidentifier of a gene in a database, that is (typically) different to the gene \\nname/symbol (e.g. HGNC:11535 for gene TAF1). There are 2 types of allowed \\ndatabases to reference: NCBIGene and HGNC. Other archives' accessions (e.g. \\nensembl:ENSDARG00000035330) can be cross referenced with NCBIGene to obtain its \\ngene ID (e.g. ncbigene:555452). (2) 'termLabel': the official gene symbol (e.g. \\n'TAF1'). It is typically derived from the gene name. There are several resources \\nto search for a gene of interest, although we recommend [NCBI's \\nservice](https://www.ncbi.nlm.nih.gov/gene). For example: in the case of human \\ngenes, the symbol follows [HGNC](https://www.genenames.org/)'s nomenclature, \\nwhile in the case of mice genes they are provided by \\n[MGI](http://www.informatics.jax.org/).",
                                            "meta:propertyCurie": "data:1025",
                                            "allOf": [
                                                {
                                                    "type": "object",
                                                    "title": "Ontology term",
                                                    "description": "This property represents an ontology term (a.k.a. class). It consists on two \\nproperties: the term identifier (termId) and its label (termLabel). This \\nproperty and its structure is inherited across many other elements in the \\nschemas. It is there, when inherited, where the real ontology constraint is put \\nin place (e.g. using 'graphRestriction' keywords). Based on phenopacket's [OntologyClass](https://phenopacket-schema.readthedocs.io/en/latest/ontologyclass.html)",
                                                    "additionalProperties": false,
                                                    "required": [
                                                        "termId",
                                                        "termLabel"
                                                    ],
                                                    "properties": {
                                                        "termId": {
                                                            "type": "string",
                                                            "title": "ID of the term",
                                                            "description": "The identifier of an ontology term must be in CURIE format (check property \\n'curieGeneralPattern'). Whether a specific term is valid or not according to an \\nontology hierarchy is checked at each specific termId using ontology validation \\nkeywords (e.g. 'graphRestriction').",
                                                            "minLength": 1,
                                                            "allOf": [
                                                                {
                                                                    "type": "string",
                                                                    "title": "Compact URI (CURIE) pattern",
                                                                    "description": "A [W3C Compact URI](https://www.w3.org/TR/curie/) formatted string. A CURIE \\nstring has the structure ``prefix``:``reference``, as defined by the W3C syntax. \\nEven though we do not restrict prefixes, we recommend that the term used as \\n``prefix`` is uniformely resolved. In other words, it is better to use prefixes \\n(e.g. 'ensembl') from identifiers.org.",
                                                                    "minLength": 1,
                                                                    "pattern": "^\\w[^:]*:.+$",
                                                                    "examples": [
                                                                        "ensembl:ENSG00000139618",
                                                                        "HGNC:11535",
                                                                        "data:1026",
                                                                        "EFO:0003815"
                                                                    ]
                                                                }
                                                            ],
                                                            "examples": [
                                                                "MONDO:0100096",
                                                                "EFO:0003101",
                                                                "EFO:0005518",
                                                                "EFO:0002944",
                                                                "EFO:0003813"
                                                            ]
                                                        },
                                                        "termLabel": {
                                                            "type": "string",
                                                            "title": "Label of the term",
                                                            "description": "The label of a term is the human-readable string associated with the identifier. \\nIt is not required that it matches the label of the termId within the referenced \\nontology, although it should. This is due to the fact that the source of truth \\nwill always be the termId, and not the label, which adds more context.",
                                                            "minLength": 1,
                                                            "examples": [
                                                                "COVID-19",
                                                                "Axila skin",
                                                                "bone marrow cell",
                                                                "astrocyte",
                                                                "oligodendrocyte",
                                                                "Unknown",
                                                                "Unaffected",
                                                                "homo sapiens"
                                                            ]
                                                        }
                                                    }
                                                }
                                            ],
                                            "properties": {
                                                "termId": {
                                                    "title": "Ontology constraints for this specific termId",
                                                    "anyOf": [
                                                        {
                                                            "type": "string",
                                                            "title": "NCBI Gene identifier CURIE pattern",
                                                            "description": "Entrez Gene is the NCBI's database for gene-specific information, focusing on \\ncompletely sequenced genomes, those with an active research community to \\ncontribute gene-specific information, or those that are scheduled for intense \\nsequence analysis. See further details here: \\nhttps://registry.identifiers.org/registry/ncbigene",
                                                            "pattern": "^ncbigene:\\d+$",
                                                            "allOf": [
                                                                {
                                                                    "type": "string",
                                                                    "title": "Compact URI (CURIE) pattern",
                                                                    "description": "A [W3C Compact URI](https://www.w3.org/TR/curie/) formatted string. A CURIE \\nstring has the structure ``prefix``:``reference``, as defined by the W3C syntax. \\nEven though we do not restrict prefixes, we recommend that the term used as \\n``prefix`` is uniformely resolved. In other words, it is better to use prefixes \\n(e.g. 'ensembl') from identifiers.org.",
                                                                    "minLength": 1,
                                                                    "pattern": "^\\w[^:]*:.+$",
                                                                    "examples": [
                                                                        "ensembl:ENSG00000139618",
                                                                        "HGNC:11535",
                                                                        "data:1026",
                                                                        "EFO:0003815"
                                                                    ]
                                                                }
                                                            ],
                                                            "examples": [
                                                                "ncbigene:100010",
                                                                "ncbigene:270627"
                                                            ]
                                                        },
                                                        {
                                                            "type": "string",
                                                            "title": "HGNC identifier CURIE pattern",
                                                            "description": "The HGNC (HUGO Gene Nomenclature Committee) provides an approved gene name and \\nsymbol (short-form abbreviation) for each known human gene. All approved symbols \\nare stored in the HGNC database, and each symbol is unique. HGNC identifiers \\nrefer to records in the HGNC symbol database. See further details here: \\nhttps://registry.identifiers.org/registry/hgnc",
                                                            "pattern": "^((HGNC|hgnc):)?\\d{1,5}$",
                                                            "allOf": [
                                                                {
                                                                    "type": "string",
                                                                    "title": "Compact URI (CURIE) pattern",
                                                                    "description": "A [W3C Compact URI](https://www.w3.org/TR/curie/) formatted string. A CURIE \\nstring has the structure ``prefix``:``reference``, as defined by the W3C syntax. \\nEven though we do not restrict prefixes, we recommend that the term used as \\n``prefix`` is uniformely resolved. In other words, it is better to use prefixes \\n(e.g. 'ensembl') from identifiers.org.",
                                                                    "minLength": 1,
                                                                    "pattern": "^\\w[^:]*:.+$",
                                                                    "examples": [
                                                                        "ensembl:ENSG00000139618",
                                                                        "HGNC:11535",
                                                                        "data:1026",
                                                                        "EFO:0003815"
                                                                    ]
                                                                }
                                                            ],
                                                            "examples": [
                                                                "hgnc:2674",
                                                                "HGNC:11535"
                                                            ]
                                                        }
                                                    ],
                                                    "examples": [
                                                        "NCBIGene:100010",
                                                        "hgnc:2674"
                                                    ]
                                                }
                                            }
                                        },
                                        "geneDescription": {
                                            "type": "string",
                                            "title": "Description of the gene",
                                            "description": "Free-text description of the gene, only to be used to provide additional context \\nthat would otherwise be impossible to add encoded in the schema. In other words, \\nkindly refrain from providing alternative gene identifiers in the description, \\nwhen they could be added at 'alternateGeneIdentifiers'.",
                                            "minLength": 1,
                                            "examples": [
                                                "In the mutated cells, the only difference with the reference gene is that at \\nlocus ... position +23 was modified: thymine was transitioned to cytosine \\n(T-C)..."
                                            ]
                                        },
                                        "alternateGeneIdentifiers": {
                                            "type": "array",
                                            "title": "Alternate gene identifiers",
                                            "description": "Array of alternate identifiers for this gene. This array can be used to provide \\nany other alternate gene identifiers that refer to a gene, including previously \\napproved gene symbols, Ensembl identifiers, gene transcripts (e.g. \\n'ensembl:ENST00000423759'), etcetera.",
                                            "additionalProperties": false,
                                            "uniqueItems": true,
                                            "minItems": 1,
                                            "items": {
                                                "type": "object",
                                                "title": "Alternate gene identifier item",
                                                "description": "One of the possible alternate gene identifiers for the designated gene. The \\n'termId' of these elements, contrary to the main identifier, can include \\nreferences to other resources beyond NCBI and HGNC (e.g. 'OMIM:600296', \\n'ensembl:ENST00000423759', 'ucsc:uc003ldc.6', etcetera).",
                                                "meta:propertyCurie": "data:1025",
                                                "allOf": [
                                                    {
                                                        "type": "object",
                                                        "title": "Ontology term",
                                                        "description": "This property represents an ontology term (a.k.a. class). It consists on two \\nproperties: the term identifier (termId) and its label (termLabel). This \\nproperty and its structure is inherited across many other elements in the \\nschemas. It is there, when inherited, where the real ontology constraint is put \\nin place (e.g. using 'graphRestriction' keywords). Based on phenopacket's [OntologyClass](https://phenopacket-schema.readthedocs.io/en/latest/ontologyclass.html)",
                                                        "additionalProperties": false,
                                                        "required": [
                                                            "termId",
                                                            "termLabel"
                                                        ],
                                                        "properties": {
                                                            "termId": {
                                                                "type": "string",
                                                                "title": "ID of the term",
                                                                "description": "The identifier of an ontology term must be in CURIE format (check property \\n'curieGeneralPattern'). Whether a specific term is valid or not according to an \\nontology hierarchy is checked at each specific termId using ontology validation \\nkeywords (e.g. 'graphRestriction').",
                                                                "minLength": 1,
                                                                "allOf": [
                                                                    {
                                                                        "type": "string",
                                                                        "title": "Compact URI (CURIE) pattern",
                                                                        "description": "A [W3C Compact URI](https://www.w3.org/TR/curie/) formatted string. A CURIE \\nstring has the structure ``prefix``:``reference``, as defined by the W3C syntax. \\nEven though we do not restrict prefixes, we recommend that the term used as \\n``prefix`` is uniformely resolved. In other words, it is better to use prefixes \\n(e.g. 'ensembl') from identifiers.org.",
                                                                        "minLength": 1,
                                                                        "pattern": "^\\w[^:]*:.+$",
                                                                        "examples": [
                                                                            "ensembl:ENSG00000139618",
                                                                            "HGNC:11535",
                                                                            "data:1026",
                                                                            "EFO:0003815"
                                                                        ]
                                                                    }
                                                                ],
                                                                "examples": [
                                                                    "MONDO:0100096",
                                                                    "EFO:0003101",
                                                                    "EFO:0005518",
                                                                    "EFO:0002944",
                                                                    "EFO:0003813"
                                                                ]
                                                            },
                                                            "termLabel": {
                                                                "type": "string",
                                                                "title": "Label of the term",
                                                                "description": "The label of a term is the human-readable string associated with the identifier. \\nIt is not required that it matches the label of the termId within the referenced \\nontology, although it should. This is due to the fact that the source of truth \\nwill always be the termId, and not the label, which adds more context.",
                                                                "minLength": 1,
                                                                "examples": [
                                                                    "COVID-19",
                                                                    "Axila skin",
                                                                    "bone marrow cell",
                                                                    "astrocyte",
                                                                    "oligodendrocyte",
                                                                    "Unknown",
                                                                    "Unaffected",
                                                                    "homo sapiens"
                                                                ]
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        "relatedGeneIdentifiers": {
                                            "type": "array",
                                            "title": "Related (not equivalent) gene identifiers",
                                            "description": "Array of related identifiers (e.g. termIds 'VGNC:97422', 'MGI:2385071', \\n'RGD:1305712' for gene ETF1). This field can be used to provide identifiers to \\nresources representing related, but not equivalent gene identifiers. For \\nexample: paralog, analog or ortholog identifiers.",
                                            "additionalProperties": false,
                                            "uniqueItems": true,
                                            "minItems": 1,
                                            "items": {
                                                "type": "object",
                                                "title": "Related gene identifier item",
                                                "meta:propertyCurie": "data:1025",
                                                "allOf": [
                                                    {
                                                        "type": "object",
                                                        "title": "Ontology term",
                                                        "description": "This property represents an ontology term (a.k.a. class). It consists on two \\nproperties: the term identifier (termId) and its label (termLabel). This \\nproperty and its structure is inherited across many other elements in the \\nschemas. It is there, when inherited, where the real ontology constraint is put \\nin place (e.g. using 'graphRestriction' keywords). Based on phenopacket's [OntologyClass](https://phenopacket-schema.readthedocs.io/en/latest/ontologyclass.html)",
                                                        "additionalProperties": false,
                                                        "required": [
                                                            "termId",
                                                            "termLabel"
                                                        ],
                                                        "properties": {
                                                            "termId": {
                                                                "type": "string",
                                                                "title": "ID of the term",
                                                                "description": "The identifier of an ontology term must be in CURIE format (check property \\n'curieGeneralPattern'). Whether a specific term is valid or not according to an \\nontology hierarchy is checked at each specific termId using ontology validation \\nkeywords (e.g. 'graphRestriction').",
                                                                "minLength": 1,
                                                                "allOf": [
                                                                    {
                                                                        "type": "string",
                                                                        "title": "Compact URI (CURIE) pattern",
                                                                        "description": "A [W3C Compact URI](https://www.w3.org/TR/curie/) formatted string. A CURIE \\nstring has the structure ``prefix``:``reference``, as defined by the W3C syntax. \\nEven though we do not restrict prefixes, we recommend that the term used as \\n``prefix`` is uniformely resolved. In other words, it is better to use prefixes \\n(e.g. 'ensembl') from identifiers.org.",
                                                                        "minLength": 1,
                                                                        "pattern": "^\\w[^:]*:.+$",
                                                                        "examples": [
                                                                            "ensembl:ENSG00000139618",
                                                                            "HGNC:11535",
                                                                            "data:1026",
                                                                            "EFO:0003815"
                                                                        ]
                                                                    }
                                                                ],
                                                                "examples": [
                                                                    "MONDO:0100096",
                                                                    "EFO:0003101",
                                                                    "EFO:0005518",
                                                                    "EFO:0002944",
                                                                    "EFO:0003813"
                                                                ]
                                                            },
                                                            "termLabel": {
                                                                "type": "string",
                                                                "title": "Label of the term",
                                                                "description": "The label of a term is the human-readable string associated with the identifier. \\nIt is not required that it matches the label of the termId within the referenced \\nontology, although it should. This is due to the fact that the source of truth \\nwill always be the termId, and not the label, which adds more context.",
                                                                "minLength": 1,
                                                                "examples": [
                                                                    "COVID-19",
                                                                    "Axila skin",
                                                                    "bone marrow cell",
                                                                    "astrocyte",
                                                                    "oligodendrocyte",
                                                                    "Unknown",
                                                                    "Unaffected",
                                                                    "homo sapiens"
                                                                ]
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                },
                                "genomicSequenceDescriptor": {
                                    "type": "object",
                                    "title": "Genomic sequence descriptor",
                                    "meta:propertyCurie": "GENO:0000960",
                                    "description": "Node used to describe with sufficient detail a genomic sequence (e.g. Human \\nChromosome X: 71366222-71532374 forward strand), defined as a biological \\nsequence that is of genomic origin (i.e. carries sequence from the genome of a \\ncell or organism).",
                                    "additionalProperties": false,
                                    "properties": {
                                        "assemblyDescriptor": {
                                            "type": "object",
                                            "title": "NCBI's Assembly descriptor",
                                            "meta:propertyCurie": "topic:0196",
                                            "description": "Node describing a sequence assembly referenced in [NCBI's Assembly \\ndatabase](https://www.ncbi.nlm.nih.gov/assembly). Assembly is a database \\nproviding information on the structure of assembled genomes, assembly names and \\nother meta-data, statistical reports, and links to genomic sequence data. An \\nassembly is defined as the set of chromosomes, unlocalized and unplaced \\n(sometimes called 'random') and alternate sequences used to represent an \\norganism's genome. Assemblies are constructed from 1 or more assembly units.",
                                            "additionalProperties": false,
                                            "required": [
                                                "ncbiAssembly"
                                            ],
                                            "properties": {
                                                "ncbiAssembly": {
                                                    "type": "object",
                                                    "title": "NCBI Assembly",
                                                    "description": "Node defining an Assembly (e.g. 'GCF_000001405.26'). For example, the assembly \\naccession for the GenBank version of the public human reference assembly \\n('termLabel' being 'GRCh38.p14') is 'GCA_000001405.29' ('termId'). See further \\ndetails here: https://www.ncbi.nlm.nih.gov/assembly/model/.",
                                                    "allOf": [
                                                        {
                                                            "type": "object",
                                                            "title": "Ontology term",
                                                            "description": "This property represents an ontology term (a.k.a. class). It consists on two \\nproperties: the term identifier (termId) and its label (termLabel). This \\nproperty and its structure is inherited across many other elements in the \\nschemas. It is there, when inherited, where the real ontology constraint is put \\nin place (e.g. using 'graphRestriction' keywords). Based on phenopacket's [OntologyClass](https://phenopacket-schema.readthedocs.io/en/latest/ontologyclass.html)",
                                                            "additionalProperties": false,
                                                            "required": [
                                                                "termId",
                                                                "termLabel"
                                                            ],
                                                            "properties": {
                                                                "termId": {
                                                                    "type": "string",
                                                                    "title": "ID of the term",
                                                                    "description": "The identifier of an ontology term must be in CURIE format (check property \\n'curieGeneralPattern'). Whether a specific term is valid or not according to an \\nontology hierarchy is checked at each specific termId using ontology validation \\nkeywords (e.g. 'graphRestriction').",
                                                                    "minLength": 1,
                                                                    "allOf": [
                                                                        {
                                                                            "type": "string",
                                                                            "title": "Compact URI (CURIE) pattern",
                                                                            "description": "A [W3C Compact URI](https://www.w3.org/TR/curie/) formatted string. A CURIE \\nstring has the structure ``prefix``:``reference``, as defined by the W3C syntax. \\nEven though we do not restrict prefixes, we recommend that the term used as \\n``prefix`` is uniformely resolved. In other words, it is better to use prefixes \\n(e.g. 'ensembl') from identifiers.org.",
                                                                            "minLength": 1,
                                                                            "pattern": "^\\w[^:]*:.+$",
                                                                            "examples": [
                                                                                "ensembl:ENSG00000139618",
                                                                                "HGNC:11535",
                                                                                "data:1026",
                                                                                "EFO:0003815"
                                                                            ]
                                                                        }
                                                                    ],
                                                                    "examples": [
                                                                        "MONDO:0100096",
                                                                        "EFO:0003101",
                                                                        "EFO:0005518",
                                                                        "EFO:0002944",
                                                                        "EFO:0003813"
                                                                    ]
                                                                },
                                                                "termLabel": {
                                                                    "type": "string",
                                                                    "title": "Label of the term",
                                                                    "description": "The label of a term is the human-readable string associated with the identifier. \\nIt is not required that it matches the label of the termId within the referenced \\nontology, although it should. This is due to the fact that the source of truth \\nwill always be the termId, and not the label, which adds more context.",
                                                                    "minLength": 1,
                                                                    "examples": [
                                                                        "COVID-19",
                                                                        "Axila skin",
                                                                        "bone marrow cell",
                                                                        "astrocyte",
                                                                        "oligodendrocyte",
                                                                        "Unknown",
                                                                        "Unaffected",
                                                                        "homo sapiens"
                                                                    ]
                                                                }
                                                            }
                                                        }
                                                    ],
                                                    "properties": {
                                                        "termId": {
                                                            "title": "Ontology constraints for this specific termId",
                                                            "allOf": [
                                                                {
                                                                    "type": "string",
                                                                    "title": "NCBI Assembly CURIE pattern",
                                                                    "description": "The assembly accession starts with a three letter prefix, GCA for GenBank \\nassemblies and GCF for RefSeq assemblies. This is followed by an underscore and \\n9 digits (e.g. '_000001405'). A version (e.g. '.26') is then added to the \\naccession. See further details here: \\nhttps://registry.identifiers.org/registry/assembly",
                                                                    "pattern": "^assembly:(GCF|GCA)_\\d+(\\.\\d+)?$",
                                                                    "allOf": [
                                                                        {
                                                                            "type": "string",
                                                                            "title": "Compact URI (CURIE) pattern",
                                                                            "description": "A [W3C Compact URI](https://www.w3.org/TR/curie/) formatted string. A CURIE \\nstring has the structure ``prefix``:``reference``, as defined by the W3C syntax. \\nEven though we do not restrict prefixes, we recommend that the term used as \\n``prefix`` is uniformely resolved. In other words, it is better to use prefixes \\n(e.g. 'ensembl') from identifiers.org.",
                                                                            "minLength": 1,
                                                                            "pattern": "^\\w[^:]*:.+$",
                                                                            "examples": [
                                                                                "ensembl:ENSG00000139618",
                                                                                "HGNC:11535",
                                                                                "data:1026",
                                                                                "EFO:0003815"
                                                                            ]
                                                                        }
                                                                    ],
                                                                    "examples": [
                                                                        "assembly:GCF_000001405.26",
                                                                        "assembly:GCA_000001405.1",
                                                                        "assembly:GCF_000005845.2"
                                                                    ]
                                                                }
                                                            ],
                                                            "examples": [
                                                                "assembly:GCF_000001405.26",
                                                                "assembly:GCA_000001405.1",
                                                                "assembly:GCF_000005845.2"
                                                            ]
                                                        }
                                                    }
                                                },
                                                "ncbiAssemblyUnit": {
                                                    "type": "object",
                                                    "title": "NCBI assembly unit",
                                                    "description": "NCBI's identifier of the assembly unit. An assembly unit is defined as the \\ncollection of sequences used to define discrete parts of an assembly. Commonly, \\nassembly units are entire chromosomes (e.g. Chromosome 1 of human genome), \\nscaffolds or different types of sequences (e.g. Mitochondrial DNA). Again, it \\nfollows an 'ontologyTerm' structure, having a 'termId' (e.g. \\n'refseq:NC_000001.11') and 'termLabel' (e.g. 'chromosome 1'). See further \\ndetails here: https://www.ncbi.nlm.nih.gov/assembly/model/.",
                                                    "allOf": [
                                                        {
                                                            "type": "object",
                                                            "title": "Ontology term",
                                                            "description": "This property represents an ontology term (a.k.a. class). It consists on two \\nproperties: the term identifier (termId) and its label (termLabel). This \\nproperty and its structure is inherited across many other elements in the \\nschemas. It is there, when inherited, where the real ontology constraint is put \\nin place (e.g. using 'graphRestriction' keywords). Based on phenopacket's [OntologyClass](https://phenopacket-schema.readthedocs.io/en/latest/ontologyclass.html)",
                                                            "additionalProperties": false,
                                                            "required": [
                                                                "termId",
                                                                "termLabel"
                                                            ],
                                                            "properties": {
                                                                "termId": {
                                                                    "type": "string",
                                                                    "title": "ID of the term",
                                                                    "description": "The identifier of an ontology term must be in CURIE format (check property \\n'curieGeneralPattern'). Whether a specific term is valid or not according to an \\nontology hierarchy is checked at each specific termId using ontology validation \\nkeywords (e.g. 'graphRestriction').",
                                                                    "minLength": 1,
                                                                    "allOf": [
                                                                        {
                                                                            "type": "string",
                                                                            "title": "Compact URI (CURIE) pattern",
                                                                            "description": "A [W3C Compact URI](https://www.w3.org/TR/curie/) formatted string. A CURIE \\nstring has the structure ``prefix``:``reference``, as defined by the W3C syntax. \\nEven though we do not restrict prefixes, we recommend that the term used as \\n``prefix`` is uniformely resolved. In other words, it is better to use prefixes \\n(e.g. 'ensembl') from identifiers.org.",
                                                                            "minLength": 1,
                                                                            "pattern": "^\\w[^:]*:.+$",
                                                                            "examples": [
                                                                                "ensembl:ENSG00000139618",
                                                                                "HGNC:11535",
                                                                                "data:1026",
                                                                                "EFO:0003815"
                                                                            ]
                                                                        }
                                                                    ],
                                                                    "examples": [
                                                                        "MONDO:0100096",
                                                                        "EFO:0003101",
                                                                        "EFO:0005518",
                                                                        "EFO:0002944",
                                                                        "EFO:0003813"
                                                                    ]
                                                                },
                                                                "termLabel": {
                                                                    "type": "string",
                                                                    "title": "Label of the term",
                                                                    "description": "The label of a term is the human-readable string associated with the identifier. \\nIt is not required that it matches the label of the termId within the referenced \\nontology, although it should. This is due to the fact that the source of truth \\nwill always be the termId, and not the label, which adds more context.",
                                                                    "minLength": 1,
                                                                    "examples": [
                                                                        "COVID-19",
                                                                        "Axila skin",
                                                                        "bone marrow cell",
                                                                        "astrocyte",
                                                                        "oligodendrocyte",
                                                                        "Unknown",
                                                                        "Unaffected",
                                                                        "homo sapiens"
                                                                    ]
                                                                }
                                                            }
                                                        }
                                                    ],
                                                    "properties": {
                                                        "termId": {
                                                            "title": "Ontology constraints for this specific termId",
                                                            "examples": [
                                                                "refseq:NC_000001.11",
                                                                "refseq:NC_012920.1"
                                                            ]
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        "sequenceCoordinates": {
                                            "type": "object",
                                            "title": "Sequence coordinates",
                                            "meta:propertyCurie": "data:2012",
                                            "description": "A position in a map (for example a genetic map), either a single position (e.g. \\n71366222) or a region interval (e.g. 71366222-71532374). Used to define \\ncoordinates within an assembly unit.",
                                            "additionalProperties": false,
                                            "properties": {
                                                "singlePosition": {
                                                    "type": "number",
                                                    "title": "Single sequence position",
                                                    "description": "A single 1-based (first base of the assembly unit is 1, not 0) sequence \\ncoordinate, inclusive. It can be used to describe the start or end coordinates \\nof a sequence interval, or directly a single coordinate within a sequence.",
                                                    "minInclusive": 1,
                                                    "examples": [
                                                        71366222,
                                                        36592394,
                                                        1
                                                    ]
                                                },
                                                "sequenceInterval": {
                                                    "type": "object",
                                                    "title": "Sequence interval",
                                                    "meta:propertyCurie": "GENO:0000902",
                                                    "description": "The location of a sequence feature in a genome, defined by its start (e.g. \\n71366222) and end (e.g. 71532374) position on some reference genomic coordinate \\nsystem. Positions are always represented by contiguous spans using interbase \\ncoordinates or coordinate ranges. Both coordinates are inclusive: the sequence \\nbounds are included in the described genomic feature. In other words, if the \\nsequence interval is 71366222-71532374, both 71366222 and 71532374 coordinates \\nare included in the feature.",
                                                    "required": [
                                                        "start",
                                                        "end"
                                                    ],
                                                    "additionalProperties": false,
                                                    "properties": {
                                                        "start": {
                                                            "type": "number",
                                                            "title": "Single sequence position",
                                                            "description": "A single 1-based (first base of the assembly unit is 1, not 0) sequence \\ncoordinate, inclusive. It can be used to describe the start or end coordinates \\nof a sequence interval, or directly a single coordinate within a sequence.",
                                                            "minInclusive": 1,
                                                            "examples": [
                                                                71366222,
                                                                36592394,
                                                                1
                                                            ]
                                                        },
                                                        "end": {
                                                            "type": "number",
                                                            "title": "Single sequence position",
                                                            "description": "A single 1-based (first base of the assembly unit is 1, not 0) sequence \\ncoordinate, inclusive. It can be used to describe the start or end coordinates \\nof a sequence interval, or directly a single coordinate within a sequence.",
                                                            "minInclusive": 1,
                                                            "examples": [
                                                                71366222,
                                                                36592394,
                                                                1
                                                            ]
                                                        }
                                                    }
                                                }
                                            },
                                            "anyOf": [
                                                {
                                                    "title": "Either a single position is given",
                                                    "required": [
                                                        "singlePosition"
                                                    ]
                                                },
                                                {
                                                    "title": "Or the whole sequence interval",
                                                    "required": [
                                                        "sequenceInterval"
                                                    ]
                                                }
                                            ]
                                        },
                                        "dnaSequenceStrand": {
                                            "type": "string",
                                            "title": "DNA Sequence strand",
                                            "description": "DNA sequence is double-stranded. By convention, for a reference chromosome, one \\nwhole strand is designated the 'forward strand' and the other the 'reverse \\nstrand'. This designation is arbitrary and sometimes the terms 'plus strand' and \\n'minus strand', respectively, are used instead. A genomic feature can live on a \\nDNA strand in one of two orientations. For instance, a gene is said to have a \\ncoding strand (also known as its 'sense strand'), and a template strand (also \\nknown as its 'antisense strand'), which can be forward or reverse strands \\ndepending on which contain the nucleotide sequence the RNA polymerase reads to \\ncreate its RNA product. Annotations such as Ensembl and UCSC are concerned with \\nthe coding sequences of genes, so when they say a gene is on the forward strand, \\nit means the gene's coding sequence is on the forward strand. To follow through \\nagain, that means that during transcription of this forward-strand gene, the \\ngene's template sequence is read from the reverse strand, producing an mRNA that \\nmatches the sequence on the forward strand. Term chosen from a list of \\ncontrolled vocabulary (CV). If you cannot find your term in the CV list, please \\ncreate an issue at our [metadata GitHub \\nrepository](https://github.com/EbiEga/ega-metadata-schema/issues/new/choose) \\nproposing its addition.",
                                            "enum": [
                                                "forward",
                                                "reverse"
                                            ],
                                            "meta:enum": {
                                                "forward": "Forward strand [ENSGLOSSARY:0000369]: DNA strand arbitrary defined as the strand \\nwith its 5' end at the tip of the short chromosome arm (p). If a gene is \\nforward-stranded, its sense (sequence matching cDNA) is on the forward strand. \\nForward strand is reverse complementary to the reverse strand.",
                                                "reverse": "Reverse strand [ENSGLOSSARY:0000370]: DNA strand arbitrary defined as the strand \\nwith its 5' end at the tip of the long chromosome arm (q). If a gene is \\nreverse-stranded, its sense (sequence matching cDNA) is on the reverse strand. \\nReverse strand is reverse complementary to the forward strand."
                                            }
                                        },
                                        "nucleicAcidSequence": {
                                            "type": "string",
                                            "title": "Nucleic acid sequence",
                                            "meta:propertyCurie": "data:2977",
                                            "description": "Sequence of characters representing a specific nucleic (i.e. molecular species - \\ne.g. Adenine) or groupings of these (through ambiguity codes), using [one-letter \\nIUPAC abbreviations](https://en.wikipedia.org/wiki/International_Union_of_Pure_and_Applied_Chemistry#Amino_acid_and_nucleotide_base_codes).",
                                            "pattern": "^([\\.-]*[ACGTURYKMSWBDHVNX]+[\\.-]*)+$",
                                            "examples": [
                                                "ACTGCCG",
                                                "CTGCGCGCGCT",
                                                "KM-AGT-X-N"
                                            ]
                                        }
                                    },
                                    "anyOf": [
                                        {
                                            "title": "Either the full position context is given",
                                            "required": [
                                                "assemblyDescriptor",
                                                "sequenceCoordinates",
                                                "dnaSequenceStrand"
                                            ]
                                        },
                                        {
                                            "title": "Or at least the sequence itself is given",
                                            "required": [
                                                "nucleicAcidSequence"
                                            ]
                                        }
                                    ]
                                },
                                "locusExternalReference": {
                                    "type": "object",
                                    "title": "Object External accession",
                                    "description": "External accession property defining a reference to an external record in \\nanother resource. For example, a reference to a sequence deposited in NCBI's \\nNucleotide database (e.g. 'https://identifiers.org/nucleotide:T35715.1'); or a \\nsample record in BioSamples (e.g. \\n'https://identifiers.org/biosample:SAMEA7616999').",
                                    "additionalProperties": false,
                                    "properties": {
                                        "objectExternalAccessionIdentifier": {
                                            "type": "object",
                                            "title": "Identifier of the external accession",
                                            "description": "Unique identifier of an external record. Its 'termId' (e.g. \\n'biosample:SAMEA7616999', 'pubmed:30962759', 'biostudies:S-EPMC3314381', etc.) \\nshall follow CURIE format of ``prefix``:``accession``, where: (1) the prefix \\n(e.g. 'biosample') is unique and assigned to the external resource at \\nidentifiers.org; (2) and the unique accession of the object (e.g. SAMEA7616999) \\nshould resolve to an existing record within the resource. If in doubt, use \\nidentifiers.org to resolve your external accession: 'https://identifiers.org/' + \\n'termId', e.g. 'https://identifiers.org/biosample:SAMEA7616999'",
                                            "allOf": [
                                                {
                                                    "type": "object",
                                                    "title": "Ontology term",
                                                    "description": "This property represents an ontology term (a.k.a. class). It consists on two \\nproperties: the term identifier (termId) and its label (termLabel). This \\nproperty and its structure is inherited across many other elements in the \\nschemas. It is there, when inherited, where the real ontology constraint is put \\nin place (e.g. using 'graphRestriction' keywords). Based on phenopacket's [OntologyClass](https://phenopacket-schema.readthedocs.io/en/latest/ontologyclass.html)",
                                                    "additionalProperties": false,
                                                    "required": [
                                                        "termId",
                                                        "termLabel"
                                                    ],
                                                    "properties": {
                                                        "termId": {
                                                            "type": "string",
                                                            "title": "ID of the term",
                                                            "description": "The identifier of an ontology term must be in CURIE format (check property \\n'curieGeneralPattern'). Whether a specific term is valid or not according to an \\nontology hierarchy is checked at each specific termId using ontology validation \\nkeywords (e.g. 'graphRestriction').",
                                                            "minLength": 1,
                                                            "allOf": [
                                                                {
                                                                    "type": "string",
                                                                    "title": "Compact URI (CURIE) pattern",
                                                                    "description": "A [W3C Compact URI](https://www.w3.org/TR/curie/) formatted string. A CURIE \\nstring has the structure ``prefix``:``reference``, as defined by the W3C syntax. \\nEven though we do not restrict prefixes, we recommend that the term used as \\n``prefix`` is uniformely resolved. In other words, it is better to use prefixes \\n(e.g. 'ensembl') from identifiers.org.",
                                                                    "minLength": 1,
                                                                    "pattern": "^\\w[^:]*:.+$",
                                                                    "examples": [
                                                                        "ensembl:ENSG00000139618",
                                                                        "HGNC:11535",
                                                                        "data:1026",
                                                                        "EFO:0003815"
                                                                    ]
                                                                }
                                                            ],
                                                            "examples": [
                                                                "MONDO:0100096",
                                                                "EFO:0003101",
                                                                "EFO:0005518",
                                                                "EFO:0002944",
                                                                "EFO:0003813"
                                                            ]
                                                        },
                                                        "termLabel": {
                                                            "type": "string",
                                                            "title": "Label of the term",
                                                            "description": "The label of a term is the human-readable string associated with the identifier. \\nIt is not required that it matches the label of the termId within the referenced \\nontology, although it should. This is due to the fact that the source of truth \\nwill always be the termId, and not the label, which adds more context.",
                                                            "minLength": 1,
                                                            "examples": [
                                                                "COVID-19",
                                                                "Axila skin",
                                                                "bone marrow cell",
                                                                "astrocyte",
                                                                "oligodendrocyte",
                                                                "Unknown",
                                                                "Unaffected",
                                                                "homo sapiens"
                                                            ]
                                                        }
                                                    }
                                                }
                                            ]
                                        },
                                        "objectExternalAccessionURI": {
                                            "type": "string",
                                            "title": "URI of the external accession",
                                            "description": "Full or partial URL/URI of the external accession, for systems to resolve it. \\nShould only be used in case identifiers.org does not contain a namespace for the \\nrequired resource or the mapping to the URI from its identifier is faulty.",
                                            "allOf": [
                                                {
                                                    "type": "string",
                                                    "title": "URL/URI pattern",
                                                    "description": "This object exists to hold the pattern that a URL or URI should have. For it to \\nbe referenced elsewhere within this (or other) JSON schema.",
                                                    "pattern": "^((http|https)://)(www.)?[a-zA-Z0-9@:%._\\+~#?&//=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%._\\+~#?&//=]*)$",
                                                    "examples": [
                                                        "https://phenopacket-schema.readthedocs.io/en/latest/externalreference.html",
                                                        "https://www.ebi.ac.uk/arrayexpress/experiments/E-MEXP-1712/",
                                                        "https://www.geeksforgeeks.org/check-if-an-url-is-valid-or-not-using-regular-expression/"
                                                    ]
                                                }
                                            ],
                                            "examples": [
                                                "https://www.ebi.ac.uk/biosamples/samples/SAMN11716999",
                                                "https://pubmed.ncbi.nlm.nih.gov/19491253",
                                                "https://www.ebi.ac.uk/arrayexpress/experiments/E-MEXP-1712/"
                                            ]
                                        },
                                        "objectExternalAccessionDescription": {
                                            "type": [
                                                "string",
                                                "number"
                                            ],
                                            "title": "Description of the external accession",
                                            "description": "Optional description of the external accession, used to add context to the \\nidentifier if applicable.",
                                            "examples": [
                                                "taken from biosample temporarily",
                                                "Ensembl's part of the accessions",
                                                "first",
                                                2,
                                                "Recurrent Erythema Nodosum in a Child with a SHOC2 Gene Mutation"
                                            ]
                                        }
                                    },
                                    "anyOf": [
                                        {
                                            "title": "Either the identifier is needed",
                                            "required": [
                                                "objectExternalAccessionIdentifier"
                                            ]
                                        },
                                        {
                                            "title": "Or the reference is needed",
                                            "required": [
                                                "objectExternalAccessionURI"
                                            ]
                                        }
                                    ]
                                },
                                "locusAdditionalDescription": {
                                    "type": "string",
                                    "title": "Additional description of the locus",
                                    "description": "Optional free-text description of the locus to add any additional context.",
                                    "minLength": 1,
                                    "examples": [
                                        "Targeted locus number 1 out of 3 possible loci that our experimental procedure \\naimed at.",
                                        "The locus corresponds to a variant version of the defined gene, only existing in \\npatients with X disease."
                                    ]
                                }
                            },
                            "anyOf": [
                                {
                                    "title": "Either the gene description is given",
                                    "required": [
                                        "geneDescriptor"
                                    ]
                                },
                                {
                                    "title": "Or the genomic sequence context",
                                    "required": [
                                        "genomicSequenceDescriptor"
                                    ]
                                },
                                {
                                    "title": "Or an external reference to the locus context",
                                    "required": [
                                        "locusExternalReference"
                                    ]
                                }
                            ]
                        }
                    }
                }
            }
        },
        "assayTechnology": {
            "type": "object",
            "title": "Assay technology",
            "meta:propertyCurie": "EFO:0000548",
            "description": "Metadata of the assay instrument (e.g. sequencer Illumina NextSeq 500) used to \\nobtain the raw data (e.g. sequence files) of an assay.",
            "required": [
                "assayInstrument",
                "assayInstrumentPlatform"
            ],
            "additionalProperties": false,
            "properties": {
                "assayInstrument": {
                    "type": "string",
                    "title": "Assay's instrument category",
                    "meta:propertyCurie": "EFO:0002773",
                    "description": "The general categories (e.g. sequencer) in which assay instruments are \\ncategorized. Term chosen from a list of controlled vocabulary (CV). If you \\ncannot find your term in the CV list, please create an issue at our [metadata \\nGitHub \\nrepository](https://github.com/EbiEga/ega-metadata-schema/issues/new/choose) \\nproposing its addition.",
                    "enum": [
                        "array",
                        "sequencer"
                    ],
                    "meta:enum": {
                        "array": "[EFO:0002698][Array instrument](http://www.ebi.ac.uk/efo/EFO_0002698), an \\ninstrument which consists of nucleic acid or protein molecules bound to a \\nsubstrate",
                        "sequencer": "[EFO:0003739][Sequencer instrument](http://www.ebi.ac.uk/efo/EFO_0003739), an \\ninstrument that determines the order of nucleic acids in their sequences."
                    }
                },
                "assayInstrumentPlatform": {
                    "type": "string",
                    "title": "Assay instrument platform",
                    "description": "Platform of the used instrument (e.g. 'Illumina HiSeq 2500'). Given the \\nheterogenity in sequencing and array platforms (power of thousands), this \\nproperty is not restricted by a CV list (i.e. it is free text).",
                    "minLength": 1,
                    "examples": [
                        "Illumina HiSeq 2500",
                        "[HuGene-1_1-st] Affymetrix Human Gene 1.1 ST Array [probe set (exon) version]",
                        "DNBSEQ-G400 FAST"
                    ]
                }
            }
        },
        "assayType": {
            "type": "object",
            "title": "Type of used assay",
            "meta:propertyCurie": "OBI:0000070",
            "description": "Node defining the type of assay applicable to the experiment. Notice how, \\ndepending on the complexity of the assay type (i.e. how many subtypes it may \\nhave), the assay type can be a high level term (e.g. 'single cell sequencing') \\nor very specific (e.g. '454 Sequencing'). We recommend to use the most specific \\nterm possible if available: for example, in case your assay was an 'RNA-seq of \\ncoding RNA from single cells' [EFO:0005684], we advise to provide the specific \\nterm [EFO:0005684], instead of the generic 'assay by high throughput sequencer' \\n[EFO:0002697].",
            "allOf": [
                {
                    "type": "object",
                    "title": "Ontology term",
                    "description": "This property represents an ontology term (a.k.a. class). It consists on two \\nproperties: the term identifier (termId) and its label (termLabel). This \\nproperty and its structure is inherited across many other elements in the \\nschemas. It is there, when inherited, where the real ontology constraint is put \\nin place (e.g. using 'graphRestriction' keywords). Based on phenopacket's [OntologyClass](https://phenopacket-schema.readthedocs.io/en/latest/ontologyclass.html)",
                    "additionalProperties": false,
                    "required": [
                        "termId",
                        "termLabel"
                    ],
                    "properties": {
                        "termId": {
                            "type": "string",
                            "title": "ID of the term",
                            "description": "The identifier of an ontology term must be in CURIE format (check property \\n'curieGeneralPattern'). Whether a specific term is valid or not according to an \\nontology hierarchy is checked at each specific termId using ontology validation \\nkeywords (e.g. 'graphRestriction').",
                            "minLength": 1,
                            "allOf": [
                                {
                                    "type": "string",
                                    "title": "Compact URI (CURIE) pattern",
                                    "description": "A [W3C Compact URI](https://www.w3.org/TR/curie/) formatted string. A CURIE \\nstring has the structure ``prefix``:``reference``, as defined by the W3C syntax. \\nEven though we do not restrict prefixes, we recommend that the term used as \\n``prefix`` is uniformely resolved. In other words, it is better to use prefixes \\n(e.g. 'ensembl') from identifiers.org.",
                                    "minLength": 1,
                                    "pattern": "^\\w[^:]*:.+$",
                                    "examples": [
                                        "ensembl:ENSG00000139618",
                                        "HGNC:11535",
                                        "data:1026",
                                        "EFO:0003815"
                                    ]
                                }
                            ],
                            "examples": [
                                "MONDO:0100096",
                                "EFO:0003101",
                                "EFO:0005518",
                                "EFO:0002944",
                                "EFO:0003813"
                            ]
                        },
                        "termLabel": {
                            "type": "string",
                            "title": "Label of the term",
                            "description": "The label of a term is the human-readable string associated with the identifier. \\nIt is not required that it matches the label of the termId within the referenced \\nontology, although it should. This is due to the fact that the source of truth \\nwill always be the termId, and not the label, which adds more context.",
                            "minLength": 1,
                            "examples": [
                                "COVID-19",
                                "Axila skin",
                                "bone marrow cell",
                                "astrocyte",
                                "oligodendrocyte",
                                "Unknown",
                                "Unaffected",
                                "homo sapiens"
                            ]
                        }
                    }
                }
            ],
            "properties": {
                "termId": {
                    "title": "Ontology constraints for this specific termId",
                    "anyOf": [
                        {
                            "title": "Ontology validation of terms below 'assay by sequencer'",
                            "graphRestriction": {
                                "ontologies": [
                                    "obo:efo"
                                ],
                                "classes": [
                                    "EFO:0003740"
                                ],
                                "relations": [
                                    "rdfs:subClassOf"
                                ],
                                "direct": false,
                                "include_self": false
                            }
                        },
                        {
                            "title": "Ontology validation of terms below 'assay by array'",
                            "graphRestriction": {
                                "ontologies": [
                                    "obo:efo"
                                ],
                                "classes": [
                                    "EFO:0002696"
                                ],
                                "relations": [
                                    "rdfs:subClassOf"
                                ],
                                "direct": false,
                                "include_self": false
                            }
                        }
                    ],
                    "examples": [
                        "EFO:0002697",
                        "EFO:0030006",
                        "EFO:0002765",
                        "EFO:0005517"
                    ]
                }
            }
        },
        "assayedBiologicalMacromolecule": {
            "type": "object",
            "title": "Assayed biological macromolecule",
            "description": "Node containing information about the assayed biological macromolecule: the \\nmaterial entity (e.g. 'nuclear RNA') that was assayed to generate the data. We \\nrecommend that you choose the most specific term that applies to your case: for \\nexample, if the assayed molecule is 'long non polyA RNA', choose the specific \\nterm 'long non polyA RNA' [EFO:0005018], instead of the generic term \\n'ribonucleic acid' [CHEBI:33697].",
            "meta:propertyCurie": "EFO:0004446",
            "allOf": [
                {
                    "type": "object",
                    "title": "Ontology term",
                    "description": "This property represents an ontology term (a.k.a. class). It consists on two \\nproperties: the term identifier (termId) and its label (termLabel). This \\nproperty and its structure is inherited across many other elements in the \\nschemas. It is there, when inherited, where the real ontology constraint is put \\nin place (e.g. using 'graphRestriction' keywords). Based on phenopacket's [OntologyClass](https://phenopacket-schema.readthedocs.io/en/latest/ontologyclass.html)",
                    "additionalProperties": false,
                    "required": [
                        "termId",
                        "termLabel"
                    ],
                    "properties": {
                        "termId": {
                            "type": "string",
                            "title": "ID of the term",
                            "description": "The identifier of an ontology term must be in CURIE format (check property \\n'curieGeneralPattern'). Whether a specific term is valid or not according to an \\nontology hierarchy is checked at each specific termId using ontology validation \\nkeywords (e.g. 'graphRestriction').",
                            "minLength": 1,
                            "allOf": [
                                {
                                    "type": "string",
                                    "title": "Compact URI (CURIE) pattern",
                                    "description": "A [W3C Compact URI](https://www.w3.org/TR/curie/) formatted string. A CURIE \\nstring has the structure ``prefix``:``reference``, as defined by the W3C syntax. \\nEven though we do not restrict prefixes, we recommend that the term used as \\n``prefix`` is uniformely resolved. In other words, it is better to use prefixes \\n(e.g. 'ensembl') from identifiers.org.",
                                    "minLength": 1,
                                    "pattern": "^\\w[^:]*:.+$",
                                    "examples": [
                                        "ensembl:ENSG00000139618",
                                        "HGNC:11535",
                                        "data:1026",
                                        "EFO:0003815"
                                    ]
                                }
                            ],
                            "examples": [
                                "MONDO:0100096",
                                "EFO:0003101",
                                "EFO:0005518",
                                "EFO:0002944",
                                "EFO:0003813"
                            ]
                        },
                        "termLabel": {
                            "type": "string",
                            "title": "Label of the term",
                            "description": "The label of a term is the human-readable string associated with the identifier. \\nIt is not required that it matches the label of the termId within the referenced \\nontology, although it should. This is due to the fact that the source of truth \\nwill always be the termId, and not the label, which adds more context.",
                            "minLength": 1,
                            "examples": [
                                "COVID-19",
                                "Axila skin",
                                "bone marrow cell",
                                "astrocyte",
                                "oligodendrocyte",
                                "Unknown",
                                "Unaffected",
                                "homo sapiens"
                            ]
                        }
                    }
                }
            ],
            "properties": {
                "termId": {
                    "title": "Ontology constraints for this specific termId",
                    "graphRestriction ": {
                        "ontologies": [
                            "obo:efo"
                        ],
                        "classes": [
                            "EFO:0004446"
                        ],
                        "relations": [
                            "rdfs:subClassOf"
                        ],
                        "direct": false,
                        "include_self": false
                    },
                    "examples": [
                        "EFO:0005018",
                        "CHEBI:33697",
                        "EFO:0005019"
                    ]
                }
            }
        },
        "typesOfOutputData": {
            "type": "array",
            "title": "Types of output data",
            "meta:propertyCurie": "IAO:0000100",
            "description": "Types of data the experiment produces.",
            "uniqueItems": true,
            "items": {
                "type": "string",
                "title": "Type of data",
                "meta:propertyCurie": "IAO:0000100",
                "description": "Type of data an experiment or analysis can produce (i.e. output), or an analysis \\ncan use as input. For example, in a sequencing experiment the output data would \\nbe 'genomic data', while that same type of data could be the input type of data \\nfor an analysis, which would then output 'processed sequencing data'. Term \\nchosen from a list of controlled vocabulary (CV). If you cannot find your term \\nin the CV list, please create an issue at our [metadata GitHub \\nrepository](https://github.com/EbiEga/ega-metadata-schema/issues/new/choose) \\nproposing its addition.",
                "enum": [
                    "gene list",
                    "genomic data",
                    "metagenomic data",
                    "metatranscriptomic data",
                    "synthetic DNA data",
                    "transcriptomic data",
                    "viral RNA data",
                    "processed sequencing data",
                    "processed array data"
                ],
                "meta:enum": {
                    "gene list": "[OBI:0000118]",
                    "genomic data": "[EFO:0004600]",
                    "metagenomic data": "[EFO:0004602]",
                    "metatranscriptomic data": "[EFO:0004603]",
                    "synthetic DNA data": "[EFO:0004604]",
                    "transcriptomic data": "[EFO:0004601]",
                    "viral RNA data": "[EFO:0004605]",
                    "processed sequencing data": "[EFO:0004663]: raw sequencing data (e.g. FastQ files) were processed in any way \\n(e.g. normalization, noise reduction, alignment...) and transformed into \\nprocessed genotype data files [EFO:0004663].",
                    "processed array data": "[EFO:0004096]: raw array data (e.g. CEL files) were processed in any way (e.g. \\nnormalization, noise reduction...) and transformed into processed array data \\nfiles [EFO:0004096]."
                }
            }
        },
        "experimentTypeSpecifications": {
            "type": "object",
            "title": "Experiment type specifications",
            "description": "Node containing additional attributes to describe the experiment, either array \\nexperiments (those in which an [array instrument \\n[EFO:0002698]](http://www.ebi.ac.uk/efo/EFO_0002698) was used) or sequencing \\nexperiments (those in which a [sequencing instrument \\n[EFO:0003739]](http://www.ebi.ac.uk/efo/EFO_0003739) was used). For example, if \\nan array was used, its Array Design Format (ADF) will be expected.",
            "additionalProperties": false,
            "properties": {
                "arrayExperiment": {
                    "type": "object",
                    "title": "Specifications of an array experiment",
                    "description": "Node containing the set of fields specific to an experiment of array-type (i.e. \\nan array was used to obtain the raw data).",
                    "additionalProperties": false,
                    "required": [
                        "arrayLabels",
                        "adfFiles"
                    ],
                    "properties": {
                        "arrayLabels": {
                            "type": "array",
                            "title": "Array label of the experiment",
                            "meta:propertyCurie": "EFO:0000562",
                            "description": "Chemicals conjugated to nucleic acid/proteins to label them before microarray \\nhybridisation. Can be repeated so that dual labelled arrays can be taken into \\naccount.",
                            "additionalProperties": false,
                            "uniqueItems": true,
                            "minItems": 1,
                            "items": {
                                "type": "object",
                                "title": "Repeatable arrayLabel node",
                                "description": "Chemical conjugated to nucleic acid/proteins to label them before microarray \\nhybridisation. This node defines one single label, and thus should be repeated \\nas an array where inherited if multiple labels are intended to be described.",
                                "anyOf": [
                                    {
                                        "required": [
                                            "arrayLabelIdentifier"
                                        ]
                                    },
                                    {
                                        "required": [
                                            "arrayLabelDescription"
                                        ]
                                    }
                                ],
                                "additionalProperties": false,
                                "properties": {
                                    "arrayLabelIdentifier": {
                                        "type": "object",
                                        "title": "Array label identifier",
                                        "description": "The chosen term (e.g. 'Cy3 dye' [CHEBI:37987]) needs to be a Chemical Entity \\nfrom the CHEBI ontology, look for yours at: \\nhttps://www.ebi.ac.uk/ols/search?q=&ontology=chebi",
                                        "allOf": [
                                            {
                                                "type": "object",
                                                "title": "Ontology term",
                                                "description": "This property represents an ontology term (a.k.a. class). It consists on two \\nproperties: the term identifier (termId) and its label (termLabel). This \\nproperty and its structure is inherited across many other elements in the \\nschemas. It is there, when inherited, where the real ontology constraint is put \\nin place (e.g. using 'graphRestriction' keywords). Based on phenopacket's [OntologyClass](https://phenopacket-schema.readthedocs.io/en/latest/ontologyclass.html)",
                                                "additionalProperties": false,
                                                "required": [
                                                    "termId",
                                                    "termLabel"
                                                ],
                                                "properties": {
                                                    "termId": {
                                                        "type": "string",
                                                        "title": "ID of the term",
                                                        "description": "The identifier of an ontology term must be in CURIE format (check property \\n'curieGeneralPattern'). Whether a specific term is valid or not according to an \\nontology hierarchy is checked at each specific termId using ontology validation \\nkeywords (e.g. 'graphRestriction').",
                                                        "minLength": 1,
                                                        "allOf": [
                                                            {
                                                                "type": "string",
                                                                "title": "Compact URI (CURIE) pattern",
                                                                "description": "A [W3C Compact URI](https://www.w3.org/TR/curie/) formatted string. A CURIE \\nstring has the structure ``prefix``:``reference``, as defined by the W3C syntax. \\nEven though we do not restrict prefixes, we recommend that the term used as \\n``prefix`` is uniformely resolved. In other words, it is better to use prefixes \\n(e.g. 'ensembl') from identifiers.org.",
                                                                "minLength": 1,
                                                                "pattern": "^\\w[^:]*:.+$",
                                                                "examples": [
                                                                    "ensembl:ENSG00000139618",
                                                                    "HGNC:11535",
                                                                    "data:1026",
                                                                    "EFO:0003815"
                                                                ]
                                                            }
                                                        ],
                                                        "examples": [
                                                            "MONDO:0100096",
                                                            "EFO:0003101",
                                                            "EFO:0005518",
                                                            "EFO:0002944",
                                                            "EFO:0003813"
                                                        ]
                                                    },
                                                    "termLabel": {
                                                        "type": "string",
                                                        "title": "Label of the term",
                                                        "description": "The label of a term is the human-readable string associated with the identifier. \\nIt is not required that it matches the label of the termId within the referenced \\nontology, although it should. This is due to the fact that the source of truth \\nwill always be the termId, and not the label, which adds more context.",
                                                        "minLength": 1,
                                                        "examples": [
                                                            "COVID-19",
                                                            "Axila skin",
                                                            "bone marrow cell",
                                                            "astrocyte",
                                                            "oligodendrocyte",
                                                            "Unknown",
                                                            "Unaffected",
                                                            "homo sapiens"
                                                        ]
                                                    }
                                                }
                                            }
                                        ],
                                        "properties": {
                                            "termId": {
                                                "title": "Ontology constraints for this specific termId",
                                                "graphRestriction ": {
                                                    "ontologies": [
                                                        "obo:chebi"
                                                    ],
                                                    "classes": [
                                                        "CHEBI:24431"
                                                    ],
                                                    "relations": [
                                                        "rdfs:subClassOf"
                                                    ],
                                                    "direct": false,
                                                    "include_self": false
                                                },
                                                "examples": [
                                                    "CHEBI:37987",
                                                    "CHEBI:15956"
                                                ]
                                            }
                                        }
                                    },
                                    "arrayLabelDescription": {
                                        "type": "string",
                                        "title": "Array label description",
                                        "description": "Additional description of the used array label, indicating further details: \\ncontext, purpose of the label, description of the label in the absence of an \\nontologized term, etcetera.",
                                        "minLength": 1,
                                        "examples": [
                                            "This label was used to dye the control samples",
                                            "This newly discovered label (yet to be added to an ontology) consists of a \\ncompound of type X...",
                                            "The label ID is unknown because we were given an already dyed kit..."
                                        ]
                                    }
                                }
                            }
                        },
                        "adfFiles": {
                            "type": "array",
                            "title": "Array Design Format (ADF) [NCIT:C172213] file block",
                            "description": "The array design format (ADF) [NCIT:C172213] is the unique set of probes (with \\ntheir coordinates) found on the microarray chip. They can be standard (sold by a \\ncompany) or custom. Its format is of a spreadsheet-like tab-delimited text file \\nwith metadata header rows, followed by a multi-column table of probe \\ninformation. For example, see ADF for [arrayexpress:E-MTAB-3050](https://www.ebi.ac.uk/arrayexpress/files/A-GEOD-28079/A-GEOD-28079.adf.txt) \\nor [arrayexpress:E-MEXP-1712](https://www.ebi.ac.uk/arrayexpress/files/A-AFFY-125/A-AFFY-125.adf.txt). \\nThis node is an array of file nodes in case the ADF is given in several formats \\n(e.g. tsv, xlsx, csv...).",
                            "minItems": 1,
                            "additionalProperties": false,
                            "uniqueItems": true,
                            "items": {
                                "type": "object",
                                "title": "EGA File object",
                                "description": "Object containing the base metadata attributes of a file object in the EGA. \\nThese can inherited elsewhere with or without extending them.",
                                "required": [
                                    "filename",
                                    "filetype",
                                    "checksumMethod",
                                    "unencryptedChecksum",
                                    "encryptedChecksum"
                                ],
                                "additionalProperties": false,
                                "properties": {
                                    "filename": {
                                        "type": "string",
                                        "title": "Filename",
                                        "meta:propertyCurie": "data:1050",
                                        "description": "The full name of a file, including all of their file extensions (e.g. .gpg, \\n.md5...), that identifies the file (e.g. 'my-bam-file.bam.gpg').",
                                        "pattern": "^[^<>:;,?\"*|]+$",
                                        "examples": [
                                            "my-bam-file.bam.gpg"
                                        ]
                                    },
                                    "fileContent": {
                                        "type": "array",
                                        "title": "File content array",
                                        "description": "Array of file content items. This array exists to clarify what the purpose of a \\nfile, regardless of its format, may be. For example, a TXT formatted file could \\ncontain multiple types of data, from gene annotations to READMEs. Therefore, \\nselect the items from the used ontology that best describe the content of your \\nfile.",
                                        "additionalProperties": false,
                                        "uniqueItems": true,
                                        "minItems": 1,
                                        "items": {
                                            "type": "object",
                                            "title": "File content item",
                                            "description": "Item describing the type of data a file contains or represents.",
                                            "meta:propertyCurie": "format:2350",
                                            "allOf": [
                                                {
                                                    "type": "object",
                                                    "title": "Ontology term",
                                                    "description": "This property represents an ontology term (a.k.a. class). It consists on two \\nproperties: the term identifier (termId) and its label (termLabel). This \\nproperty and its structure is inherited across many other elements in the \\nschemas. It is there, when inherited, where the real ontology constraint is put \\nin place (e.g. using 'graphRestriction' keywords). Based on phenopacket's [OntologyClass](https://phenopacket-schema.readthedocs.io/en/latest/ontologyclass.html)",
                                                    "additionalProperties": false,
                                                    "required": [
                                                        "termId",
                                                        "termLabel"
                                                    ],
                                                    "properties": {
                                                        "termId": {
                                                            "type": "string",
                                                            "title": "ID of the term",
                                                            "description": "The identifier of an ontology term must be in CURIE format (check property \\n'curieGeneralPattern'). Whether a specific term is valid or not according to an \\nontology hierarchy is checked at each specific termId using ontology validation \\nkeywords (e.g. 'graphRestriction').",
                                                            "minLength": 1,
                                                            "allOf": [
                                                                {
                                                                    "type": "string",
                                                                    "title": "Compact URI (CURIE) pattern",
                                                                    "description": "A [W3C Compact URI](https://www.w3.org/TR/curie/) formatted string. A CURIE \\nstring has the structure ``prefix``:``reference``, as defined by the W3C syntax. \\nEven though we do not restrict prefixes, we recommend that the term used as \\n``prefix`` is uniformely resolved. In other words, it is better to use prefixes \\n(e.g. 'ensembl') from identifiers.org.",
                                                                    "minLength": 1,
                                                                    "pattern": "^\\w[^:]*:.+$",
                                                                    "examples": [
                                                                        "ensembl:ENSG00000139618",
                                                                        "HGNC:11535",
                                                                        "data:1026",
                                                                        "EFO:0003815"
                                                                    ]
                                                                }
                                                            ],
                                                            "examples": [
                                                                "MONDO:0100096",
                                                                "EFO:0003101",
                                                                "EFO:0005518",
                                                                "EFO:0002944",
                                                                "EFO:0003813"
                                                            ]
                                                        },
                                                        "termLabel": {
                                                            "type": "string",
                                                            "title": "Label of the term",
                                                            "description": "The label of a term is the human-readable string associated with the identifier. \\nIt is not required that it matches the label of the termId within the referenced \\nontology, although it should. This is due to the fact that the source of truth \\nwill always be the termId, and not the label, which adds more context.",
                                                            "minLength": 1,
                                                            "examples": [
                                                                "COVID-19",
                                                                "Axila skin",
                                                                "bone marrow cell",
                                                                "astrocyte",
                                                                "oligodendrocyte",
                                                                "Unknown",
                                                                "Unaffected",
                                                                "homo sapiens"
                                                            ]
                                                        }
                                                    }
                                                }
                                            ],
                                            "properties": {
                                                "termId": {
                                                    "title": "Ontology constraints for this specific termId",
                                                    "description": "Property containing just the ontology constraints for the file content. Notice \\nthe 'direct' being 'true', which makes the constraint more stringent, and only \\nallows for terms one step below [format:2350].",
                                                    "graphRestriction ": {
                                                        "ontologies": [
                                                            "obo:edam"
                                                        ],
                                                        "classes": [
                                                            "format:2350"
                                                        ],
                                                        "relations": [
                                                            "rdfs:subClassOf"
                                                        ],
                                                        "direct": true,
                                                        "include_self": false
                                                    },
                                                    "examples": [
                                                        "format:1919",
                                                        "format:3326"
                                                    ]
                                                }
                                            }
                                        }
                                    },
                                    "filetype": {
                                        "type": "string",
                                        "title": "Filetype",
                                        "meta:propertyCurie": "format:1915",
                                        "description": "The main format in which data is structured and represented in an electronic \\nfile. It is normally defined by the file extension of the file (e.g. FASTQ for a \\n'.fastq' file). The string corresponds to the ID or name (e.g. FASTA, TSV...), \\nchosen from a list of controlled vocabulary (CV), associated with the given \\nfiletype. If you cannot find your term in the CV list, please create an issue at \\nour [metadata GitHub \\nrepository](https://github.com/EbiEga/ega-metadata-schema/issues/new/choose) \\nproposing its addition.",
                                        "enum": [
                                            "CEL",
                                            "TSV",
                                            "FASTQ",
                                            "FASTA",
                                            "VCF",
                                            "SRA",
                                            "SRF",
                                            "SFF",
                                            "BAM",
                                            "CRAM",
                                            "XLSX",
                                            "CSV",
                                            "BED",
                                            "IDAT",
                                            "MAP",
                                            "PED",
                                            "BIM",
                                            "FAM",
                                            "TXT",
                                            "EXP",
                                            "GPR",
                                            "PY",
                                            "SH",
                                            "ADF",
                                            "SDRF",
                                            "IDF",
                                            "MD5",
                                            "HAP",
                                            "CSFASTA",
                                            "LOC",
                                            "HTML",
                                            "HIC",
                                            "MD",
                                            "MATLAB",
                                            "PERL",
                                            "TIF",
                                            "R",
                                            "SNP",
                                            "XML",
                                            "SVG",
                                            "PNG",
                                            "JPG",
                                            "GTC",
                                            "HDF5",
                                            "FAST5",
                                            "PAIR",
                                            "TXT",
                                            "BGI",
                                            "BGEN",
                                            "GEN",
                                            "PXF",
                                            "LOOM",
                                            "BAX.H5",
                                            "BAS.H5",
                                            "ASM",
                                            "CSI",
                                            "TBI",
                                            "BCF",
                                            "qual454",
                                            "qualsolid",
                                            "FASTQ-illumina",
                                            "FASTQ-helicos",
                                            "FASTQ-sanger",
                                            "FASTQ-solexa",
                                            "SAM",
                                            "CRAI",
                                            "BAI",
                                            "MTX",
                                            "MEX ",
                                            "GMX",
                                            "GMT",
                                            "GRP"
                                        ],
                                        "meta:enum": {
                                            "CEL": "[format:1638]",
                                            "TSV": "[format:3475]",
                                            "FASTQ": "[format:1930]",
                                            "FASTA": "[format:1929]",
                                            "VCF": "[format:3016]",
                                            "SRA": "[format:3698]",
                                            "SRF": "[format:3698]",
                                            "SFF": "[format:3284]",
                                            "BAM": "[format:2572]",
                                            "CRAM": "[format:3462]",
                                            "XLSX": "[format:3620]",
                                            "CSV": "[format:3752]",
                                            "BED": "[format:3003]",
                                            "IDAT": "[format:3578]",
                                            "MAP": "[format:3285]",
                                            "PED": "[format:3286]",
                                            "BIM": "[]",
                                            "FAM": "[]",
                                            "EXP": "[format:1631]",
                                            "GPR": "[format:3829]",
                                            "PY": "[format:3996]",
                                            "SH": "[]",
                                            "ADF": "[NCIT:C172213]",
                                            "SDRF": "[NCIT:C172211]",
                                            "IDF": "[NCIT:C172212]",
                                            "MD5": "[data:2190]",
                                            "HAP": "[]",
                                            "CSFASTA": "[]",
                                            "LOC": "[]",
                                            "HTML": "[format:2331]",
                                            "HIC": "[]",
                                            "MD": "[]",
                                            "MATLAB": "[format:4007]",
                                            "PERL": "[format:3998]",
                                            "TIF": "[]",
                                            "R": "[format:3999]",
                                            "SNP": "[]",
                                            "XML": "[format:2332]",
                                            "SVG": "[format:3604]",
                                            "PNG": "[format:3603]",
                                            "JPG": "[format:3579]",
                                            "GTC": "[]: An Illumina-specific file containing called genotypes in AA/AB/BB format",
                                            "HDF5": "[format:3590]",
                                            "FAST5": "[]",
                                            "PAIR": "[]",
                                            "TXT": "[format:2330]",
                                            "BGI": "[]: Index file of a BGEN file",
                                            "BGEN": "[]: Binary version of a GEN file",
                                            "GEN": "[format:3812]",
                                            "PXF": "[]: A phenopacket. An open standard for sharing disease and phenotype \\ninformation represented as PXF (Phenotype Exchange Format) files, which may be \\nencoded in JSON or YAML.",
                                            "LOOM": "[format:3913]",
                                            "BAX.H5": "[]",
                                            "BAS.H5": "[]",
                                            "ASM": "[]: The files in the ASM directory describe and annotate the genome assembly \\nwith respect to the reference genome.",
                                            "CSI": "[]",
                                            "TBI": "[format:3700]",
                                            "BCF": "[format:3020]",
                                            "qual454": "[format:3611]",
                                            "qualsolid": "[format:3610]",
                                            "FASTQ-illumina": "[format:1931]",
                                            "FASTQ-helicos": "[]",
                                            "FASTQ-sanger": "[format:1932]",
                                            "FASTQ-solexa": "[format:1933]",
                                            "SAM": "[format:2573]",
                                            "CRAI": "[]: CRAM indexing format",
                                            "BAI": "[format:3327]",
                                            "MTX": "[format:3916]",
                                            "MEX ": "[]: Market Exchange Format (MEX) for sparse matrices. It contains a matrix (MTX) \\nfile, and also gzipped TSV files with feature and barcode sequences \\ncorresponding to row and column indices respectively. Feature-barcode matrix",
                                            "GMX": "[]",
                                            "GMT": "[]",
                                            "GRP": "[]"
                                        }
                                    },
                                    "checksumMethod": {
                                        "type": "string",
                                        "title": "Checksum method ID",
                                        "meta:propertyCurie": "REPR:ChecksumAlgorithm",
                                        "description": "Node containing both the ID (MD5 or SHA-256), describing the method which yields \\nthe checksum from a data input for the purpose of detecting errors. Term chosen \\nfrom a list of controlled vocabulary (CV). If you cannot find your term in the \\nCV list, please create an issue at our [metadata GitHub \\nrepository](https://github.com/EbiEga/ega-metadata-schema/issues/new/choose) \\nproposing its addition.",
                                        "enum": [
                                            "MD5",
                                            "SHA-256"
                                        ],
                                        "meta:enum": {
                                            "MD5": "[NCIT:C171276]",
                                            "SHA-256": "[NCIT:C80226]"
                                        }
                                    },
                                    "unencryptedChecksum": {
                                        "type": "string",
                                        "title": "Checksum [NCIT:C43522] of the unencrypted file",
                                        "description": "A computed value which depends on the contents of a block of data and which is \\ntransmitted or stored along with the data in order to detect corruption of the \\ndata, computed from the unencrypted files.",
                                        "examples": [
                                            "46798b5cfca45c46a84b7419f8b74735"
                                        ],
                                        "oneOf": [
                                            {
                                                "type": "string",
                                                "title": "Checksum pattern obtained by MD5",
                                                "description": "This object exists to hold the pattern that a checksum would have if it was \\nobtained using the algorithm MD5, for it to be referenced elsewhere within this \\n(or other) JSON schema.",
                                                "pattern": "^[0-9a-z](?:-?[0-9a-z]){31}$",
                                                "examples": [
                                                    "bc527343c7ffc103111f3a694b004e2f"
                                                ]
                                            },
                                            {
                                                "type": "string",
                                                "title": "Checksum pattern obtained by SHA-256",
                                                "description": "This object exists to hold the pattern that a checksum would have if it was \\nobtained using the algorithm SHA-256, for it to be referenced elsewhere within \\nthis (or other) JSON schema.",
                                                "pattern": "^[A-Fa-f0-9]{64}$",
                                                "examples": [
                                                    "c01b39c7a35ccc3b081a3e83d2c71fa9a767ebfeb45c69f08e17dfe3ef375a7b"
                                                ]
                                            }
                                        ]
                                    },
                                    "encryptedChecksum": {
                                        "type": "string",
                                        "title": "Checksum [NCIT:C43522] of the encrypted file",
                                        "description": "A computed value which depends on the contents of a block of data and which is \\ntransmitted or stored along with the data in order to detect corruption of the \\ndata, computed from the encrypted files.",
                                        "examples": [
                                            "bc527343c7ffc103111f3a694b004e2f"
                                        ],
                                        "oneOf": [
                                            {
                                                "type": "string",
                                                "title": "Checksum pattern obtained by MD5",
                                                "description": "This object exists to hold the pattern that a checksum would have if it was \\nobtained using the algorithm MD5, for it to be referenced elsewhere within this \\n(or other) JSON schema.",
                                                "pattern": "^[0-9a-z](?:-?[0-9a-z]){31}$",
                                                "examples": [
                                                    "bc527343c7ffc103111f3a694b004e2f"
                                                ]
                                            },
                                            {
                                                "type": "string",
                                                "title": "Checksum pattern obtained by SHA-256",
                                                "description": "This object exists to hold the pattern that a checksum would have if it was \\nobtained using the algorithm SHA-256, for it to be referenced elsewhere within \\nthis (or other) JSON schema.",
                                                "pattern": "^[A-Fa-f0-9]{64}$",
                                                "examples": [
                                                    "c01b39c7a35ccc3b081a3e83d2c71fa9a767ebfeb45c69f08e17dfe3ef375a7b"
                                                ]
                                            }
                                        ]
                                    },
                                    "sequenceQualityDetails": {
                                        "type": "object",
                                        "title": "Sequence quality details",
                                        "description": "Sequencing quality scores measure the probability that a base is called (i.e. \\nsequenced) incorrectly. New sequencing technologies assign a quality score to \\neach of the bases in the sequence.",
                                        "required": [
                                            "qualityScoringSystem"
                                        ],
                                        "additionalProperties": false,
                                        "properties": {
                                            "qualityScoringSystem": {
                                                "type": "string",
                                                "title": "Quality scoring system",
                                                "description": "How the quality score was computed for the data.",
                                                "enum": [
                                                    "phred",
                                                    "logOdds"
                                                ],
                                                "meta:enum": {
                                                    "phred": "The quality score is expressed as a probability of error in log form: -10 \\nlog(1/p) where p is the probability of error, with value range 0..63 (0 meaning \\nno base call).",
                                                    "logOdds": "The quality score is expressed as the ratio of error to non-error in log form: \\n-10 log(p/(1-p)) where p is the of error, with value range -40..40. The SRA will \\nconvert these into phred scale during loadtime."
                                                }
                                            },
                                            "qualityEncoding": {
                                                "type": "string",
                                                "title": "Quality encoding format",
                                                "description": "Encoding system used to represent the quality score.",
                                                "enum": [
                                                    "ascii",
                                                    "decimal",
                                                    "hexadecimal"
                                                ],
                                                "meta:enum": {
                                                    "ascii": "ASCII character based encoding.",
                                                    "decimal": "Single decimal value per quality score.",
                                                    "hexadecimal": "Single hexadecimal value per quality score."
                                                }
                                            },
                                            "asciiOffset": {
                                                "type": "string",
                                                "title": "ASCII offset",
                                                "description": "Character used in representing the minimum quality value. Helps specify how to \\ndecode text rendering of quality data.",
                                                "enum": [
                                                    "!",
                                                    "@"
                                                ],
                                                "meta:enum": {
                                                    "!": "ASCII value 33.  Typically used for range 0..63.",
                                                    "@": "ASCII value 64.  Typically used for range 0..60."
                                                }
                                            }
                                        }
                                    }
                                },
                                "allOf": [
                                    {
                                        "type": "object",
                                        "title": "Check: checksum checks based on its method",
                                        "description": "This object exists with the only purpose of being a reference of pattern checks \\nof the given checksum (e.g. 'c6779ec2960296ed9a04f08d67f64423') of a file based \\non its corresponding method (e.g. if the given checksum method is 'MD5' the \\nchecksum shall fit into MD5's format of '^[0-9a-z](?:-?[0-9a-z]){31}$')",
                                        "anyOf": [
                                            {
                                                "title": "Checksum pattern check - MD5",
                                                "description": "A check that ensures that, if MD5 is given as a checksumMethodId, the checksums \\nper se (e.g. unencryptedChecksum) follow MD5 patterns (md5ChecksumPattern).",
                                                "properties": {
                                                    "checksumMethod": {
                                                        "enum": [
                                                            "MD5"
                                                        ]
                                                    },
                                                    "unencryptedChecksum": {
                                                        "type": "string",
                                                        "title": "Checksum pattern obtained by MD5",
                                                        "description": "This object exists to hold the pattern that a checksum would have if it was \\nobtained using the algorithm MD5, for it to be referenced elsewhere within this \\n(or other) JSON schema.",
                                                        "pattern": "^[0-9a-z](?:-?[0-9a-z]){31}$",
                                                        "examples": [
                                                            "bc527343c7ffc103111f3a694b004e2f"
                                                        ]
                                                    },
                                                    "encryptedChecksum": {
                                                        "type": "string",
                                                        "title": "Checksum pattern obtained by MD5",
                                                        "description": "This object exists to hold the pattern that a checksum would have if it was \\nobtained using the algorithm MD5, for it to be referenced elsewhere within this \\n(or other) JSON schema.",
                                                        "pattern": "^[0-9a-z](?:-?[0-9a-z]){31}$",
                                                        "examples": [
                                                            "bc527343c7ffc103111f3a694b004e2f"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "Checksum pattern check - SHA-256",
                                                "description": "A check that ensures that, if SHA-256 is given as a checksumMethodId, the \\nchecksums per se (e.g. unencryptedChecksum) follow SHA-256 patterns \\n(sha-256-checksum-pattern).",
                                                "properties": {
                                                    "checksumMethod": {
                                                        "enum": [
                                                            "SHA-256"
                                                        ]
                                                    },
                                                    "unencryptedChecksum": {
                                                        "type": "string",
                                                        "title": "Checksum pattern obtained by SHA-256",
                                                        "description": "This object exists to hold the pattern that a checksum would have if it was \\nobtained using the algorithm SHA-256, for it to be referenced elsewhere within \\nthis (or other) JSON schema.",
                                                        "pattern": "^[A-Fa-f0-9]{64}$",
                                                        "examples": [
                                                            "c01b39c7a35ccc3b081a3e83d2c71fa9a767ebfeb45c69f08e17dfe3ef375a7b"
                                                        ]
                                                    },
                                                    "encryptedChecksum": {
                                                        "type": "string",
                                                        "title": "Checksum pattern obtained by SHA-256",
                                                        "description": "This object exists to hold the pattern that a checksum would have if it was \\nobtained using the algorithm SHA-256, for it to be referenced elsewhere within \\nthis (or other) JSON schema.",
                                                        "pattern": "^[A-Fa-f0-9]{64}$",
                                                        "examples": [
                                                            "c01b39c7a35ccc3b081a3e83d2c71fa9a767ebfeb45c69f08e17dfe3ef375a7b"
                                                        ]
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        "type": "object",
                                        "title": "Check: filetype checks based on its filename",
                                        "description": "This object exists with the only purpose of being a reference of pattern checks \\nof the given filetype of a file based on its corresponding filename (e.g. if the \\nfile is 'alignment.bam.gpg' its filetypeId shall be 'BAM' and not 'XLSX')",
                                        "anyOf": [
                                            {
                                                "title": "CEL Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "CEL"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a CEL file",
                                                        "meta:propertyCurie": "format:1638",
                                                        "description": "This object exists to hold the filename pattern that a 'CEL' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^.+\\.cel(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.cel.gz.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "TSV Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "TSV"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a TSV file",
                                                        "meta:propertyCurie": "format:3475",
                                                        "description": "This object exists to hold the filename pattern that a 'TSV' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^.+\\.tsv(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.tsv.gz.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "ADF Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "ADF"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a ADF (Array Design Format) file",
                                                        "meta:propertyCurie": "NCIT:C172213",
                                                        "description": "This object exists to hold the filename pattern that a 'ADF' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.(adf)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.adf.gz.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "FASTQ Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "FASTQ"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a FASTQ file",
                                                        "meta:propertyCurie": "format:1930",
                                                        "description": "This object exists to hold the filename pattern that a 'FASTQ' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^.+\\.(fastq|fq)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.fastq.gz.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "FASTA Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "FASTA"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a FASTA file",
                                                        "meta:propertyCurie": "format:1929",
                                                        "description": "This object exists to hold the filename pattern that a 'FASTA' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^.+\\.(fasta|fa|frn|faa|ffn|fna|seq)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.fasta.gz.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "SDRF Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "SDRF"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a SDRF file",
                                                        "meta:propertyCurie": "NCIT:C172211",
                                                        "description": "This object exists to hold the filename pattern that a 'SDRF' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^.+\\.(tsv|sdrf)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.sdrf.gz.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "IDF Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "IDF"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a IDF file",
                                                        "meta:propertyCurie": "NCIT:C172212",
                                                        "description": "This object exists to hold the filename pattern that a 'IDF' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^.+\\.(tsv|idf)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.idf.gz.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "VCF Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "VCF"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a VCF file",
                                                        "meta:propertyCurie": "format:3016",
                                                        "description": "This object exists to hold the filename pattern that a 'VCF' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^.+\\.vcf(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.vcf.gz.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "SRA Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "SRA"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a SRA file",
                                                        "meta:propertyCurie": "format:3698",
                                                        "description": "This object exists to hold the filename pattern that a 'SRA' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^.+\\.sra(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.sra.gz"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "SRF Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "SRF"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a SRF file",
                                                        "meta:propertyCurie": "format:3017",
                                                        "description": "This object exists to hold the filename pattern that a 'SRF' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^.+\\.srf(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.srf.gz.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "SFF Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "SFF"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a SFF file",
                                                        "meta:propertyCurie": "format:3284",
                                                        "description": "This object exists to hold the filename pattern that a 'SFF' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^.+\\.sff(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.sff.gz.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "BAM Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "BAM"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a BAM file",
                                                        "meta:propertyCurie": "format:2572",
                                                        "description": "This object exists to hold the filename pattern that a 'BAM' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^.+\\.bam(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.bam.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "CRAM Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "CRAM"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a CRAM file",
                                                        "meta:propertyCurie": "format:3462",
                                                        "description": "This object exists to hold the filename pattern that a 'CRAM' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^.+\\.cram(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.cram.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "XLSX Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "XLSX"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a  file",
                                                        "meta:propertyCurie": "format:3620",
                                                        "description": "This object exists to hold the filename pattern that a 'XLSX' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^.+\\.xlsx(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.xlsx.tar.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "CSV Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "CSV"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a CSV file",
                                                        "meta:propertyCurie": "format:3752",
                                                        "description": "This object exists to hold the filename pattern that a 'CSV' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^.+\\.csv(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.csv"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "BED Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "BED"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a BED file",
                                                        "meta:propertyCurie": "format:3003",
                                                        "description": "This object exists to hold the filename pattern that a 'BED' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^.+\\.bed(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.bed.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "IDAT Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "IDAT"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a IDAT file",
                                                        "meta:propertyCurie": "format:3578",
                                                        "description": "This object exists to hold the filename pattern that a 'IDAT' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^.+\\.idat(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.idat.zip"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "MAP Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "MAP"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a MAP file",
                                                        "meta:propertyCurie": "format:3285",
                                                        "description": "This object exists to hold the filename pattern that a 'MAP' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^.+\\.map(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.map.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "PED Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "PED"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a PED file",
                                                        "meta:propertyCurie": "format:3286",
                                                        "description": "This object exists to hold the filename pattern that a 'PED' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^.+\\.(ped|tped)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.ped.gz.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "BIM Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "BIM"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a BIM file",
                                                        "description": "This object exists to hold the filename pattern that a 'BIM' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^.+\\.bim(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.bim.gz.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "FAM Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "FAM"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a FAM file",
                                                        "description": "This object exists to hold the filename pattern that a 'FAM' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^.+\\.(fam|tfam)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.fam.gz.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "TXT Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "TXT"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a TXT file",
                                                        "meta:propertyCurie": "format:2330",
                                                        "description": "This object exists to hold the filename pattern that a 'TXT' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema. It \\ncan represent multiple types of data (e.g. an ADF file or a README file)",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.(txt|TXT)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.txt.gz.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "EXP Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "EXP"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a EXP file",
                                                        "meta:propertyCurie": "format:1631",
                                                        "description": "This object exists to hold the filename pattern that a 'EXP' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.(exp|EXP)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.exp.gz.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "GPR Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "GPR"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a GPR file",
                                                        "meta:propertyCurie": "format:3829",
                                                        "description": "This object exists to hold the filename pattern that a 'GPR' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.(gpr|GPR)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.gpr.gz.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "PY Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "PY"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a PY file",
                                                        "meta:propertyCurie": "format:3996",
                                                        "description": "This object exists to hold the filename pattern that a 'PY' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.(py|PY|pyc|pyo|pyd|ipynb)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.py.gz.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "SH Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "SH"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a SH file",
                                                        "description": "This object exists to hold the filename pattern that a 'SH' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.(sh|SH)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.sh.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "MD5 Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "MD5"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a MD5 file",
                                                        "meta:propertyCurie": "data:2190",
                                                        "description": "This object exists to hold the filename pattern that a 'MD5' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.(md5|MD5)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.md5.gz.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "HAP Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "HAP"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a HAP file",
                                                        "description": "This object exists to hold the filename pattern that a 'HAP' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.(hap|HAP)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.hap.gz.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "CSFASTA Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "CSFASTA"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a CSFASTA file",
                                                        "description": "This object exists to hold the filename pattern that a 'CSFASTA' filetypeId \\nwould have, for it to be referenced elsewhere within this (or other) JSON \\nschema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.csfasta(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.csfasta.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "LOC Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "LOC"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a LOC file",
                                                        "description": "This object exists to hold the filename pattern that a 'LOC' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.(loc|tsv)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.loc.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "HTML Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "HTML"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a HTML file",
                                                        "meta:propertyCurie": "format:2331",
                                                        "description": "This object exists to hold the filename pattern that a 'HTML' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.html(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.html.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "HIC Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "HIC"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a HIC file",
                                                        "description": "This object exists to hold the filename pattern that a 'HIC' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.hic(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.hic.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "MD Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "MD"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a MD file",
                                                        "description": "This object exists to hold the filename pattern that a 'MD' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.(md|markdown)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.md.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "MATLAB Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "MATLAB"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a MATLAB file",
                                                        "meta:propertyCurie": "format:4007",
                                                        "description": "This object exists to hold the filename pattern that a 'MATLAB' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.(M|m|MAT|mat)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.mat.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "PERL Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "PERL"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a PERL file",
                                                        "meta:propertyCurie": "format:3998",
                                                        "description": "This object exists to hold the filename pattern that a 'PERL' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.(pl|perl)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.pl.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "TIF Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "TIF"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a TIF file",
                                                        "description": "This object exists to hold the filename pattern that a 'TIF' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.tif(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.tif.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "R Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "R"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a R file",
                                                        "meta:propertyCurie": "format:3999",
                                                        "description": "This object exists to hold the filename pattern that a 'R' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.(r|R|rdata|rda)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.r.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "SNP Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "SNP"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a SNP file",
                                                        "description": "This object exists to hold the filename pattern that a 'SNP' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.snp(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.snp.zip.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "XML Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "XML"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a XML file",
                                                        "meta:propertyCurie": "format:2332",
                                                        "description": "This object exists to hold the filename pattern that a 'XML' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.xml(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.xml.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "SVG Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "SVG"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a SVG file",
                                                        "meta:propertyCurie": "format:3604",
                                                        "description": "This object exists to hold the filename pattern that a 'SVG' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.svg(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.svg.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "PNG Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "PNG"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a PNG file",
                                                        "meta:propertyCurie": "format:3603",
                                                        "description": "This object exists to hold the filename pattern that a 'PNG' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.png(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.png.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "JPG Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "JPG"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a JPG file",
                                                        "meta:propertyCurie": "format:3579",
                                                        "description": "This object exists to hold the filename pattern that a 'JPG' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.jpg(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.jpg.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "GTC Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "GTC"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a GTC file",
                                                        "description": "This object exists to hold the filename pattern that a 'GTC' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.gtc(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.gtc.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "HDF5 Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "HDF5"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a HDF5 file",
                                                        "meta:propertyCurie": "format:3590",
                                                        "description": "This object exists to hold the filename pattern that a 'HDF5' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.(h5|hdf5)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.h5.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "FAST5 Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "FAST5"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a FAST5 file",
                                                        "meta:propertyCurie": "format:3590",
                                                        "description": "This object exists to hold the filename pattern that a 'FAST5' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.fast5(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.fast5.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "PAIR Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "PAIR"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a PAIR file",
                                                        "description": "This object exists to hold the filename pattern that a 'PAIR' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.pair(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.pair.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "TXT Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "TXT"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a TXT file",
                                                        "meta:propertyCurie": "format:2330",
                                                        "description": "This object exists to hold the filename pattern that a 'TXT' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema. It \\ncan represent multiple types of data (e.g. an ADF file or a README file)",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.(txt|TXT)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.txt.gz.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "BGI Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "BGI"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a BGI file",
                                                        "description": "This object exists to hold the filename pattern that a 'BGI' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.bgi(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.bgi.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "BGEN Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "BGEN"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a BGEN file",
                                                        "description": "This object exists to hold the filename pattern that a 'BGEN' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.bgen(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.bgen.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "GEN Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "GEN"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a GEN file",
                                                        "description": "This object exists to hold the filename pattern that a 'GEN' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.gen(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.gen.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "PXF Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "PXF"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a PXF file",
                                                        "description": "This object exists to hold the filename pattern that a 'PXF' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.(json|yaml)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.json.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "LOOM Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "LOOM"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a LOOM file",
                                                        "meta:propertyCurie": "format:3913",
                                                        "description": "This object exists to hold the filename pattern that a 'LOOM' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.loom(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.loom.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "BAX.H5 Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "BAX.H5"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a BAX.H5 file",
                                                        "description": "This object exists to hold the filename pattern that a 'BAX.H5' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.(bax\\.h5|h5)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.bax.h5.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "BAS.H5 Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "BAS.H5"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a BAS.H5 file",
                                                        "description": "This object exists to hold the filename pattern that a 'BAS.H5' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.(bas\\.h5|h5)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.bas.h5.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "ASM Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "ASM"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a ASM file",
                                                        "description": "This object exists to hold the filename pattern that a 'ASM' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.asm(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.asm.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "CSI Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "CSI"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a CSI file",
                                                        "description": "This object exists to hold the filename pattern that a 'CSI' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.csi(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.csi.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "TBI Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "TBI"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a TBI file",
                                                        "meta:propertyCurie": "format:3700",
                                                        "description": "This object exists to hold the filename pattern that a 'TBI' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.tbi(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.tbi.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "BCF Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "BCF"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a BCF file",
                                                        "meta:propertyCurie": "format:3020",
                                                        "description": "This object exists to hold the filename pattern that a 'BCF' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.bcf(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.bcf.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "qual454 Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "qual454"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a QUAL454 file",
                                                        "meta:propertyCurie": "format:3611",
                                                        "description": "This object exists to hold the filename pattern that a 'QUAL454' filetypeId \\nwould have, for it to be referenced elsewhere within this (or other) JSON \\nschema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.(qual454|qual)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.qual.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "qualsolid Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "qualsolid"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a QUALSOLID file",
                                                        "meta:propertyCurie": "format:3610",
                                                        "description": "This object exists to hold the filename pattern that a 'QUALSOLID' filetypeId \\nwould have, for it to be referenced elsewhere within this (or other) JSON \\nschema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.(qualsolid|qual)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.qualsolid.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "FASTQ-illumina Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "FASTQ-illumina"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a FASTQ-ILLUMINA file",
                                                        "meta:propertyCurie": "format:1931",
                                                        "description": "This object exists to hold the filename pattern that a 'FASTQ-ILLUMINA' \\nfiletypeId would have, for it to be referenced elsewhere within this (or other) \\nJSON schema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.(fastq|fq)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.fastq.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "FASTQ-helicos Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "FASTQ-helicos"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a FASTQ-HELICOS file",
                                                        "description": "This object exists to hold the filename pattern that a 'FASTQ-HELICOS' \\nfiletypeId would have, for it to be referenced elsewhere within this (or other) \\nJSON schema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.(fastq|fq)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.fastq.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "FASTQ-sanger Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "FASTQ-sanger"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a FASTQ-SANGER file",
                                                        "meta:propertyCurie": "format:1932",
                                                        "description": "This object exists to hold the filename pattern that a 'FASTQ-SANGER' filetypeId \\nwould have, for it to be referenced elsewhere within this (or other) JSON \\nschema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.(fastq|fq)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.fastq.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "FASTQ-solexa Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "FASTQ-solexa"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a FASTQ-SOLEXA file",
                                                        "meta:propertyCurie": "format:1933",
                                                        "description": "This object exists to hold the filename pattern that a 'FASTQ-SOLEXA' filetypeId \\nwould have, for it to be referenced elsewhere within this (or other) JSON \\nschema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.(fastq|fq)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.fastq.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "SAM Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "SAM"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a SAM file",
                                                        "meta:propertyCurie": "format:2573",
                                                        "description": "This object exists to hold the filename pattern that a 'SAM' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.sam(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.sam.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "CRAI Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "CRAI"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a CRAI file",
                                                        "description": "This object exists to hold the filename pattern that a 'CRAI' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.crai(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.crai.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "BAI Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "BAI"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a BAI file",
                                                        "meta:propertyCurie": "format:3327",
                                                        "description": "This object exists to hold the filename pattern that a 'BAI' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.bai(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.bai.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "MTX Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "MTX"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a MTX file",
                                                        "meta:propertyCurie": "format:3916",
                                                        "description": "This object exists to hold the filename pattern that a 'MTX' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.mtx(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.mtx.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "MEX Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "MEX"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a MEX file",
                                                        "description": "This object exists to hold the filename pattern that a 'MEX' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.mex(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.mex.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "GMX Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "GMX"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a GMX file",
                                                        "description": "This object exists to hold the filename pattern that a 'GMX' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.gmx(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.gmx.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "GMT Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "GMT"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a GMT file",
                                                        "description": "This object exists to hold the filename pattern that a 'GMT' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.gmt(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.gmt.gpg"
                                                        ]
                                                    }
                                                }
                                            },
                                            {
                                                "title": "GRP Filename patternCheck",
                                                "properties": {
                                                    "filetype": {
                                                        "enum": [
                                                            "GRP"
                                                        ]
                                                    },
                                                    "filename": {
                                                        "type": "string",
                                                        "title": "Filename pattern of a GRP file",
                                                        "description": "This object exists to hold the filename pattern that a 'GRP' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                        "pattern": "^[^<>:;,?\"*|/]+\\.grp(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                        "examples": [
                                                            "my_file1.grp.gpg"
                                                        ]
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                },
                "sequencingExperiment": {
                    "type": "object",
                    "title": "Specifications of a sequencing experiment",
                    "description": "Node containing the set of fields specific to an experiment of sequencing-type \\n(i.e. a sequencer was used to obtain the raw data).",
                    "additionalProperties": false,
                    "required": [
                        "libraryLayout"
                    ],
                    "properties": {
                        "libraryLayout": {
                            "type": "string",
                            "title": "Sequencing library layout",
                            "description": "Whether the sequenced reads are paired or single. In other words, if the \\nsequencing assay is paired- (OBI:0001850) or single-end (OBI:0002485). Term \\nchosen from a list of controlled vocabulary (CV). If you cannot find your term \\nin the CV list, please create an issue at our [metadata GitHub \\nrepository](https://github.com/EbiEga/ega-metadata-schema/issues/new/choose) \\nproposing its addition.",
                            "enum": [
                                "paired-end",
                                "single-end"
                            ],
                            "meta:enum": {
                                "paired-end": "[OBI:0001850]: A transcription profiling assay that determines transcripts, gene \\nstructures, and gene expressions using Paired-End Tags and sequencing \\ntechnology. Allows to sequence both ends of a fragment and generate \\nhigh-quality, alignable sequence data. Paired-end sequencing facilitates \\ndetection of genomic rearrangements and repetitive sequence elements, as well as \\ngene fusions and novel transcripts.",
                                "single-end": "[OBI:0002485]: A sequencing assay that incorporates single-end reads and \\nsequencing technology to determine transcripts, gene structures, and gene \\nexpressions. Single-read sequencing involves sequencing DNA from only one end."
                            }
                        },
                        "spotDescriptor": {
                            "type": "array",
                            "title": "Spot descriptor",
                            "description": "The 'spotDescriptor' specifies how to decode the individual reads of interest \\nfrom the monolithic spot sequence. The spot descriptor contains aspects of the \\nexperimental design, platform, and processing information. There will be two \\nmethods of specification: one will be an index into a table of typical \\ndecodings, the other being an exact specification. This construct is needed for \\nloading data and for interpreting the loaded sequencing assays. It can be \\nomitted if the loader can infer read layout (from multiple input files or from \\none input files).",
                            "minItems": 1,
                            "additionalProperties": false,
                            "uniqueItems": true,
                            "items": {
                                "type": "object",
                                "title": "Spot decode spec",
                                "description": "",
                                "additionalProperties": false,
                                "required": [
                                    "readSpecs"
                                ],
                                "properties": {
                                    "spotLength": {
                                        "type": "integer",
                                        "title": "Spot length",
                                        "description": "Number of base/color calls, cycles, or flows per spot (raw sequence length or \\nflow length including all application and technical tags and mate pairs, but not \\nincluding gap lengths). This value will be platform dependent, library \\ndependent, and possibly run dependent. Variable length platforms will still have \\na constant flow/cycle length.",
                                        "minInclusive": 0
                                    },
                                    "readSpecs": {
                                        "type": "array",
                                        "title": "Read specs",
                                        "description": "",
                                        "minItems": 1,
                                        "uniqueItems": true,
                                        "items": {
                                            "type": "object",
                                            "title": "Read spec",
                                            "description": "",
                                            "additionalProperties": false,
                                            "required": [
                                                ""
                                            ],
                                            "properties": {
                                                "readIndex": {
                                                    "type": "string",
                                                    "title": "Read index",
                                                    "description": "READ_INDEX starts at 0 and is incrementally increased for each sequential \\nREAD_SPEC within a SPOT_DECODE_SPEC.",
                                                    "minLength": 1
                                                },
                                                "readLabel": {
                                                    "type": "string",
                                                    "title": "Read label",
                                                    "description": "READ_LABEL is a name for this tag, and can be used to on output to determine \\nread name, for example F or R.",
                                                    "minLength": 1
                                                },
                                                "readClass": {
                                                    "type": "string",
                                                    "title": "Read class",
                                                    "description": "",
                                                    "enum": [
                                                        "Application Read",
                                                        "Technical Read"
                                                    ],
                                                    "meta:enum": {
                                                        "Application Read": "",
                                                        "Technical Read": ""
                                                    }
                                                },
                                                "readType": {
                                                    "type": "string",
                                                    "title": "Read type",
                                                    "description": "",
                                                    "enum": [
                                                        "Forward",
                                                        "Reverse",
                                                        "Adapter",
                                                        "Primer",
                                                        "Linker",
                                                        "BarCode",
                                                        "Other"
                                                    ],
                                                    "meta:enum": {
                                                        "Forward": "",
                                                        "Reverse": "",
                                                        "Adapter": "",
                                                        "Primer": "",
                                                        "Linker": "",
                                                        "BarCode": "",
                                                        "Other": ""
                                                    }
                                                },
                                                "relativeOrder": {
                                                    "type": "object",
                                                    "title": "Relative order",
                                                    "description": "The read is located beginning at the offset or cycle relative to another read. \\nThis choice is appropriate for example when specifying a read that follows a \\nvariable length expected sequence(s).",
                                                    "additionalProperties": false,
                                                    "required": [
                                                        ""
                                                    ],
                                                    "properties": {
                                                        "followsReadIndex": {
                                                            "type": "integer",
                                                            "title": "Follows read index",
                                                            "description": "Specify the read index that precedes this read.",
                                                            "minInclusive": 0
                                                        },
                                                        "precedesReadIndex": {
                                                            "type": "integer",
                                                            "title": "Precedes read index",
                                                            "description": "Specify the read index that follows this read.",
                                                            "minInclusive": 0
                                                        }
                                                    }
                                                },
                                                "baseCoord": {
                                                    "type": "integer",
                                                    "title": "Base coord",
                                                    "description": "The location of the read start in terms of base count (1 is beginning of spot)"
                                                },
                                                "expectedBasecallTable": {
                                                    "type": "object",
                                                    "title": "Expected basecall table",
                                                    "description": "A set of choices of expected basecalls for a current read. Read will be \\nzero-length if none is found.",
                                                    "additionalProperties": false,
                                                    "required": [
                                                        "basecalls"
                                                    ],
                                                    "properties": {
                                                        "defaultLength": {
                                                            "type": "integer",
                                                            "title": "Default length",
                                                            "description": "Specify whether the spot should have a default length for this tag if the \\nexpected base cannot be matched.",
                                                            "minInclusive": 0
                                                        },
                                                        "baseCoord": {
                                                            "type": "integer",
                                                            "title": "Base coord",
                                                            "description": "Specify an optional starting point for tag (base offset from 1).",
                                                            "minInclusive": 0
                                                        },
                                                        "basecalls": {
                                                            "type": "array",
                                                            "title": "Basecalls array",
                                                            "description": "Element's body contains a basecall, attribute provide description of this read \\nmeaning as well as matching rules.",
                                                            "minItems": 1,
                                                            "uniqueItems": true,
                                                            "items": {
                                                                "type": "object",
                                                                "title": "Basecall",
                                                                "description": "",
                                                                "additionalProperties": false,
                                                                "required": [
                                                                    ""
                                                                ],
                                                                "properties": {
                                                                    "readGroupTag": {
                                                                        "type": "string",
                                                                        "title": "Read group tag",
                                                                        "description": "When match occurs, the read will be tagged with this group membership.",
                                                                        "minLength": 1
                                                                    },
                                                                    "minMatch": {
                                                                        "type": "integer",
                                                                        "title": "Min match",
                                                                        "description": "Minimum number of matches to trigger identification.",
                                                                        "minInclusive": 0
                                                                    },
                                                                    "maxMismatch": {
                                                                        "type": "integer",
                                                                        "title": "Max mismatch",
                                                                        "description": "Maximum number of mismatches",
                                                                        "minInclusive": 0
                                                                    },
                                                                    "matchEdge": {
                                                                        "type": "string",
                                                                        "title": "Match edge",
                                                                        "description": "Where the match should occur. Changes the rules on how minMatch and maxMismatch \\nare counted.",
                                                                        "enum": [
                                                                            "full",
                                                                            "start",
                                                                            "end"
                                                                        ],
                                                                        "meta:enum": {
                                                                            "full": "Only @maxMismatch influences matching process",
                                                                            "start": "Both matches and mismatches are counted. When @maxMismatch is exceeded - it is \\nnot a match. When @minMatch is reached - match is declared.",
                                                                            "end": "Both matches and mismatches are counted. When @maxMismatch is exceeded - it is \\nnot a match. When @minMatch is reached - match is declared."
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "oneOf": [
                {
                    "title": "The sequencing experiment descriptors are required",
                    "required": [
                        "sequencingExperiment"
                    ]
                },
                {
                    "title": "The array experiment descriptors are required",
                    "required": [
                        "arrayExperiment"
                    ]
                }
            ]
        },
        "experimentRelationships": {
            "type": "array",
            "title": "Experiment relationships",
            "description": "Comprises metadata (e.g. Source or Target) of a directional association between \\ntwo entities. This relationships node contains all the possible relationships \\nbetween metadata objects, both outside of (e.g. an Array Design Format that was \\nsubmitted to ArrayExpress being linked to their microarray data within EGA) and \\nwithin (e.g. an experiment being linked to a Sample) the EGA.",
            "minItems": 1,
            "additionalProperties": false,
            "uniqueItems": true,
            "items": {
                "allOf": [
                    {
                        "type": "object",
                        "title": "EGA Relationships object",
                        "description": "Object containing the base metadata attributes of a relationship object in the \\nEGA. Comprises metadata (e.g. Source or Target) of a directional association \\nbetween two entities. One of the entitis **needs** to be the current instance. \\nFor instance, a study JSON document should not contain relationships between a \\nsample and an individual. Therefore, only one end of the relationship is given: \\nif the source is present, the target is inferred to be the current instance; if \\nthe target is given, then it's the source the one inferred as the current \\ninstance. Examples of common relationships: (1) a sample being referenced in an \\nexperiment; (2) an study being the same as another study at a different archive \\n(e.g. in BioStudies); (3) an individual being the parent of another individual; \\n(4) hundreds of samples being grouped with each other for broad reasons.",
                        "required": [
                            "rType"
                        ],
                        "additionalProperties": false,
                        "properties": {
                            "rType": {
                                "type": "string",
                                "title": "Relationship type",
                                "description": "ID (e.g. sameAs) of the type of the relationship. To be chosen from a controlled \\nvocabulary (CV) list. If you cannot find your term in the CV list, please create \\nan issue at our [metadata GitHub \\nrepository](https://github.com/EbiEga/ega-metadata-schema) proposing its \\naddition.",
                                "enum": [
                                    "referencedBy",
                                    "developsFrom",
                                    "sameAs",
                                    "memberOf",
                                    "groupedWith",
                                    "familyRelationshipWith",
                                    "childOf",
                                    "isAfter",
                                    "publishedIn",
                                    "submittedBy",
                                    "contactOf",
                                    "mainContactOf"
                                ],
                                "meta:enum": {
                                    "referencedBy": "[SIO:000252]",
                                    "developsFrom": "[RO:0002202]",
                                    "sameAs": "[NCIT:C64637]",
                                    "memberOf": "[RO:0002350]",
                                    "groupedWith": "",
                                    "familyRelationshipWith": "[EFO:0004424]",
                                    "childOf": "[GSSO:000728]",
                                    "isAfter": "[SIO:000211]",
                                    "publishedIn": "[EFO:0001796]",
                                    "submittedBy": "[NCIT:C25695]",
                                    "contactOf": "[NCIT:C25461]",
                                    "mainContactOf": ""
                                },
                                "examples": [
                                    "referencedBy"
                                ]
                            },
                            "rSource": {
                                "type": "object",
                                "title": "Source of the relationship",
                                "description": "Object reference of the relationship's source. In other words, the starting \\npoint of the relationship: in 'sample_A developsFrom sample_B' the source is \\n'sample_A'.",
                                "allOf": [
                                    {
                                        "type": "object",
                                        "title": "Relationship's object (either source or target)",
                                        "description": "Node containing metadata (identifiers and the type of reference) of one of the \\nends of the relationship, whether it is the source or the target of the \\nrelationship.",
                                        "additionalProperties": false,
                                        "required": [
                                            "objectId",
                                            "objectType"
                                        ],
                                        "properties": {
                                            "objectId": {
                                                "type": "object",
                                                "title": "Relationship's object's IDs block",
                                                "description": "Node containing the main identifiers of the relationship's object (e.g. alias, \\ncenterName...), inherited from the common definitions \\n(#/definitions/objectCoreId).",
                                                "allOf": [
                                                    {
                                                        "type": "object",
                                                        "title": "Core identifiers of an object",
                                                        "description": "Base definition containing the properties (e.g. Sample's alias) of a minimal \\nidentification layer of an EGA object (e.g. Sample).",
                                                        "additionalProperties": false,
                                                        "properties": {
                                                            "alias": {
                                                                "type": "string",
                                                                "title": "Alias of an object",
                                                                "description": "Submitter designated name (e.g. 'my_sample_J13') for the object (e.g. Sample). \\nThe name must be unique within the submission account (e.g. 'ega-box-79'), since \\nthe aliases and submission accounts are concatenated within our database to \\nobtain the unique alias (e.g. 'ega-box-79::my_sample_J13').",
                                                                "minLength": 1,
                                                                "examples": [
                                                                    "my_sample_J13"
                                                                ]
                                                            },
                                                            "centerName": {
                                                                "type": "string",
                                                                "title": "Center name of the submitter",
                                                                "description": "Center name (e.g. 'EBI-TEST') associated to the submitter. In other words, it is \\nthe acronym of the submitter's account (provided by the HelpDesk team).",
                                                                "minLength": 1,
                                                                "examples": [
                                                                    "EBI-TEST"
                                                                ]
                                                            },
                                                            "egaAccession": {
                                                                "type": "string",
                                                                "title": "EGA's accession of the object",
                                                                "description": "The object accession (i.e. unique identifier) assigned by the archive (EGA). \\nObject accessions can be found in the 'Identifiers' section of the EGA-archive \\nwebsite (https://ega-archive.org/metadata/how-to-use-the-api) and commonly start \\nwith EGA, followed by the distinctive letter of the object and finally the \\nnumeric ID of the instance.",
                                                                "examples": [
                                                                    "EGAN00003245489"
                                                                ]
                                                            },
                                                            "externalAccessions": {
                                                                "type": "array",
                                                                "title": "External accessions array",
                                                                "description": "External accession node to reference objects in other archives (e.g. an already \\nexisting sample at BioSamples).",
                                                                "minItems": 1,
                                                                "additionalProperties": false,
                                                                "uniqueItems": true,
                                                                "items": {
                                                                    "type": "object",
                                                                    "title": "Object External accession",
                                                                    "description": "External accession property defining a reference to an external record in \\nanother resource. For example, a reference to a sequence deposited in NCBI's \\nNucleotide database (e.g. 'https://identifiers.org/nucleotide:T35715.1'); or a \\nsample record in BioSamples (e.g. \\n'https://identifiers.org/biosample:SAMEA7616999').",
                                                                    "additionalProperties": false,
                                                                    "properties": {
                                                                        "objectExternalAccessionIdentifier": {
                                                                            "type": "object",
                                                                            "title": "Identifier of the external accession",
                                                                            "description": "Unique identifier of an external record. Its 'termId' (e.g. \\n'biosample:SAMEA7616999', 'pubmed:30962759', 'biostudies:S-EPMC3314381', etc.) \\nshall follow CURIE format of ``prefix``:``accession``, where: (1) the prefix \\n(e.g. 'biosample') is unique and assigned to the external resource at \\nidentifiers.org; (2) and the unique accession of the object (e.g. SAMEA7616999) \\nshould resolve to an existing record within the resource. If in doubt, use \\nidentifiers.org to resolve your external accession: 'https://identifiers.org/' + \\n'termId', e.g. 'https://identifiers.org/biosample:SAMEA7616999'",
                                                                            "allOf": [
                                                                                {
                                                                                    "type": "object",
                                                                                    "title": "Ontology term",
                                                                                    "description": "This property represents an ontology term (a.k.a. class). It consists on two \\nproperties: the term identifier (termId) and its label (termLabel). This \\nproperty and its structure is inherited across many other elements in the \\nschemas. It is there, when inherited, where the real ontology constraint is put \\nin place (e.g. using 'graphRestriction' keywords). Based on phenopacket's [OntologyClass](https://phenopacket-schema.readthedocs.io/en/latest/ontologyclass.html)",
                                                                                    "additionalProperties": false,
                                                                                    "required": [
                                                                                        "termId",
                                                                                        "termLabel"
                                                                                    ],
                                                                                    "properties": {
                                                                                        "termId": {
                                                                                            "type": "string",
                                                                                            "title": "ID of the term",
                                                                                            "description": "The identifier of an ontology term must be in CURIE format (check property \\n'curieGeneralPattern'). Whether a specific term is valid or not according to an \\nontology hierarchy is checked at each specific termId using ontology validation \\nkeywords (e.g. 'graphRestriction').",
                                                                                            "minLength": 1,
                                                                                            "allOf": [
                                                                                                {
                                                                                                    "type": "string",
                                                                                                    "title": "Compact URI (CURIE) pattern",
                                                                                                    "description": "A [W3C Compact URI](https://www.w3.org/TR/curie/) formatted string. A CURIE \\nstring has the structure ``prefix``:``reference``, as defined by the W3C syntax. \\nEven though we do not restrict prefixes, we recommend that the term used as \\n``prefix`` is uniformely resolved. In other words, it is better to use prefixes \\n(e.g. 'ensembl') from identifiers.org.",
                                                                                                    "minLength": 1,
                                                                                                    "pattern": "^\\w[^:]*:.+$",
                                                                                                    "examples": [
                                                                                                        "ensembl:ENSG00000139618",
                                                                                                        "HGNC:11535",
                                                                                                        "data:1026",
                                                                                                        "EFO:0003815"
                                                                                                    ]
                                                                                                }
                                                                                            ],
                                                                                            "examples": [
                                                                                                "MONDO:0100096",
                                                                                                "EFO:0003101",
                                                                                                "EFO:0005518",
                                                                                                "EFO:0002944",
                                                                                                "EFO:0003813"
                                                                                            ]
                                                                                        },
                                                                                        "termLabel": {
                                                                                            "type": "string",
                                                                                            "title": "Label of the term",
                                                                                            "description": "The label of a term is the human-readable string associated with the identifier. \\nIt is not required that it matches the label of the termId within the referenced \\nontology, although it should. This is due to the fact that the source of truth \\nwill always be the termId, and not the label, which adds more context.",
                                                                                            "minLength": 1,
                                                                                            "examples": [
                                                                                                "COVID-19",
                                                                                                "Axila skin",
                                                                                                "bone marrow cell",
                                                                                                "astrocyte",
                                                                                                "oligodendrocyte",
                                                                                                "Unknown",
                                                                                                "Unaffected",
                                                                                                "homo sapiens"
                                                                                            ]
                                                                                        }
                                                                                    }
                                                                                }
                                                                            ]
                                                                        },
                                                                        "objectExternalAccessionURI": {
                                                                            "type": "string",
                                                                            "title": "URI of the external accession",
                                                                            "description": "Full or partial URL/URI of the external accession, for systems to resolve it. \\nShould only be used in case identifiers.org does not contain a namespace for the \\nrequired resource or the mapping to the URI from its identifier is faulty.",
                                                                            "allOf": [
                                                                                {
                                                                                    "type": "string",
                                                                                    "title": "URL/URI pattern",
                                                                                    "description": "This object exists to hold the pattern that a URL or URI should have. For it to \\nbe referenced elsewhere within this (or other) JSON schema.",
                                                                                    "pattern": "^((http|https)://)(www.)?[a-zA-Z0-9@:%._\\+~#?&//=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%._\\+~#?&//=]*)$",
                                                                                    "examples": [
                                                                                        "https://phenopacket-schema.readthedocs.io/en/latest/externalreference.html",
                                                                                        "https://www.ebi.ac.uk/arrayexpress/experiments/E-MEXP-1712/",
                                                                                        "https://www.geeksforgeeks.org/check-if-an-url-is-valid-or-not-using-regular-expression/"
                                                                                    ]
                                                                                }
                                                                            ],
                                                                            "examples": [
                                                                                "https://www.ebi.ac.uk/biosamples/samples/SAMN11716999",
                                                                                "https://pubmed.ncbi.nlm.nih.gov/19491253",
                                                                                "https://www.ebi.ac.uk/arrayexpress/experiments/E-MEXP-1712/"
                                                                            ]
                                                                        },
                                                                        "objectExternalAccessionDescription": {
                                                                            "type": [
                                                                                "string",
                                                                                "number"
                                                                            ],
                                                                            "title": "Description of the external accession",
                                                                            "description": "Optional description of the external accession, used to add context to the \\nidentifier if applicable.",
                                                                            "examples": [
                                                                                "taken from biosample temporarily",
                                                                                "Ensembl's part of the accessions",
                                                                                "first",
                                                                                2,
                                                                                "Recurrent Erythema Nodosum in a Child with a SHOC2 Gene Mutation"
                                                                            ]
                                                                        }
                                                                    },
                                                                    "anyOf": [
                                                                        {
                                                                            "title": "Either the identifier is needed",
                                                                            "required": [
                                                                                "objectExternalAccessionIdentifier"
                                                                            ]
                                                                        },
                                                                        {
                                                                            "title": "Or the reference is needed",
                                                                            "required": [
                                                                                "objectExternalAccessionURI"
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            }
                                                        },
                                                        "anyOf": [
                                                            {
                                                                "title": "Check core IDs: combination of Alias and Center name",
                                                                "required": [
                                                                    "alias",
                                                                    "centerName"
                                                                ]
                                                            },
                                                            {
                                                                "title": "Check core IDs: EGA accession ID",
                                                                "required": [
                                                                    "egaAccession"
                                                                ]
                                                            },
                                                            {
                                                                "title": "Check core IDs: external accessions",
                                                                "required": [
                                                                    "externalAccessions"
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ]
                                            },
                                            "objectType": {
                                                "type": "string",
                                                "title": "Type of the relationship's object",
                                                "description": "Type of the relationship's object, chosen from a list of CV (e.g. experiment, \\ndataset, externalURL...). Both the source or target types can be: (1) the object \\ntag of one of EGA's object (e.g. file, sample...); (2) an 'externalAccession'; \\n(3) or an 'externalURL'. Term chosen from a list of controlled vocabulary (CV). \\nIf you cannot find your term in the CV list, please create an issue at our \\n[metadata GitHub repository](https://github.com/EbiEga/ega-metadata-schema) \\nproposing its addition.",
                                                "enum": [
                                                    "experiment",
                                                    "study",
                                                    "sample",
                                                    "individual",
                                                    "submission",
                                                    "assay",
                                                    "dataset",
                                                    "analysis",
                                                    "policy",
                                                    "DAC",
                                                    "protocol",
                                                    "externalAccession",
                                                    "externalURL"
                                                ],
                                                "meta:enum": {
                                                    "experiment": "Contains information about the experimental design of the sequencing",
                                                    "study": "Information about the study",
                                                    "sample": "Information about the used samples",
                                                    "individual": "Information about the participants (i.e. humans) of the study",
                                                    "submission": "Information about the submission actions",
                                                    "assay": "Contains information about the specific assays (either sequencing or array \\nassays) from the experiment",
                                                    "dataset": "Contains the collection of assay/analysis data files to be subject to controlled \\naccess",
                                                    "analysis": "Contains the analysis metadata and data files",
                                                    "policy": "Contains information related to the Data Access Agreement (DAA) the dataset is \\nsubject to",
                                                    "DAC": "Contains information about the Data Access Committee (DAC)",
                                                    "protocol": "Contains information about a planned process.",
                                                    "externalAccession": "An external accession among the ones Entrez (NCBI's text search) contemplates \\n(search for the terms here: \\nhttps://www.ncbi.nlm.nih.gov/entrez/eutils/einfo.fcgi?)",
                                                    "externalURL": "An external URL resource, of any type"
                                                },
                                                "examples": [
                                                    "sample"
                                                ]
                                            }
                                        },
                                        "allOf": [
                                            {
                                                "type": "object",
                                                "title": "Check that the objectId's accession pattern and objectType match",
                                                "description": "This object exists with the only purpose of being a reference as a pattern check \\nof a given objectId and objectType. The constraint consists in asserting that, \\nif the object identifier is an EGA accession, its pattern matches the object \\ntype (e.g. if objectType is 'sample', its EGA accession needs to match \\n'^EGAN[0-9]{11}$')",
                                                "anyOf": [
                                                    {
                                                        "title": "Alias and Centername: objectId and objectType check",
                                                        "description": "A check that ensures that the alias and centername are given as the objectType. \\nSince the alias and centername cannot be checked for specific objectTypes (i.e. \\neach can name their objects in different ways), this block exists here just so \\nthat this option is allowed.",
                                                        "properties": {
                                                            "objectId": {
                                                                "required": [
                                                                    "alias",
                                                                    "centerName"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "External accession: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'externalAccession' is given as the objectType, \\nthe corresponding node exists within objectId",
                                                        "properties": {
                                                            "objectId": {
                                                                "required": [
                                                                    "externalAccessions"
                                                                ]
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "externalAccession"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Experiment: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'experiment' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA experiment's ID (EGAX...)",
                                                                        "pattern": "^EGAX[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAX00002189113"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "experiment"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Study: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'study' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA study's ID (EGAS...)",
                                                                        "pattern": "^EGAS[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAS00001004508"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "study"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Sample: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'sample' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA sample's ID (EGAN...)",
                                                                        "pattern": "^EGAN[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAN00003245489"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "sample"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Submission: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'submission' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA submission's ID (EGAB...)",
                                                                        "pattern": "^EGAB[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAB00001001831"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "submission"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Assay: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'assay' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA assay's ID (EGAR...)",
                                                                        "pattern": "^EGAR[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAR00001314547"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "assay"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Dataset: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'dataset' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA dataset's ID (EGAD...)",
                                                                        "pattern": "^EGAD[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAD00001004170"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "dataset"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Analysis: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'analysis' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA analysis's ID (EGAZ...)",
                                                                        "pattern": "^EGAZ[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAZ00001004170"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "analysis"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Policy: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'policy' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA policy's ID (EGAP...)",
                                                                        "pattern": "^EGAP[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAP00001001831"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "policy"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "DAC: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'DAC' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA DAC's ID (EGAC...)",
                                                                        "pattern": "^EGAC[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAC00001000908"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "DAC"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Individual: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'individual' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA Individual's ID (EGAI...)",
                                                                        "pattern": "^EGAI[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAI00001159712"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "individual"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Protocol: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'protocol' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA protocol's ID (EGAO...)",
                                                                        "pattern": "^EGAO[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAO00001159483"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "protocol"
                                                                ]
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            "rTarget": {
                                "type": "object",
                                "title": "Target of the relationship",
                                "description": "Object reference of the relationship's target. In other words, the ending point \\nof the relationship: in 'sample_A developsFrom sample_B' the target is \\n'sample_B'.",
                                "allOf": [
                                    {
                                        "type": "object",
                                        "title": "Relationship's object (either source or target)",
                                        "description": "Node containing metadata (identifiers and the type of reference) of one of the \\nends of the relationship, whether it is the source or the target of the \\nrelationship.",
                                        "additionalProperties": false,
                                        "required": [
                                            "objectId",
                                            "objectType"
                                        ],
                                        "properties": {
                                            "objectId": {
                                                "type": "object",
                                                "title": "Relationship's object's IDs block",
                                                "description": "Node containing the main identifiers of the relationship's object (e.g. alias, \\ncenterName...), inherited from the common definitions \\n(#/definitions/objectCoreId).",
                                                "allOf": [
                                                    {
                                                        "type": "object",
                                                        "title": "Core identifiers of an object",
                                                        "description": "Base definition containing the properties (e.g. Sample's alias) of a minimal \\nidentification layer of an EGA object (e.g. Sample).",
                                                        "additionalProperties": false,
                                                        "properties": {
                                                            "alias": {
                                                                "type": "string",
                                                                "title": "Alias of an object",
                                                                "description": "Submitter designated name (e.g. 'my_sample_J13') for the object (e.g. Sample). \\nThe name must be unique within the submission account (e.g. 'ega-box-79'), since \\nthe aliases and submission accounts are concatenated within our database to \\nobtain the unique alias (e.g. 'ega-box-79::my_sample_J13').",
                                                                "minLength": 1,
                                                                "examples": [
                                                                    "my_sample_J13"
                                                                ]
                                                            },
                                                            "centerName": {
                                                                "type": "string",
                                                                "title": "Center name of the submitter",
                                                                "description": "Center name (e.g. 'EBI-TEST') associated to the submitter. In other words, it is \\nthe acronym of the submitter's account (provided by the HelpDesk team).",
                                                                "minLength": 1,
                                                                "examples": [
                                                                    "EBI-TEST"
                                                                ]
                                                            },
                                                            "egaAccession": {
                                                                "type": "string",
                                                                "title": "EGA's accession of the object",
                                                                "description": "The object accession (i.e. unique identifier) assigned by the archive (EGA). \\nObject accessions can be found in the 'Identifiers' section of the EGA-archive \\nwebsite (https://ega-archive.org/metadata/how-to-use-the-api) and commonly start \\nwith EGA, followed by the distinctive letter of the object and finally the \\nnumeric ID of the instance.",
                                                                "examples": [
                                                                    "EGAN00003245489"
                                                                ]
                                                            },
                                                            "externalAccessions": {
                                                                "type": "array",
                                                                "title": "External accessions array",
                                                                "description": "External accession node to reference objects in other archives (e.g. an already \\nexisting sample at BioSamples).",
                                                                "minItems": 1,
                                                                "additionalProperties": false,
                                                                "uniqueItems": true,
                                                                "items": {
                                                                    "type": "object",
                                                                    "title": "Object External accession",
                                                                    "description": "External accession property defining a reference to an external record in \\nanother resource. For example, a reference to a sequence deposited in NCBI's \\nNucleotide database (e.g. 'https://identifiers.org/nucleotide:T35715.1'); or a \\nsample record in BioSamples (e.g. \\n'https://identifiers.org/biosample:SAMEA7616999').",
                                                                    "additionalProperties": false,
                                                                    "properties": {
                                                                        "objectExternalAccessionIdentifier": {
                                                                            "type": "object",
                                                                            "title": "Identifier of the external accession",
                                                                            "description": "Unique identifier of an external record. Its 'termId' (e.g. \\n'biosample:SAMEA7616999', 'pubmed:30962759', 'biostudies:S-EPMC3314381', etc.) \\nshall follow CURIE format of ``prefix``:``accession``, where: (1) the prefix \\n(e.g. 'biosample') is unique and assigned to the external resource at \\nidentifiers.org; (2) and the unique accession of the object (e.g. SAMEA7616999) \\nshould resolve to an existing record within the resource. If in doubt, use \\nidentifiers.org to resolve your external accession: 'https://identifiers.org/' + \\n'termId', e.g. 'https://identifiers.org/biosample:SAMEA7616999'",
                                                                            "allOf": [
                                                                                {
                                                                                    "type": "object",
                                                                                    "title": "Ontology term",
                                                                                    "description": "This property represents an ontology term (a.k.a. class). It consists on two \\nproperties: the term identifier (termId) and its label (termLabel). This \\nproperty and its structure is inherited across many other elements in the \\nschemas. It is there, when inherited, where the real ontology constraint is put \\nin place (e.g. using 'graphRestriction' keywords). Based on phenopacket's [OntologyClass](https://phenopacket-schema.readthedocs.io/en/latest/ontologyclass.html)",
                                                                                    "additionalProperties": false,
                                                                                    "required": [
                                                                                        "termId",
                                                                                        "termLabel"
                                                                                    ],
                                                                                    "properties": {
                                                                                        "termId": {
                                                                                            "type": "string",
                                                                                            "title": "ID of the term",
                                                                                            "description": "The identifier of an ontology term must be in CURIE format (check property \\n'curieGeneralPattern'). Whether a specific term is valid or not according to an \\nontology hierarchy is checked at each specific termId using ontology validation \\nkeywords (e.g. 'graphRestriction').",
                                                                                            "minLength": 1,
                                                                                            "allOf": [
                                                                                                {
                                                                                                    "type": "string",
                                                                                                    "title": "Compact URI (CURIE) pattern",
                                                                                                    "description": "A [W3C Compact URI](https://www.w3.org/TR/curie/) formatted string. A CURIE \\nstring has the structure ``prefix``:``reference``, as defined by the W3C syntax. \\nEven though we do not restrict prefixes, we recommend that the term used as \\n``prefix`` is uniformely resolved. In other words, it is better to use prefixes \\n(e.g. 'ensembl') from identifiers.org.",
                                                                                                    "minLength": 1,
                                                                                                    "pattern": "^\\w[^:]*:.+$",
                                                                                                    "examples": [
                                                                                                        "ensembl:ENSG00000139618",
                                                                                                        "HGNC:11535",
                                                                                                        "data:1026",
                                                                                                        "EFO:0003815"
                                                                                                    ]
                                                                                                }
                                                                                            ],
                                                                                            "examples": [
                                                                                                "MONDO:0100096",
                                                                                                "EFO:0003101",
                                                                                                "EFO:0005518",
                                                                                                "EFO:0002944",
                                                                                                "EFO:0003813"
                                                                                            ]
                                                                                        },
                                                                                        "termLabel": {
                                                                                            "type": "string",
                                                                                            "title": "Label of the term",
                                                                                            "description": "The label of a term is the human-readable string associated with the identifier. \\nIt is not required that it matches the label of the termId within the referenced \\nontology, although it should. This is due to the fact that the source of truth \\nwill always be the termId, and not the label, which adds more context.",
                                                                                            "minLength": 1,
                                                                                            "examples": [
                                                                                                "COVID-19",
                                                                                                "Axila skin",
                                                                                                "bone marrow cell",
                                                                                                "astrocyte",
                                                                                                "oligodendrocyte",
                                                                                                "Unknown",
                                                                                                "Unaffected",
                                                                                                "homo sapiens"
                                                                                            ]
                                                                                        }
                                                                                    }
                                                                                }
                                                                            ]
                                                                        },
                                                                        "objectExternalAccessionURI": {
                                                                            "type": "string",
                                                                            "title": "URI of the external accession",
                                                                            "description": "Full or partial URL/URI of the external accession, for systems to resolve it. \\nShould only be used in case identifiers.org does not contain a namespace for the \\nrequired resource or the mapping to the URI from its identifier is faulty.",
                                                                            "allOf": [
                                                                                {
                                                                                    "type": "string",
                                                                                    "title": "URL/URI pattern",
                                                                                    "description": "This object exists to hold the pattern that a URL or URI should have. For it to \\nbe referenced elsewhere within this (or other) JSON schema.",
                                                                                    "pattern": "^((http|https)://)(www.)?[a-zA-Z0-9@:%._\\+~#?&//=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%._\\+~#?&//=]*)$",
                                                                                    "examples": [
                                                                                        "https://phenopacket-schema.readthedocs.io/en/latest/externalreference.html",
                                                                                        "https://www.ebi.ac.uk/arrayexpress/experiments/E-MEXP-1712/",
                                                                                        "https://www.geeksforgeeks.org/check-if-an-url-is-valid-or-not-using-regular-expression/"
                                                                                    ]
                                                                                }
                                                                            ],
                                                                            "examples": [
                                                                                "https://www.ebi.ac.uk/biosamples/samples/SAMN11716999",
                                                                                "https://pubmed.ncbi.nlm.nih.gov/19491253",
                                                                                "https://www.ebi.ac.uk/arrayexpress/experiments/E-MEXP-1712/"
                                                                            ]
                                                                        },
                                                                        "objectExternalAccessionDescription": {
                                                                            "type": [
                                                                                "string",
                                                                                "number"
                                                                            ],
                                                                            "title": "Description of the external accession",
                                                                            "description": "Optional description of the external accession, used to add context to the \\nidentifier if applicable.",
                                                                            "examples": [
                                                                                "taken from biosample temporarily",
                                                                                "Ensembl's part of the accessions",
                                                                                "first",
                                                                                2,
                                                                                "Recurrent Erythema Nodosum in a Child with a SHOC2 Gene Mutation"
                                                                            ]
                                                                        }
                                                                    },
                                                                    "anyOf": [
                                                                        {
                                                                            "title": "Either the identifier is needed",
                                                                            "required": [
                                                                                "objectExternalAccessionIdentifier"
                                                                            ]
                                                                        },
                                                                        {
                                                                            "title": "Or the reference is needed",
                                                                            "required": [
                                                                                "objectExternalAccessionURI"
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            }
                                                        },
                                                        "anyOf": [
                                                            {
                                                                "title": "Check core IDs: combination of Alias and Center name",
                                                                "required": [
                                                                    "alias",
                                                                    "centerName"
                                                                ]
                                                            },
                                                            {
                                                                "title": "Check core IDs: EGA accession ID",
                                                                "required": [
                                                                    "egaAccession"
                                                                ]
                                                            },
                                                            {
                                                                "title": "Check core IDs: external accessions",
                                                                "required": [
                                                                    "externalAccessions"
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ]
                                            },
                                            "objectType": {
                                                "type": "string",
                                                "title": "Type of the relationship's object",
                                                "description": "Type of the relationship's object, chosen from a list of CV (e.g. experiment, \\ndataset, externalURL...). Both the source or target types can be: (1) the object \\ntag of one of EGA's object (e.g. file, sample...); (2) an 'externalAccession'; \\n(3) or an 'externalURL'. Term chosen from a list of controlled vocabulary (CV). \\nIf you cannot find your term in the CV list, please create an issue at our \\n[metadata GitHub repository](https://github.com/EbiEga/ega-metadata-schema) \\nproposing its addition.",
                                                "enum": [
                                                    "experiment",
                                                    "study",
                                                    "sample",
                                                    "individual",
                                                    "submission",
                                                    "assay",
                                                    "dataset",
                                                    "analysis",
                                                    "policy",
                                                    "DAC",
                                                    "protocol",
                                                    "externalAccession",
                                                    "externalURL"
                                                ],
                                                "meta:enum": {
                                                    "experiment": "Contains information about the experimental design of the sequencing",
                                                    "study": "Information about the study",
                                                    "sample": "Information about the used samples",
                                                    "individual": "Information about the participants (i.e. humans) of the study",
                                                    "submission": "Information about the submission actions",
                                                    "assay": "Contains information about the specific assays (either sequencing or array \\nassays) from the experiment",
                                                    "dataset": "Contains the collection of assay/analysis data files to be subject to controlled \\naccess",
                                                    "analysis": "Contains the analysis metadata and data files",
                                                    "policy": "Contains information related to the Data Access Agreement (DAA) the dataset is \\nsubject to",
                                                    "DAC": "Contains information about the Data Access Committee (DAC)",
                                                    "protocol": "Contains information about a planned process.",
                                                    "externalAccession": "An external accession among the ones Entrez (NCBI's text search) contemplates \\n(search for the terms here: \\nhttps://www.ncbi.nlm.nih.gov/entrez/eutils/einfo.fcgi?)",
                                                    "externalURL": "An external URL resource, of any type"
                                                },
                                                "examples": [
                                                    "sample"
                                                ]
                                            }
                                        },
                                        "allOf": [
                                            {
                                                "type": "object",
                                                "title": "Check that the objectId's accession pattern and objectType match",
                                                "description": "This object exists with the only purpose of being a reference as a pattern check \\nof a given objectId and objectType. The constraint consists in asserting that, \\nif the object identifier is an EGA accession, its pattern matches the object \\ntype (e.g. if objectType is 'sample', its EGA accession needs to match \\n'^EGAN[0-9]{11}$')",
                                                "anyOf": [
                                                    {
                                                        "title": "Alias and Centername: objectId and objectType check",
                                                        "description": "A check that ensures that the alias and centername are given as the objectType. \\nSince the alias and centername cannot be checked for specific objectTypes (i.e. \\neach can name their objects in different ways), this block exists here just so \\nthat this option is allowed.",
                                                        "properties": {
                                                            "objectId": {
                                                                "required": [
                                                                    "alias",
                                                                    "centerName"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "External accession: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'externalAccession' is given as the objectType, \\nthe corresponding node exists within objectId",
                                                        "properties": {
                                                            "objectId": {
                                                                "required": [
                                                                    "externalAccessions"
                                                                ]
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "externalAccession"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Experiment: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'experiment' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA experiment's ID (EGAX...)",
                                                                        "pattern": "^EGAX[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAX00002189113"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "experiment"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Study: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'study' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA study's ID (EGAS...)",
                                                                        "pattern": "^EGAS[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAS00001004508"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "study"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Sample: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'sample' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA sample's ID (EGAN...)",
                                                                        "pattern": "^EGAN[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAN00003245489"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "sample"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Submission: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'submission' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA submission's ID (EGAB...)",
                                                                        "pattern": "^EGAB[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAB00001001831"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "submission"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Assay: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'assay' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA assay's ID (EGAR...)",
                                                                        "pattern": "^EGAR[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAR00001314547"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "assay"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Dataset: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'dataset' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA dataset's ID (EGAD...)",
                                                                        "pattern": "^EGAD[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAD00001004170"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "dataset"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Analysis: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'analysis' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA analysis's ID (EGAZ...)",
                                                                        "pattern": "^EGAZ[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAZ00001004170"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "analysis"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Policy: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'policy' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA policy's ID (EGAP...)",
                                                                        "pattern": "^EGAP[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAP00001001831"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "policy"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "DAC: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'DAC' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA DAC's ID (EGAC...)",
                                                                        "pattern": "^EGAC[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAC00001000908"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "DAC"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Individual: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'individual' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA Individual's ID (EGAI...)",
                                                                        "pattern": "^EGAI[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAI00001159712"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "individual"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Protocol: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'protocol' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA protocol's ID (EGAO...)",
                                                                        "pattern": "^EGAO[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAO00001159483"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "protocol"
                                                                ]
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            "rLabel": {
                                "type": "string",
                                "title": "Custom label of the relationship",
                                "description": "Custom free-form label of the relationship, used to add extra details of the \\nrelationship if needed.",
                                "minLength": 1,
                                "examples": [
                                    "Source individual is the third child of the target individual",
                                    "Grouped samples by colour of the medium",
                                    "Both samples are the same because of an error in the submission at..."
                                ]
                            }
                        },
                        "oneOf": [
                            {
                                "title": "The source is given (i.e. the target is inferred as the current instance)",
                                "required": [
                                    "rSource"
                                ]
                            },
                            {
                                "title": "The target is given (i.e. the source is inferred as the current instance)",
                                "required": [
                                    "rTarget"
                                ]
                            }
                        ]
                    },
                    {
                        "title": "Relationship constraints for an experiment",
                        "description": "Not all possible relationships between objects are allowed (e.g. an individual \\nshould not be linked to a policy). This node contains the restricted \\nrelationships that can be given for an experiment.",
                        "anyOf": [
                            {
                                "title": "Allowed relationships of type referencedBy (main ones)",
                                "allOf": [
                                    {
                                        "type": "object",
                                        "title": "Relationship type: referencedBy",
                                        "description": "Node to be used as a relationship type for relationship contraints.",
                                        "required": [
                                            "rType"
                                        ],
                                        "properties": {
                                            "rType": {
                                                "const": "referencedBy"
                                            }
                                        }
                                    },
                                    {
                                        "anyOf": [
                                            {
                                                "type": "object",
                                                "title": "Relationship source: study",
                                                "description": "Node to be used as an object type for relationship contraints.",
                                                "required": [
                                                    "rSource"
                                                ],
                                                "properties": {
                                                    "rSource": {
                                                        "properties": {
                                                            "objectType": {
                                                                "const": "study"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship target: assay",
                                                "description": "Node to be used as an object type for relationship contraints.",
                                                "required": [
                                                    "rTarget"
                                                ],
                                                "properties": {
                                                    "rTarget": {
                                                        "properties": {
                                                            "objectType": {
                                                                "const": "assay"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship target: analysis",
                                                "description": "Node to be used as an object type for relationship contraints.",
                                                "required": [
                                                    "rTarget"
                                                ],
                                                "properties": {
                                                    "rTarget": {
                                                        "properties": {
                                                            "objectType": {
                                                                "const": "analysis"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship source: submission",
                                                "description": "Node to be used as an object type for relationship contraints.",
                                                "required": [
                                                    "rSource"
                                                ],
                                                "properties": {
                                                    "rSource": {
                                                        "properties": {
                                                            "objectType": {
                                                                "const": "submission"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship source: protocol",
                                                "description": "Node to be used as an object type for relationship contraints.",
                                                "required": [
                                                    "rSource"
                                                ],
                                                "properties": {
                                                    "rSource": {
                                                        "properties": {
                                                            "objectType": {
                                                                "const": "protocol"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship target: experiment",
                                                "description": "Node to be used as an object type for relationship contraints.",
                                                "required": [
                                                    "rTarget"
                                                ],
                                                "properties": {
                                                    "rTarget": {
                                                        "properties": {
                                                            "objectType": {
                                                                "const": "experiment"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship source: experiment",
                                                "description": "Node to be used as an object type for relationship contraints.",
                                                "required": [
                                                    "rSource"
                                                ],
                                                "properties": {
                                                    "rSource": {
                                                        "properties": {
                                                            "objectType": {
                                                                "const": "experiment"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship target: sample",
                                                "description": "Node to be used as an object type for relationship contraints.",
                                                "required": [
                                                    "rTarget"
                                                ],
                                                "properties": {
                                                    "rTarget": {
                                                        "properties": {
                                                            "objectType": {
                                                                "const": "sample"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "title": "Allowed relationships of type groupedWith, isAfter, sameAs (optional ones)",
                                "allOf": [
                                    {
                                        "anyOf": [
                                            {
                                                "type": "object",
                                                "title": "Relationship type: groupedWith",
                                                "description": "Node to be used as a relationship type for relationship contraints.",
                                                "required": [
                                                    "rType"
                                                ],
                                                "properties": {
                                                    "rType": {
                                                        "const": "groupedWith"
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship type: isAfter",
                                                "description": "Node to be used as a relationship type for relationship contraints.",
                                                "required": [
                                                    "rType"
                                                ],
                                                "properties": {
                                                    "rType": {
                                                        "const": "isAfter"
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship type: sameAs",
                                                "description": "Node to be used as a relationship type for relationship contraints.",
                                                "required": [
                                                    "rType"
                                                ],
                                                "properties": {
                                                    "rType": {
                                                        "const": "sameAs"
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        "anyOf": [
                                            {
                                                "type": "object",
                                                "title": "Relationship source: experiment",
                                                "description": "Node to be used as an object type for relationship contraints.",
                                                "required": [
                                                    "rSource"
                                                ],
                                                "properties": {
                                                    "rSource": {
                                                        "properties": {
                                                            "objectType": {
                                                                "const": "experiment"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship target: experiment",
                                                "description": "Node to be used as an object type for relationship contraints.",
                                                "required": [
                                                    "rTarget"
                                                ],
                                                "properties": {
                                                    "rTarget": {
                                                        "properties": {
                                                            "objectType": {
                                                                "const": "experiment"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "title": "Relationships of external accessions and URLs (optional ones)",
                                "description": "Almost any relationship is imaginable with external accessions and URLs.",
                                "allOf": [
                                    {
                                        "anyOf": [
                                            {
                                                "type": "object",
                                                "title": "Relationship type: childOf",
                                                "description": "Node to be used as a relationship type for relationship contraints.",
                                                "required": [
                                                    "rType"
                                                ],
                                                "properties": {
                                                    "rType": {
                                                        "const": "childOf"
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship type: familyRelationshipWith",
                                                "description": "Node to be used as a relationship type for relationship contraints.",
                                                "required": [
                                                    "rType"
                                                ],
                                                "properties": {
                                                    "rType": {
                                                        "const": "familyRelationshipWith"
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship type: groupedWith",
                                                "description": "Node to be used as a relationship type for relationship contraints.",
                                                "required": [
                                                    "rType"
                                                ],
                                                "properties": {
                                                    "rType": {
                                                        "const": "groupedWith"
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship type: sameAs",
                                                "description": "Node to be used as a relationship type for relationship contraints.",
                                                "required": [
                                                    "rType"
                                                ],
                                                "properties": {
                                                    "rType": {
                                                        "const": "sameAs"
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship type: referencedBy",
                                                "description": "Node to be used as a relationship type for relationship contraints.",
                                                "required": [
                                                    "rType"
                                                ],
                                                "properties": {
                                                    "rType": {
                                                        "const": "referencedBy"
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship type: developsFrom",
                                                "description": "Node to be used as a relationship type for relationship contraints.",
                                                "required": [
                                                    "rType"
                                                ],
                                                "properties": {
                                                    "rType": {
                                                        "const": "developsFrom"
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship type: memberOf",
                                                "description": "Node to be used as a relationship type for relationship contraints.",
                                                "required": [
                                                    "rType"
                                                ],
                                                "properties": {
                                                    "rType": {
                                                        "const": "memberOf"
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship type: isAfter",
                                                "description": "Node to be used as a relationship type for relationship contraints.",
                                                "required": [
                                                    "rType"
                                                ],
                                                "properties": {
                                                    "rType": {
                                                        "const": "isAfter"
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        "anyOf": [
                                            {
                                                "type": "object",
                                                "title": "Relationship source: externalAccession",
                                                "description": "Node to be used as an object type for relationship contraints.",
                                                "required": [
                                                    "rSource"
                                                ],
                                                "properties": {
                                                    "rSource": {
                                                        "properties": {
                                                            "objectType": {
                                                                "const": "externalAccession"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship source: externalURL",
                                                "description": "Node to be used as an object type for relationship contraints.",
                                                "required": [
                                                    "rSource"
                                                ],
                                                "properties": {
                                                    "rSource": {
                                                        "properties": {
                                                            "objectType": {
                                                                "const": "externalURL"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship target: externalAccession",
                                                "description": "Node to be used as an object type for relationship contraints.",
                                                "required": [
                                                    "rTarget"
                                                ],
                                                "properties": {
                                                    "rTarget": {
                                                        "properties": {
                                                            "objectType": {
                                                                "const": "externalAccession"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship target: externalURL",
                                                "description": "Node to be used as an object type for relationship contraints.",
                                                "required": [
                                                    "rTarget"
                                                ],
                                                "properties": {
                                                    "rTarget": {
                                                        "properties": {
                                                            "objectType": {
                                                                "const": "externalURL"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "contains": {
                "title": "Relationship constraint of 1 submission as source",
                "description": "This node defines a relationship item containing a 'submission' as a source and \\nof type 'referencedBy'. This node can be used with the keyword 'contains' at \\neach relationship array of all objects (but submission), in order to assert that \\nall objects have a submission object (EGAB...) linked to them.",
                "allOf": [
                    {
                        "type": "object",
                        "title": "Relationship type: referencedBy",
                        "description": "Node to be used as a relationship type for relationship contraints.",
                        "required": [
                            "rType"
                        ],
                        "properties": {
                            "rType": {
                                "const": "referencedBy"
                            }
                        }
                    },
                    {
                        "type": "object",
                        "title": "Relationship source: submission",
                        "description": "Node to be used as an object type for relationship contraints.",
                        "required": [
                            "rSource"
                        ],
                        "properties": {
                            "rSource": {
                                "properties": {
                                    "objectType": {
                                        "const": "submission"
                                    }
                                }
                            }
                        }
                    }
                ]
            }
        },
        "experimentAttributes": {
            "type": "array",
            "title": "Experiment custom attributes",
            "description": "Custom attributes of an experiment: reusable attributes to encode tag-value \\npairs (e.g. Tag being 'additional description' and its Value 'this experiment is \\na re-do of another 3 experiments due to...') with optional units. Its properties \\nare inherited from the common-definitions.json schema.",
            "additionalProperties": false,
            "uniqueItems": true,
            "minItems": 1,
            "items": {
                "type": "object",
                "title": "Custom attribute of an object",
                "description": "Reusable attributes to encode tag-value pairs (e.g. Tag being 'Age' and its \\nValue '40') with optional units (e.g. 'years').",
                "required": [
                    "tag",
                    "value"
                ],
                "additionalProperties": false,
                "properties": {
                    "tag": {
                        "type": "string",
                        "title": "Tag of the custom attribute",
                        "description": "The name of the attribute (e.g. 'Age').",
                        "minLength": 1,
                        "examples": [
                            "age"
                        ]
                    },
                    "value": {
                        "type": [
                            "string",
                            "number"
                        ],
                        "title": "Value of the custom attribute",
                        "description": "The value of the attribute (e.g. '40').",
                        "examples": [
                            "smoker",
                            40
                        ]
                    },
                    "units": {
                        "type": "string",
                        "title": "Units of the custom attribute",
                        "description": "The optional units of the attribute (e.g. 'years').",
                        "minLength": 1,
                        "examples": [
                            "years"
                        ]
                    }
                }
            }
        }
    },
    "oneOf": [
        {
            "title": "If the assay technology is a sequencer, the experiment type has to match",
            "properties": {
                "assayTechnology": {
                    "properties": {
                        "assayInstrument": {
                            "enum": [
                                "sequencer"
                            ]
                        }
                    }
                },
                "experimentTypeSpecifications": {
                    "required": [
                        "sequencingExperiment"
                    ]
                }
            }
        },
        {
            "title": "If the assay technology is an array, the experiment type has to match",
            "properties": {
                "assayTechnology": {
                    "properties": {
                        "assayInstrument": {
                            "enum": [
                                "array"
                            ]
                        }
                    }
                },
                "experimentTypeSpecifications": {
                    "required": [
                        "arrayExperiment"
                    ]
                }
            }
        }
    ],
    "anyOf": [
        {
            "title": "If the assayed molecule is 'deoxyribonucleic acid' then, the assay type must be \\nof 'DNA asay' type",
            "if": {
                "required": [
                    "assayedBiologicalMacromolecule"
                ],
                "properties": {
                    "assayedBiologicalMacromolecule": {
                        "required": [
                            "termId"
                        ],
                        "properties": {
                            "termId": {
                                "title": "Ontology constraint for 'deoxyribonucleic acid'",
                                "graphRestriction ": {
                                    "ontologies": [
                                        "obo:efo"
                                    ],
                                    "classes": [
                                        "CHEBI:16991"
                                    ],
                                    "relations": [
                                        "rdfs:subClassOf"
                                    ],
                                    "direct": false,
                                    "include_self": true
                                }
                            }
                        }
                    }
                }
            },
            "then": {
                "required": [
                    "assayType"
                ],
                "properties": {
                    "assayType": {
                        "required": [
                            "termId"
                        ],
                        "properties": {
                            "termId": {
                                "title": "Ontology constraint for 'DNA assay'",
                                "graphRestriction": {
                                    "ontologies": [
                                        "obo:efo"
                                    ],
                                    "classes": [
                                        "EFO:0001456"
                                    ],
                                    "relations": [
                                        "rdfs:subClassOf"
                                    ],
                                    "direct": false,
                                    "include_self": false
                                }
                            }
                        }
                    }
                }
            }
        },
        {
            "title": "If the assayed molecule is 'ribonucleic acid' then, the assay type must be of \\n'RNA asay' type",
            "if": {
                "required": [
                    "assayedBiologicalMacromolecule"
                ],
                "properties": {
                    "assayedBiologicalMacromolecule": {
                        "required": [
                            "termId"
                        ],
                        "properties": {
                            "termId": {
                                "title": "Ontology constraint for 'ribonucleic acid'",
                                "graphRestriction ": {
                                    "ontologies": [
                                        "obo:efo"
                                    ],
                                    "classes": [
                                        "CHEBI:33697"
                                    ],
                                    "relations": [
                                        "rdfs:subClassOf"
                                    ],
                                    "direct": false,
                                    "include_self": true
                                }
                            }
                        }
                    }
                }
            },
            "then": {
                "required": [
                    "assayType"
                ],
                "properties": {
                    "assayType": {
                        "required": [
                            "termId"
                        ],
                        "properties": {
                            "termId": {
                                "title": "Ontology constraint for 'RNA assay'",
                                "graphRestriction": {
                                    "ontologies": [
                                        "obo:efo"
                                    ],
                                    "classes": [
                                        "EFO:0001457"
                                    ],
                                    "relations": [
                                        "rdfs:subClassOf"
                                    ],
                                    "direct": false,
                                    "include_self": false
                                }
                            }
                        }
                    }
                }
            }
        }
    ]
}
@endjson
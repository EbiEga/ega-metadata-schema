@startjson

{
    "$schema": "https://json-schema.org/draft/2019-09/schema",
    "$id": "https://raw.githubusercontent.com/EbiEga/ega-metadata-schema/main/schemas/EGA.sample.json",
    "type": "object",
    "title": "EGA sample metadata schema",
    "meta:version": "0.0.0",
    "$async": true,
    "description": "Metadata schema used by the European Genome-phenome Archive (EGA) to validate \\nits sample metadata object. This object is intended to contain metadata about \\nthe physical sample [OBI:0000747] used in the experiment. A sample is defined as \\na limited quantity of something (e.g. a portion of a substance or individual) to \\nbe used for testing, analysis, inspection, investigation, demonstration, or \\ntrial use. It is a material which is collected with the intention of being \\nrepresentative of a greater whole. A sample shall not be confused with the \\nindividual (i.e. a person or donor) such sample derives from, for 'individual' \\nis its own metadata object (https://github.com/EbiEga/ega-metadata-schema/tree/main/schemas/EGA.individual.json). \\nFurther details can be found in the EGA-metadata-schema GitHub repository \\n(https://github.com/EbiEga/ega-metadata-schema/tree/main/schemas) and \\nEGA-archive website (https://ega-archive.org/)",
    "required": [
        "objectId",
        "organismDescriptor"
    ],
    "additionalProperties": false,
    "properties": {
        "objectId": {
            "type": "object",
            "title": "Object's IDs block",
            "description": "Node containing the main identifiers of the object (e.g. alias, centerName...), \\ninherited from the common definitions. #! We extend the core object \\n(objectCoreId) by adding a pattern check based on this schema's nature: a sample \\n(by using EGASampleIdPattern)",
            "allOf": [
                {
                    "type": "object",
                    "title": "Core identifiers of an object",
                    "description": "Base definition containing the properties (e.g. Sample's alias) of a minimal \\nidentification layer of an EGA object (e.g. Sample).",
                    "additionalProperties": false,
                    "properties": {
                        "alias": {
                            "type": "string",
                            "title": "Alias of an object",
                            "description": "Submitter designated name (e.g. 'my_sample_J13') for the object (e.g. Sample). \\nThe name must be unique within the submission account (e.g. 'ega-box-79'), since \\nthe aliases and submission accounts are concatenated within our database to \\nobtain the unique alias (e.g. 'ega-box-79::my_sample_J13').",
                            "minLength": 1,
                            "examples": [
                                "my_sample_J13"
                            ]
                        },
                        "centerName": {
                            "type": "string",
                            "title": "Center name of the submitter",
                            "description": "Center name (e.g. 'EBI-TEST') associated to the submitter. In other words, it is \\nthe acronym of the submitter's account (provided by the HelpDesk team).",
                            "minLength": 1,
                            "examples": [
                                "EBI-TEST"
                            ]
                        },
                        "egaAccession": {
                            "type": "string",
                            "title": "EGA's accession of the object",
                            "description": "The object accession (i.e. unique identifier) assigned by the archive (EGA). \\nObject accessions can be found in the 'Identifiers' section of the EGA-archive \\nwebsite (https://ega-archive.org/metadata/how-to-use-the-api) and commonly start \\nwith EGA, followed by the distinctive letter of the object and finally the \\nnumeric ID of the instance.",
                            "examples": [
                                "EGAN00003245489"
                            ]
                        },
                        "externalAccessions": {
                            "type": "array",
                            "title": "External accessions array",
                            "description": "External accession node to reference objects in other archives (e.g. an already \\nexisting sample at BioSamples).",
                            "minItems": 1,
                            "additionalProperties": false,
                            "uniqueItems": true,
                            "items": {
                                "type": "object",
                                "title": "Object External accession",
                                "description": "External accession property defining a reference to an external record in \\nanother resource. For example, a reference to a sequence deposited in NCBI's \\nNucleotide database (e.g. 'https://identifiers.org/nucleotide:T35715.1'); or a \\nsample record in BioSamples (e.g. \\n'https://identifiers.org/biosample:SAMEA7616999').",
                                "additionalProperties": false,
                                "properties": {
                                    "objectExternalAccessionIdentifier": {
                                        "type": "object",
                                        "title": "Identifier of the external accession",
                                        "description": "Unique identifier of an external record. Its 'termId' (e.g. \\n'biosample:SAMEA7616999', 'pubmed:30962759', 'biostudies:S-EPMC3314381', etc.) \\nshall follow CURIE format of ``prefix``:``accession``, where: (1) the prefix \\n(e.g. 'biosample') is unique and assigned to the external resource at \\nidentifiers.org; (2) and the unique accession of the object (e.g. SAMEA7616999) \\nshould resolve to an existing record within the resource. If in doubt, use \\nidentifiers.org to resolve your external accession: 'https://identifiers.org/' + \\n'termId', e.g. 'https://identifiers.org/biosample:SAMEA7616999'",
                                        "allOf": [
                                            {
                                                "type": "object",
                                                "title": "Ontology term",
                                                "description": "This property represents an ontology term (a.k.a. class). It consists on two \\nproperties: the term identifier (termId) and its label (termLabel). This \\nproperty and its structure is inherited across many other elements in the \\nschemas. It is there, when inherited, where the real ontology constraint is put \\nin place (e.g. using 'graphRestriction' keywords). Based on phenopacket's [OntologyClass](https://phenopacket-schema.readthedocs.io/en/latest/ontologyclass.html)",
                                                "additionalProperties": false,
                                                "required": [
                                                    "termId",
                                                    "termLabel"
                                                ],
                                                "properties": {
                                                    "termId": {
                                                        "type": "string",
                                                        "title": "ID of the term",
                                                        "description": "The identifier of an ontology term must be in CURIE format (check property \\n'curieGeneralPattern'). Whether a specific term is valid or not according to an \\nontology hierarchy is checked at each specific termId using ontology validation \\nkeywords (e.g. 'graphRestriction').",
                                                        "minLength": 1,
                                                        "allOf": [
                                                            {
                                                                "type": "string",
                                                                "title": "Compact URI (CURIE) pattern",
                                                                "description": "A [W3C Compact URI](https://www.w3.org/TR/curie/) formatted string. A CURIE \\nstring has the structure ``prefix``:``reference``, as defined by the W3C syntax. \\nEven though we do not restrict prefixes, we recommend that the term used as \\n``prefix`` is uniformely resolved. In other words, it is better to use prefixes \\n(e.g. 'ensembl') from identifiers.org.",
                                                                "minLength": 1,
                                                                "pattern": "^\\w[^:]*:.+$",
                                                                "examples": [
                                                                    "ensembl:ENSG00000139618",
                                                                    "HGNC:11535",
                                                                    "data:1026",
                                                                    "EFO:0003815"
                                                                ]
                                                            }
                                                        ],
                                                        "examples": [
                                                            "MONDO:0100096",
                                                            "EFO:0003101",
                                                            "EFO:0005518",
                                                            "EFO:0002944",
                                                            "EFO:0003813"
                                                        ]
                                                    },
                                                    "termLabel": {
                                                        "type": "string",
                                                        "title": "Label of the term",
                                                        "description": "The label of a term is the human-readable string associated with the identifier. \\nIt is not required that it matches the label of the termId within the referenced \\nontology, although it should. This is due to the fact that the source of truth \\nwill always be the termId, and not the label, which adds more context.",
                                                        "minLength": 1,
                                                        "examples": [
                                                            "COVID-19",
                                                            "Axila skin",
                                                            "bone marrow cell",
                                                            "astrocyte",
                                                            "oligodendrocyte",
                                                            "Unknown",
                                                            "Unaffected",
                                                            "homo sapiens"
                                                        ]
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    "objectExternalAccessionURI": {
                                        "type": "string",
                                        "title": "URI of the external accession",
                                        "description": "Full or partial URL/URI of the external accession, for systems to resolve it. \\nShould only be used in case identifiers.org does not contain a namespace for the \\nrequired resource or the mapping to the URI from its identifier is faulty.",
                                        "allOf": [
                                            {
                                                "type": "string",
                                                "title": "URL/URI pattern",
                                                "description": "This object exists to hold the pattern that a URL or URI should have. For it to \\nbe referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^((http|https)://)(www.)?[a-zA-Z0-9@:%._\\+~#?&//=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%._\\+~#?&//=]*)$",
                                                "examples": [
                                                    "https://phenopacket-schema.readthedocs.io/en/latest/externalreference.html",
                                                    "https://www.ebi.ac.uk/arrayexpress/experiments/E-MEXP-1712/",
                                                    "https://www.geeksforgeeks.org/check-if-an-url-is-valid-or-not-using-regular-expression/"
                                                ]
                                            }
                                        ],
                                        "examples": [
                                            "https://www.ebi.ac.uk/biosamples/samples/SAMN11716999",
                                            "https://pubmed.ncbi.nlm.nih.gov/19491253",
                                            "https://www.ebi.ac.uk/arrayexpress/experiments/E-MEXP-1712/"
                                        ]
                                    },
                                    "objectExternalAccessionDescription": {
                                        "type": [
                                            "string",
                                            "number"
                                        ],
                                        "title": "Description of the external accession",
                                        "description": "Optional description of the external accession, used to add context to the \\nidentifier if applicable.",
                                        "examples": [
                                            "taken from biosample temporarily",
                                            "Ensembl's part of the accessions",
                                            "first",
                                            2,
                                            "Recurrent Erythema Nodosum in a Child with a SHOC2 Gene Mutation"
                                        ]
                                    }
                                },
                                "anyOf": [
                                    {
                                        "title": "Either the identifier is needed",
                                        "required": [
                                            "objectExternalAccessionIdentifier"
                                        ]
                                    },
                                    {
                                        "title": "Or the reference is needed",
                                        "required": [
                                            "objectExternalAccessionURI"
                                        ]
                                    }
                                ]
                            }
                        }
                    },
                    "anyOf": [
                        {
                            "title": "Check core IDs: combination of Alias and Center name",
                            "required": [
                                "alias",
                                "centerName"
                            ]
                        },
                        {
                            "title": "Check core IDs: EGA accession ID",
                            "required": [
                                "egaAccession"
                            ]
                        },
                        {
                            "title": "Check core IDs: external accessions",
                            "required": [
                                "externalAccessions"
                            ]
                        }
                    ]
                },
                {
                    "title": "Check that sample EGA ID (EGAN) is correct",
                    "properties": {
                        "egaAccession": {
                            "type": "string",
                            "title": "Pattern of an EGA sample's ID (EGAN...)",
                            "pattern": "^EGAN[0-9]{11}$",
                            "examples": [
                                "EGAN00003245489"
                            ]
                        }
                    }
                }
            ]
        },
        "schemaDescriptor": {
            "type": "object",
            "title": "Schema descriptor",
            "description": "This node is intended to be used to describe the schemas and standards that a \\nJSON document was based on. For instance, if a sample.json document was created \\nto be validated against EGA.sample.json schema version 1.0.0, such information \\nshould be reflected in this block. This way, both a human and a machine can \\ninterpret and validate the JSON document efficiently, without the need of \\nguessing versions.",
            "additionalProperties": false,
            "required": [
                "objectType",
                "describedBySchemaUri",
                "objectSchemaVersion",
                "commonSchemaVersion"
            ],
            "properties": {
                "objectType": {
                    "type": "string",
                    "title": "Type of the object",
                    "description": "Type of the object (e.g. 'sample') the JSON document describes.",
                    "enum": [
                        "experiment",
                        "study",
                        "sample",
                        "individual",
                        "submission",
                        "assay",
                        "dataset",
                        "analysis",
                        "policy",
                        "DAC",
                        "protocol",
                        "object-set"
                    ]
                },
                "describedBySchemaUri": {
                    "type": "string",
                    "title": "URI of the schema",
                    "description": "URI of the schema (e.g. 'https://github.com/EbiEga/ega-metadata-schema/tree/main/schemas/EGA.sample.json') \\nthat describes the JSON document (e.g. 'my_sample.json')",
                    "pattern": "^https://github\\.com/EbiEga/ega-metadata-schema/tree/main/schemas/EGA\\..+\\.json$",
                    "examples": [
                        "https://github.com/EbiEga/ega-metadata-schema/tree/main/schemas/EGA.sample.json"
                    ]
                },
                "objectSchemaVersion": {
                    "type": "string",
                    "title": "Version of the object's schema",
                    "description": "The version of the object's schema, the one specific for the object the JSON \\ndocument corresponds to (e.g. 'EGA.sample.json'), not the common definitions \\nschema's version (i.e. 'EGA.common-definitions.json').",
                    "allOf": [
                        {
                            "type": "string",
                            "title": "Semantic versioning pattern",
                            "description": "This object exists to hold the pattern that semantic versioning has, for it to \\nbe referenced elsewhere within this (or other) JSON schema. For further details \\nabout semantic versioning check 'https://semver.org/'",
                            "pattern": "^[0-9]+\\.[0-9]+\\.[0-9]+$",
                            "examples": [
                                "2.5.1"
                            ]
                        }
                    ]
                },
                "commonSchemaVersion": {
                    "type": "string",
                    "title": "Version of the common definition's schema",
                    "description": "The version of the common definition's schema, the one containing all shared \\ndefinitions (i.e. 'EGA.common-definitions.json'), not the one specific to the \\nobject described by the JSON document (e.g. 'EGA.sample.json').",
                    "allOf": [
                        {
                            "type": "string",
                            "title": "Semantic versioning pattern",
                            "description": "This object exists to hold the pattern that semantic versioning has, for it to \\nbe referenced elsewhere within this (or other) JSON schema. For further details \\nabout semantic versioning check 'https://semver.org/'",
                            "pattern": "^[0-9]+\\.[0-9]+\\.[0-9]+$",
                            "examples": [
                                "2.5.1"
                            ]
                        }
                    ]
                }
            }
        },
        "objectTitle": {
            "type": "string",
            "title": "Title of the sample",
            "description": "An informative sample title that should serve as an overview (e.g. sample tag, \\npseudonyms, sample type, sample groups, purpose...) of the sample and \\ndifferentiate it from others. This short text can be used to call out sample \\nrecords in searches or in displays.",
            "examples": [
                "Buccal swab from COVID+ patient NM305004"
            ]
        },
        "objectDescription": {
            "type": "string",
            "title": "Description of the sample",
            "description": "An informative sample description that describes the sample and differentiates \\nit from others.",
            "examples": [
                "Buccal swab from COVID positive patient (NM305004) was taken on a sunny morning, \\nhad a lower volume than expected, then was sent to..."
            ]
        },
        "organismDescriptor": {
            "type": "object",
            "title": "Organism [OBI:0100026] descriptor block",
            "description": "This property describes the material entity the sample consists in. That is, an \\nindividual living system, such as animal, plant, bacteria or virus, that is \\ncapable of replicating or reproducing, growth and maintenance in the right \\nenvironment. An organism may be unicellular or, like humans, made up of many \\nbillions of cells divided into specialized tissues and organs. This node is of \\nspecial interest in case the provenance of the sample is not human (e.g. \\nmicrobiota taken from a donor). Unless stated otherwise, given the nature of the \\nEGA, it is expected to be of human provenance.",
            "additionalProperties": false,
            "required": [
                "organismTaxon"
            ],
            "properties": {
                "organismTaxon": {
                    "type": "object",
                    "title": "NCBI Taxon of the organism",
                    "meta:propertyCurie": "APOLLO_SV:00000203",
                    "description": "Taxonomic classification of the organism (e.g. 'NCBITaxon:9606' and 'homo \\nsapiens' for humans) curated by the NCBI Taxonomy (search for organisms here: \\nhttps://www.ncbi.nlm.nih.gov/taxonomy; or use the OLS: \\nhttps://www.ebi.ac.uk/ols/ontologies/ncbitaxon). You can find further details at \\n'https://www.uniprot.org/help/taxonomic_identifier'. This is appropriate for \\nindividual organisms and some environmental samples.",
                    "allOf": [
                        {
                            "type": "object",
                            "title": "Ontology term",
                            "description": "This property represents an ontology term (a.k.a. class). It consists on two \\nproperties: the term identifier (termId) and its label (termLabel). This \\nproperty and its structure is inherited across many other elements in the \\nschemas. It is there, when inherited, where the real ontology constraint is put \\nin place (e.g. using 'graphRestriction' keywords). Based on phenopacket's [OntologyClass](https://phenopacket-schema.readthedocs.io/en/latest/ontologyclass.html)",
                            "additionalProperties": false,
                            "required": [
                                "termId",
                                "termLabel"
                            ],
                            "properties": {
                                "termId": {
                                    "type": "string",
                                    "title": "ID of the term",
                                    "description": "The identifier of an ontology term must be in CURIE format (check property \\n'curieGeneralPattern'). Whether a specific term is valid or not according to an \\nontology hierarchy is checked at each specific termId using ontology validation \\nkeywords (e.g. 'graphRestriction').",
                                    "minLength": 1,
                                    "allOf": [
                                        {
                                            "type": "string",
                                            "title": "Compact URI (CURIE) pattern",
                                            "description": "A [W3C Compact URI](https://www.w3.org/TR/curie/) formatted string. A CURIE \\nstring has the structure ``prefix``:``reference``, as defined by the W3C syntax. \\nEven though we do not restrict prefixes, we recommend that the term used as \\n``prefix`` is uniformely resolved. In other words, it is better to use prefixes \\n(e.g. 'ensembl') from identifiers.org.",
                                            "minLength": 1,
                                            "pattern": "^\\w[^:]*:.+$",
                                            "examples": [
                                                "ensembl:ENSG00000139618",
                                                "HGNC:11535",
                                                "data:1026",
                                                "EFO:0003815"
                                            ]
                                        }
                                    ],
                                    "examples": [
                                        "MONDO:0100096",
                                        "EFO:0003101",
                                        "EFO:0005518",
                                        "EFO:0002944",
                                        "EFO:0003813"
                                    ]
                                },
                                "termLabel": {
                                    "type": "string",
                                    "title": "Label of the term",
                                    "description": "The label of a term is the human-readable string associated with the identifier. \\nIt is not required that it matches the label of the termId within the referenced \\nontology, although it should. This is due to the fact that the source of truth \\nwill always be the termId, and not the label, which adds more context.",
                                    "minLength": 1,
                                    "examples": [
                                        "COVID-19",
                                        "Axila skin",
                                        "bone marrow cell",
                                        "astrocyte",
                                        "oligodendrocyte",
                                        "Unknown",
                                        "Unaffected",
                                        "homo sapiens"
                                    ]
                                }
                            }
                        }
                    ],
                    "properties": {
                        "termId": {
                            "title": "Ontology constraints for this specific termId",
                            "graphRestriction": {
                                "ontologies": [
                                    "obo:ncbitaxon"
                                ],
                                "classes": [
                                    "NCBITaxon:1"
                                ],
                                "relations": [
                                    "rdfs:subClassOf"
                                ],
                                "direct": false,
                                "include_self": false
                            },
                            "examples": [
                                "NCBITaxon:9606",
                                "NCBITaxon:155900",
                                "NCBITaxon:408170",
                                "NCBITaxon:447426"
                            ]
                        }
                    }
                },
                "commonName": {
                    "type": "string",
                    "title": "Biologic entity classification common name",
                    "meta:propertyCurie": "NCIT:C164690",
                    "description": "Common name (e.g. 'human') used to designate a plant, animal or other organism, \\nas opposed to the scientific name.",
                    "minLength": 1,
                    "examples": [
                        "human",
                        "goat",
                        "horse"
                    ]
                }
            }
        },
        "sampleCollection": {
            "type": "object",
            "title": "Sample collection descriptor",
            "meta:propertyCurie": "OBI:0000659",
            "description": "Node containing the provenance details (when and where) of the sample. This \\ninformation does not include the whole sample collection protocol (expected at \\nexperiment's protocols), only the sampling date (when the sample was taken from \\nthe individual) and site (where was it taken within the individual).",
            "additionalProperties": false,
            "properties": {
                "sampleCollectionDate": {
                    "type": "string",
                    "title": "Date of the sample collection",
                    "meta:propertyCurie": "EFO:0000689",
                    "description": "Date when the sample was collected (e.g. '2021-05-15'). If the protocols are too \\nlong, the date shall be the day the collection concluded.",
                    "allOf": [
                        {
                            "type": "string",
                            "title": "Pattern of EGA ISO 8601 date",
                            "description": "Regular expression to check the syntax of a date following 'ISO 8601 date' \\nformat. Notice that the Time (denoted by 'T...') is optional. So is the time \\nzone, specified at the end of the string (e.g. 'Z', '+01:00'...). See more \\ndetail at 'https://regexpattern.com/iso-8601-dates-times/'.",
                            "pattern": "^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])(T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-](?:2[0-3]|[01][0-9]):[0-5][0-9])?)?$",
                            "examples": [
                                "2021-04-30",
                                "2020-12-29T19:30:45.123Z",
                                "2020-12-29",
                                "2020-12-29T19:30:45",
                                "2021-10-13T04:13:00+01:00",
                                "2021-10-13T12:13:00-08:00",
                                "2021-10-13T12:13:00"
                            ]
                        }
                    ]
                },
                "ageAtCollection": {
                    "type": "object",
                    "title": "Individual's age at sample collection",
                    "description": "Property describing the individual's age at sample collection. Can either be the \\nprecise age an age range.",
                    "additionalProperties": false,
                    "properties": {
                        "age": {
                            "type": "string",
                            "title": "Individual's age",
                            "meta:propertyCurie": "EFO:0000246",
                            "description": "Precise age in ISO8601 format of the individual. For example, 'P3Y6M4D' \\nrepresents a duration of three years, six months and four days.",
                            "allOf": [
                                {
                                    "type": "string",
                                    "title": "Pattern of a partial EGA ISO 8601 duration",
                                    "description": "Pattern of ISO 8601 durations. It can be used to define time intervals (e.g. \\n'P3Y6M4DT12H30M5S' represents a duration of three years, six months, four days, \\ntwelve hours, thirty minutes, and five seconds). See more at \\nhttps://en.wikipedia.org/wiki/ISO_8601#Durations.",
                                    "pattern": "^[-+]?P(?!$)(([-+]?\\d+Y)|([-+]?\\d+\\.\\d+Y$))?(([-+]?\\d+M)|([-+]?\\d+\\.\\d+M$))?(([-+]?\\d+W)|([-+]?\\d+\\.\\d+W$))?(([-+]?\\d+D)|([-+]?\\d+\\.\\d+D$))?(T(?=[\\d+-])(([-+]?\\d+H)|([-+]?\\d+\\.\\d+H$))?(([-+]?\\d+M)|([-+]?\\d+\\.\\d+M$))?([-+]?\\d+(\\.\\d+)?S)?)??$",
                                    "examples": [
                                        "P3Y6M4DT12H30M5S",
                                        "P23DT23H",
                                        "PT0S",
                                        "P0D",
                                        "P0,5Y",
                                        "P0.5Y"
                                    ]
                                }
                            ],
                            "examples": [
                                "P3Y6M4D",
                                "P23DT23H",
                                "P4Y"
                            ]
                        },
                        "ageRange": {
                            "type": "object",
                            "title": "Individual's age range at sample collection",
                            "description": "Age range of the individual when the sample was collected. Composed of two \\n(start and end) age points.",
                            "additionalProperties": false,
                            "properties": {
                                "start": {
                                    "type": "string",
                                    "title": "Individual's age",
                                    "meta:propertyCurie": "EFO:0000246",
                                    "description": "Precise age in ISO8601 format of the individual. For example, 'P3Y6M4D' \\nrepresents a duration of three years, six months and four days.",
                                    "allOf": [
                                        {
                                            "type": "string",
                                            "title": "Pattern of a partial EGA ISO 8601 duration",
                                            "description": "Pattern of ISO 8601 durations. It can be used to define time intervals (e.g. \\n'P3Y6M4DT12H30M5S' represents a duration of three years, six months, four days, \\ntwelve hours, thirty minutes, and five seconds). See more at \\nhttps://en.wikipedia.org/wiki/ISO_8601#Durations.",
                                            "pattern": "^[-+]?P(?!$)(([-+]?\\d+Y)|([-+]?\\d+\\.\\d+Y$))?(([-+]?\\d+M)|([-+]?\\d+\\.\\d+M$))?(([-+]?\\d+W)|([-+]?\\d+\\.\\d+W$))?(([-+]?\\d+D)|([-+]?\\d+\\.\\d+D$))?(T(?=[\\d+-])(([-+]?\\d+H)|([-+]?\\d+\\.\\d+H$))?(([-+]?\\d+M)|([-+]?\\d+\\.\\d+M$))?([-+]?\\d+(\\.\\d+)?S)?)??$",
                                            "examples": [
                                                "P3Y6M4DT12H30M5S",
                                                "P23DT23H",
                                                "PT0S",
                                                "P0D",
                                                "P0,5Y",
                                                "P0.5Y"
                                            ]
                                        }
                                    ],
                                    "examples": [
                                        "P3Y6M4D",
                                        "P23DT23H",
                                        "P4Y"
                                    ]
                                },
                                "end": {
                                    "type": "string",
                                    "title": "Individual's age",
                                    "meta:propertyCurie": "EFO:0000246",
                                    "description": "Precise age in ISO8601 format of the individual. For example, 'P3Y6M4D' \\nrepresents a duration of three years, six months and four days.",
                                    "allOf": [
                                        {
                                            "type": "string",
                                            "title": "Pattern of a partial EGA ISO 8601 duration",
                                            "description": "Pattern of ISO 8601 durations. It can be used to define time intervals (e.g. \\n'P3Y6M4DT12H30M5S' represents a duration of three years, six months, four days, \\ntwelve hours, thirty minutes, and five seconds). See more at \\nhttps://en.wikipedia.org/wiki/ISO_8601#Durations.",
                                            "pattern": "^[-+]?P(?!$)(([-+]?\\d+Y)|([-+]?\\d+\\.\\d+Y$))?(([-+]?\\d+M)|([-+]?\\d+\\.\\d+M$))?(([-+]?\\d+W)|([-+]?\\d+\\.\\d+W$))?(([-+]?\\d+D)|([-+]?\\d+\\.\\d+D$))?(T(?=[\\d+-])(([-+]?\\d+H)|([-+]?\\d+\\.\\d+H$))?(([-+]?\\d+M)|([-+]?\\d+\\.\\d+M$))?([-+]?\\d+(\\.\\d+)?S)?)??$",
                                            "examples": [
                                                "P3Y6M4DT12H30M5S",
                                                "P23DT23H",
                                                "PT0S",
                                                "P0D",
                                                "P0,5Y",
                                                "P0.5Y"
                                            ]
                                        }
                                    ],
                                    "examples": [
                                        "P3Y6M4D",
                                        "P23DT23H",
                                        "P4Y"
                                    ]
                                }
                            }
                        }
                    },
                    "anyOf": [
                        {
                            "title": "Either the age is needed",
                            "required": [
                                "age"
                            ]
                        },
                        {
                            "title": "Or the age-range is needed",
                            "required": [
                                "ageRange"
                            ]
                        }
                    ]
                },
                "samplingSite": {
                    "type": "object",
                    "title": "Sampling site",
                    "description": "A site or entity from which a sample (i.e. a statistically representative of the \\nwhole) is extracted from the whole. Search for your sample collection site at \\nhttp://purl.obolibrary.org/obo/UBERON_0000465. For example: in the case of a \\nnasal swab, it would be 'nasal cavity'; in a liver biopsy it would be 'liver'.",
                    "meta:propertyCurie": "EFO:0000688",
                    "allOf": [
                        {
                            "type": "object",
                            "title": "Material anatomical entity",
                            "meta:propertyCurie": "UBERON:0000465",
                            "description": "The part of organism's anatomy or substance arising from an organism from which \\nthe biomaterial was derived, exlucing cell types. For example: tissues, organs, \\nsystems, fluids (e.g. semen, blood), body locations (e.g. arm skin, eye), \\netcetera. Search for yours at: http://purl.obolibrary.org/obo/UBERON_0000465. \\nThis property can be used to describe a sampling site or the morphological site \\nof a disease, for example.",
                            "allOf": [
                                {
                                    "type": "object",
                                    "title": "Ontology term",
                                    "description": "This property represents an ontology term (a.k.a. class). It consists on two \\nproperties: the term identifier (termId) and its label (termLabel). This \\nproperty and its structure is inherited across many other elements in the \\nschemas. It is there, when inherited, where the real ontology constraint is put \\nin place (e.g. using 'graphRestriction' keywords). Based on phenopacket's [OntologyClass](https://phenopacket-schema.readthedocs.io/en/latest/ontologyclass.html)",
                                    "additionalProperties": false,
                                    "required": [
                                        "termId",
                                        "termLabel"
                                    ],
                                    "properties": {
                                        "termId": {
                                            "type": "string",
                                            "title": "ID of the term",
                                            "description": "The identifier of an ontology term must be in CURIE format (check property \\n'curieGeneralPattern'). Whether a specific term is valid or not according to an \\nontology hierarchy is checked at each specific termId using ontology validation \\nkeywords (e.g. 'graphRestriction').",
                                            "minLength": 1,
                                            "allOf": [
                                                {
                                                    "type": "string",
                                                    "title": "Compact URI (CURIE) pattern",
                                                    "description": "A [W3C Compact URI](https://www.w3.org/TR/curie/) formatted string. A CURIE \\nstring has the structure ``prefix``:``reference``, as defined by the W3C syntax. \\nEven though we do not restrict prefixes, we recommend that the term used as \\n``prefix`` is uniformely resolved. In other words, it is better to use prefixes \\n(e.g. 'ensembl') from identifiers.org.",
                                                    "minLength": 1,
                                                    "pattern": "^\\w[^:]*:.+$",
                                                    "examples": [
                                                        "ensembl:ENSG00000139618",
                                                        "HGNC:11535",
                                                        "data:1026",
                                                        "EFO:0003815"
                                                    ]
                                                }
                                            ],
                                            "examples": [
                                                "MONDO:0100096",
                                                "EFO:0003101",
                                                "EFO:0005518",
                                                "EFO:0002944",
                                                "EFO:0003813"
                                            ]
                                        },
                                        "termLabel": {
                                            "type": "string",
                                            "title": "Label of the term",
                                            "description": "The label of a term is the human-readable string associated with the identifier. \\nIt is not required that it matches the label of the termId within the referenced \\nontology, although it should. This is due to the fact that the source of truth \\nwill always be the termId, and not the label, which adds more context.",
                                            "minLength": 1,
                                            "examples": [
                                                "COVID-19",
                                                "Axila skin",
                                                "bone marrow cell",
                                                "astrocyte",
                                                "oligodendrocyte",
                                                "Unknown",
                                                "Unaffected",
                                                "homo sapiens"
                                            ]
                                        }
                                    }
                                }
                            ],
                            "properties": {
                                "termId": {
                                    "title": "Ontology constraints for this specific termId",
                                    "graphRestriction": {
                                        "ontologies": [
                                            "obo:uberon"
                                        ],
                                        "classes": [
                                            "UBERON:0000465"
                                        ],
                                        "relations": [
                                            "rdfs:subClassOf"
                                        ],
                                        "direct": false,
                                        "include_self": false
                                    },
                                    "examples": [
                                        "UBERON:0000956",
                                        "UBERON:0006530"
                                    ]
                                }
                            }
                        }
                    ]
                }
            },
            "anyOf": [
                {
                    "title": "Either the collection date is required",
                    "required": [
                        "sampleCollectionDate"
                    ]
                },
                {
                    "title": "Or the age at collection is required",
                    "required": [
                        "ageAtCollection"
                    ]
                },
                {
                    "title": "Or the sampling site is required",
                    "required": [
                        "samplingSite"
                    ]
                }
            ]
        },
        "sampleGrouping": {
            "type": "object",
            "title": "Sample group descriptor",
            "description": "Node describing whether the sample object is: (1) a single physical sample (a \\nsingle blood sample), collected individually through its corresponding protocol; \\nor (2) corresponds to a set of samples that, after being individually collected, \\nwas grouped together (e.g. blood samples from different donors) physically or \\nduring the experimentation and analysis. One sample corresponds to one \\nbiological replicate [EFO:0002091] (e.g. genetic content from a single cell, a \\ntissue, buccal swab, etc.) from a single individual or from several individuals. \\nShall not be mistaken for technical replicates [EFO:0002090] being used several \\ntimes (see https://github.com/EbiEga/ega-metadata-schema/tree/main/docs/miscellaneous/sample_replicate.jpg).",
            "additionalProperties": false,
            "required": [
                "sampleGroupBoolean"
            ],
            "properties": {
                "sampleGroupBoolean": {
                    "type": "boolean",
                    "title": "Sample group boolean",
                    "description": "Boolean flag on whether the sample object is a group or an individual sample. \\nPlease note that boolean values (true or false) cannot be quoted, nor in \\nuppercase.",
                    "examples": [
                        true
                    ]
                },
                "sampleNumber": {
                    "type": "integer",
                    "title": "Number of samples",
                    "description": "Number of individual samples (e.g. 300) encompassed by the sample group",
                    "examples": [
                        300
                    ]
                },
                "sampleGroupingLabel": {
                    "type": "string",
                    "title": "Label of the sample grouping",
                    "description": "Optional label of the sample grouping, used to add context to the group.",
                    "examples": [
                        "Group of samples X based on the day they were taken."
                    ]
                }
            },
            "oneOf": [
                {
                    "title": "Either the sampleNumber is present and above 1",
                    "required": [
                        "sampleNumber"
                    ],
                    "properties": {
                        "sampleGroupBoolean": {
                            "enum": [
                                true
                            ]
                        },
                        "sampleNumber": {
                            "type": "integer",
                            "minimum": 2
                        }
                    }
                },
                {
                    "title": "Or the sampleGroupBoolean is 'false', hence an individual sample with \\nsampleNumber being '1' or no sampleNumber",
                    "properties": {
                        "sampleGroupBoolean": {
                            "enum": [
                                false
                            ]
                        },
                        "sampleNumber": {
                            "enum": [
                                1
                            ]
                        }
                    }
                }
            ]
        },
        "sampleTypes": {
            "type": "array",
            "title": "Array of sample types",
            "description": "Array of sample types: the material entity (e.g. DNA) that is this sample. Use \\nthis property as tags that befit your sample, picking as many as needed. Choose \\nthe specific terms if possible (e.g. if the assayed molecule is cDNA, add 'cDNA' \\ninstead of just 'DNA'). This property should not be confused with the sample \\ncollection protocols: regardless of the procedure to collect the sample, this \\nproperty specifies what this sample is representing.",
            "additionalProperties": false,
            "uniqueItems": true,
            "minItems": 1,
            "items": {
                "type": "string",
                "title": "Type of sample",
                "description": "Sample type item. Term chosen from a list of controlled vocabulary (CV). If you \\ncannot find your term in the CV list, please create an issue at our [metadata \\nGitHub \\nrepository](https://github.com/EbiEga/ega-metadata-schema/issues/new/choose) \\nproposing its addition.",
                "enum": [
                    "DNA",
                    "RNA",
                    "metabolite",
                    "protein",
                    "cDNA",
                    "genomic DNA",
                    "mitochondrial DNA",
                    "messenger RNA",
                    "ncRNA",
                    "non polyA RNA",
                    "long non polyA RNA",
                    "nuclear RNA",
                    "polyA RNA",
                    "long polyA RNA",
                    "snRNA",
                    "total RNA",
                    "cell culture",
                    "biofilm",
                    "tissue culture"
                ],
                "meta:enum": {
                    "DNA": "[CHEBI:16991]",
                    "RNA": "[CHEBI:33697]",
                    "metabolite": "[EFO:0004727]",
                    "protein": "[CHEBI:36080]",
                    "cDNA": "[EFO:0008481]",
                    "genomic DNA": "[EFO:0008479]",
                    "mitochondrial DNA": "[EFO:0008480]",
                    "messenger RNA": "[CHEBI:33699]",
                    "ncRNA": "[SO:0000655]",
                    "non polyA RNA": "[EFO:0005017]",
                    "long non polyA RNA": "[EFO:0005018]",
                    "nuclear RNA": "[EFO:0030052]",
                    "polyA RNA": "[OBI:0000869]",
                    "long polyA RNA": "[EFO:0005019]",
                    "snRNA": "[SO:0000274]",
                    "total RNA": "[EFO:0004964]",
                    "cell culture": "[BTO:0000214]: Cells taken from a living organism and grown under controlled \\nconditions (in culture).",
                    "biofilm": "[BTO:0002690]",
                    "tissue culture": "[BTO:0001384]: Fragments of tissue from an animal transferred to an artificial \\nenvironment to continue its survival and function."
                }
            }
        },
        "cellTypes": {
            "type": "array",
            "title": "Array of cell types",
            "description": "Array of cell types, in case the sample is composed of cells (e.g. cell culture) \\nor the cells from which the genetic material derived are known (e.g. extract DNA \\nfrom astrocytes). Use this property as tags that befit your sample, picking as \\nmany cell types as your sample contains or may contain.",
            "meta:propertyCurie": "EFO:0000324",
            "additionalProperties": false,
            "uniqueItems": true,
            "minItems": 1,
            "items": {
                "type": "object",
                "title": "Cell type",
                "description": "One of the cell types that can be found in your sample or from which the genetic \\ncontent was derived.",
                "required": [
                    "cellType",
                    "cellTypeInferred"
                ],
                "additionalProperties": false,
                "properties": {
                    "cellType": {
                        "type": "object",
                        "title": "Cell type",
                        "description": "Property to describe a cell type: a distinct morphological or functional form of \\ncell.",
                        "meta:propertyCurie": "EFO:0000324",
                        "allOf": [
                            {
                                "type": "object",
                                "title": "Ontology term",
                                "description": "This property represents an ontology term (a.k.a. class). It consists on two \\nproperties: the term identifier (termId) and its label (termLabel). This \\nproperty and its structure is inherited across many other elements in the \\nschemas. It is there, when inherited, where the real ontology constraint is put \\nin place (e.g. using 'graphRestriction' keywords). Based on phenopacket's [OntologyClass](https://phenopacket-schema.readthedocs.io/en/latest/ontologyclass.html)",
                                "additionalProperties": false,
                                "required": [
                                    "termId",
                                    "termLabel"
                                ],
                                "properties": {
                                    "termId": {
                                        "type": "string",
                                        "title": "ID of the term",
                                        "description": "The identifier of an ontology term must be in CURIE format (check property \\n'curieGeneralPattern'). Whether a specific term is valid or not according to an \\nontology hierarchy is checked at each specific termId using ontology validation \\nkeywords (e.g. 'graphRestriction').",
                                        "minLength": 1,
                                        "allOf": [
                                            {
                                                "type": "string",
                                                "title": "Compact URI (CURIE) pattern",
                                                "description": "A [W3C Compact URI](https://www.w3.org/TR/curie/) formatted string. A CURIE \\nstring has the structure ``prefix``:``reference``, as defined by the W3C syntax. \\nEven though we do not restrict prefixes, we recommend that the term used as \\n``prefix`` is uniformely resolved. In other words, it is better to use prefixes \\n(e.g. 'ensembl') from identifiers.org.",
                                                "minLength": 1,
                                                "pattern": "^\\w[^:]*:.+$",
                                                "examples": [
                                                    "ensembl:ENSG00000139618",
                                                    "HGNC:11535",
                                                    "data:1026",
                                                    "EFO:0003815"
                                                ]
                                            }
                                        ],
                                        "examples": [
                                            "MONDO:0100096",
                                            "EFO:0003101",
                                            "EFO:0005518",
                                            "EFO:0002944",
                                            "EFO:0003813"
                                        ]
                                    },
                                    "termLabel": {
                                        "type": "string",
                                        "title": "Label of the term",
                                        "description": "The label of a term is the human-readable string associated with the identifier. \\nIt is not required that it matches the label of the termId within the referenced \\nontology, although it should. This is due to the fact that the source of truth \\nwill always be the termId, and not the label, which adds more context.",
                                        "minLength": 1,
                                        "examples": [
                                            "COVID-19",
                                            "Axila skin",
                                            "bone marrow cell",
                                            "astrocyte",
                                            "oligodendrocyte",
                                            "Unknown",
                                            "Unaffected",
                                            "homo sapiens"
                                        ]
                                    }
                                }
                            }
                        ],
                        "properties": {
                            "termId": {
                                "title": "Ontology constraints for this specific termId",
                                "graphRestriction": {
                                    "ontologies": [
                                        "obo:efo"
                                    ],
                                    "classes": [
                                        "EFO:0000324"
                                    ],
                                    "relations": [
                                        "rdfs:subClassOf"
                                    ],
                                    "direct": false,
                                    "include_self": false
                                },
                                "examples": [
                                    "CL:0002092",
                                    "CL:0000127",
                                    "CL:0000128"
                                ]
                            }
                        }
                    },
                    "cellTypeInferred": {
                        "type": "string",
                        "title": "Inferred cell type flag",
                        "description": "A flag to specify whether the cell type classification was inferred though \\nsingle-cell analysis (e.g. cell clustering or trajectory analysis) or was \\ndetermined otherwise (i.e. was visually observed or asserted to be in the \\nsample).",
                        "meta:propertyCurie": "EFO:0010196",
                        "enum": [
                            "inferred",
                            "not inferred"
                        ],
                        "meta:enum": {
                            "inferred": "The cell type was inferred through single-cell analysis.",
                            "not inferred": "The cell type was not inferred through single-cell analysis (i.e. it was \\nasserted to be in the sample)."
                        }
                    },
                    "cellTypeLabel": {
                        "type": "string",
                        "title": "Label of the cell type",
                        "description": "A field to add extra context to the cell type. For example, the expression \\nprofile (e.g. FCGR3A+) used to distinguish within the cell group or the \\nmorphology. Only advised to be used when the ontology term for the cell type is \\nnot granular enough. Otherwise, the most granular ontology term for the cell \\ntype should be used.",
                        "minLength": 1,
                        "examples": [
                            "FCGR3A+ Monocytes",
                            "TUNEL-positive ACE2-positive neurons"
                        ]
                    }
                }
            }
        },
        "sampleStatus": {
            "type": "array",
            "title": "Array of sample statuses",
            "description": "Array of statuses of the sample. Used to specify the condition(s) under study \\n**if** the diagnosis of the individual is not enough to describe the status of \\nthe sample. In other words, if the differenciation between affected and \\nunaffected groups is done at the sample level and not at the individual level. \\nThis differentiation exists when the study design is of case-control \\n[[EFO:0001427](http://www.ebi.ac.uk/efo/EFO_0001427)]. For example, if two \\nsamples derive from an individual with 'renal cell carcinoma', one deriving from \\nthe affected tissue and the other from an unaffected tissue, this node can be \\nused to specify whether the sample belongs to the unaffected group (i.e. \\ncontrol) or the affected one (i.e. case). On the other hand, if two samples \\nderived from different probands each, one person being affected and the other \\nunaffected by the condition under study, this node **is not** required. Same \\ncould be applied, for instance, for treated or untreated samples, but not for \\ntreated or untreated individuals.",
            "meta:propertyCurie": "EFO:0000324",
            "additionalProperties": false,
            "uniqueItems": true,
            "minItems": 1,
            "items": {
                "type": "object",
                "title": "Sample status item",
                "description": "One individual sample status of the array.",
                "additionalProperties": false,
                "required": [
                    "caseVsControl",
                    "conditionUnderStudy"
                ],
                "properties": {
                    "caseVsControl": {
                        "type": "string",
                        "title": "Case vs control",
                        "description": "Property that specifies whether the sample is subject to the (usually altered) \\ncondition under study (i.e. case), or part of reference group (i.e. control). \\nTerm chosen from a list of controlled vocabulary (CV). If you cannot find your \\nterm in the CV list, please create an issue at our [metadata GitHub \\nrepository](https://github.com/EbiEga/ega-metadata-schema/issues/new/choose) \\nproposing its addition.",
                        "enum": [
                            "case",
                            "control",
                            "not applicable"
                        ],
                        "meta:enum": {
                            "case": "[PATO:0000460]: Abnormal - A quality inhering in a bearer by virtue of the \\nbearer's deviation from normal or average.",
                            "control": "[PATO:0000461]: Normal - A quality inhering in a bearer by virtue of the \\nbearer's exhibiting no deviation from normal or average.",
                            "not applicable": "[NCIT:C48660]: Determination of a case or control is not relevant for this \\ncondition under study."
                        }
                    },
                    "conditionUnderStudy": {
                        "type": "object",
                        "title": "Sample condition",
                        "description": "One of the primary conditions under study (CUS). For example: treated with \\ncisplatin, sample taken from a fibroadenoma, osteonecrosis, differences in \\nsequencing workflows, etcetera. Notice that the sample may or may not be \\naffected by this condition under study, belonging to the case or control groups \\nrespectively (defined by 'caseVsControl' for each CUS).",
                        "meta:propertyCurie": "NCIT:C161319",
                        "allOf": [
                            {
                                "type": "object",
                                "title": "Ontology term",
                                "description": "This property represents an ontology term (a.k.a. class). It consists on two \\nproperties: the term identifier (termId) and its label (termLabel). This \\nproperty and its structure is inherited across many other elements in the \\nschemas. It is there, when inherited, where the real ontology constraint is put \\nin place (e.g. using 'graphRestriction' keywords). Based on phenopacket's [OntologyClass](https://phenopacket-schema.readthedocs.io/en/latest/ontologyclass.html)",
                                "additionalProperties": false,
                                "required": [
                                    "termId",
                                    "termLabel"
                                ],
                                "properties": {
                                    "termId": {
                                        "type": "string",
                                        "title": "ID of the term",
                                        "description": "The identifier of an ontology term must be in CURIE format (check property \\n'curieGeneralPattern'). Whether a specific term is valid or not according to an \\nontology hierarchy is checked at each specific termId using ontology validation \\nkeywords (e.g. 'graphRestriction').",
                                        "minLength": 1,
                                        "allOf": [
                                            {
                                                "type": "string",
                                                "title": "Compact URI (CURIE) pattern",
                                                "description": "A [W3C Compact URI](https://www.w3.org/TR/curie/) formatted string. A CURIE \\nstring has the structure ``prefix``:``reference``, as defined by the W3C syntax. \\nEven though we do not restrict prefixes, we recommend that the term used as \\n``prefix`` is uniformely resolved. In other words, it is better to use prefixes \\n(e.g. 'ensembl') from identifiers.org.",
                                                "minLength": 1,
                                                "pattern": "^\\w[^:]*:.+$",
                                                "examples": [
                                                    "ensembl:ENSG00000139618",
                                                    "HGNC:11535",
                                                    "data:1026",
                                                    "EFO:0003815"
                                                ]
                                            }
                                        ],
                                        "examples": [
                                            "MONDO:0100096",
                                            "EFO:0003101",
                                            "EFO:0005518",
                                            "EFO:0002944",
                                            "EFO:0003813"
                                        ]
                                    },
                                    "termLabel": {
                                        "type": "string",
                                        "title": "Label of the term",
                                        "description": "The label of a term is the human-readable string associated with the identifier. \\nIt is not required that it matches the label of the termId within the referenced \\nontology, although it should. This is due to the fact that the source of truth \\nwill always be the termId, and not the label, which adds more context.",
                                        "minLength": 1,
                                        "examples": [
                                            "COVID-19",
                                            "Axila skin",
                                            "bone marrow cell",
                                            "astrocyte",
                                            "oligodendrocyte",
                                            "Unknown",
                                            "Unaffected",
                                            "homo sapiens"
                                        ]
                                    }
                                }
                            }
                        ],
                        "properties": {
                            "termId": {
                                "title": "Ontology constraints for this specific termId",
                                "description": "The term should exist within the [Ontology Lookup Service](https://www.ebi.ac.uk/ols/search?q=&groupField=iri&start=0&ontology=hp&ontology=efo&ontology=ordo&ontology=mondo) \\n(OLS). We highly recommend the usage of the following ontologies: Experimental \\nFactor Ontology (EFO), Human Phenotype Ontology (HP), Mondo Disease Ontology \\n(MONDO) and Orphanet Rare Disease Ontology (ORDO).",
                                "examples": [
                                    "MONDO:0021354",
                                    "EFO:1002024",
                                    "MAXO:0000647",
                                    "MONDO:0005081",
                                    "MONDO:0100096"
                                ]
                            }
                        }
                    }
                }
            }
        },
        "sampleRelationships": {
            "type": "array",
            "title": "Sample relationships",
            "description": "Comprises metadata (e.g. Source or Target) of a directional association between \\ntwo entities. This relationships node contains all the possible relationships \\nbetween metadata objects, both outside of (e.g. a viral sample from BioSamples \\nbeing linked to a blood sample within the EGA) and within (e.g. a sample being \\nlinked to a sequencing run) the EGA.",
            "minItems": 1,
            "additionalProperties": false,
            "uniqueItems": true,
            "items": {
                "allOf": [
                    {
                        "type": "object",
                        "title": "EGA Relationships object",
                        "description": "Object containing the base metadata attributes of a relationship object in the \\nEGA. Comprises metadata (e.g. Source or Target) of a directional association \\nbetween two entities. One of the entitis **needs** to be the current instance. \\nFor instance, a study JSON document should not contain relationships between a \\nsample and an individual. Therefore, only one end of the relationship is given: \\nif the source is present, the target is inferred to be the current instance; if \\nthe target is given, then it's the source the one inferred as the current \\ninstance. Examples of common relationships: (1) a sample being referenced in an \\nexperiment; (2) an study being the same as another study at a different archive \\n(e.g. in BioStudies); (3) an individual being the parent of another individual; \\n(4) hundreds of samples being grouped with each other for broad reasons.",
                        "required": [
                            "rType"
                        ],
                        "additionalProperties": false,
                        "properties": {
                            "rType": {
                                "type": "string",
                                "title": "Relationship type",
                                "description": "ID (e.g. sameAs) of the type of the relationship. To be chosen from a controlled \\nvocabulary (CV) list. If you cannot find your term in the CV list, please create \\nan issue at our [metadata GitHub \\nrepository](https://github.com/EbiEga/ega-metadata-schema) proposing its \\naddition.",
                                "enum": [
                                    "referencedBy",
                                    "developsFrom",
                                    "sameAs",
                                    "memberOf",
                                    "groupedWith",
                                    "familyRelationshipWith",
                                    "childOf",
                                    "isAfter",
                                    "publishedIn",
                                    "submittedBy",
                                    "contactOf",
                                    "mainContactOf"
                                ],
                                "meta:enum": {
                                    "referencedBy": "[SIO:000252]",
                                    "developsFrom": "[RO:0002202]",
                                    "sameAs": "[NCIT:C64637]",
                                    "memberOf": "[RO:0002350]",
                                    "groupedWith": "",
                                    "familyRelationshipWith": "[EFO:0004424]",
                                    "childOf": "[GSSO:000728]",
                                    "isAfter": "[SIO:000211]",
                                    "publishedIn": "[EFO:0001796]",
                                    "submittedBy": "[NCIT:C25695]",
                                    "contactOf": "[NCIT:C25461]",
                                    "mainContactOf": ""
                                },
                                "examples": [
                                    "referencedBy"
                                ]
                            },
                            "rSource": {
                                "type": "object",
                                "title": "Source of the relationship",
                                "description": "Object reference of the relationship's source. In other words, the starting \\npoint of the relationship: in 'sample_A developsFrom sample_B' the source is \\n'sample_A'.",
                                "allOf": [
                                    {
                                        "type": "object",
                                        "title": "Relationship's object (either source or target)",
                                        "description": "Node containing metadata (identifiers and the type of reference) of one of the \\nends of the relationship, whether it is the source or the target of the \\nrelationship.",
                                        "additionalProperties": false,
                                        "required": [
                                            "objectId",
                                            "objectType"
                                        ],
                                        "properties": {
                                            "objectId": {
                                                "type": "object",
                                                "title": "Relationship's object's IDs block",
                                                "description": "Node containing the main identifiers of the relationship's object (e.g. alias, \\ncenterName...), inherited from the common definitions \\n(#/definitions/objectCoreId).",
                                                "allOf": [
                                                    {
                                                        "type": "object",
                                                        "title": "Core identifiers of an object",
                                                        "description": "Base definition containing the properties (e.g. Sample's alias) of a minimal \\nidentification layer of an EGA object (e.g. Sample).",
                                                        "additionalProperties": false,
                                                        "properties": {
                                                            "alias": {
                                                                "type": "string",
                                                                "title": "Alias of an object",
                                                                "description": "Submitter designated name (e.g. 'my_sample_J13') for the object (e.g. Sample). \\nThe name must be unique within the submission account (e.g. 'ega-box-79'), since \\nthe aliases and submission accounts are concatenated within our database to \\nobtain the unique alias (e.g. 'ega-box-79::my_sample_J13').",
                                                                "minLength": 1,
                                                                "examples": [
                                                                    "my_sample_J13"
                                                                ]
                                                            },
                                                            "centerName": {
                                                                "type": "string",
                                                                "title": "Center name of the submitter",
                                                                "description": "Center name (e.g. 'EBI-TEST') associated to the submitter. In other words, it is \\nthe acronym of the submitter's account (provided by the HelpDesk team).",
                                                                "minLength": 1,
                                                                "examples": [
                                                                    "EBI-TEST"
                                                                ]
                                                            },
                                                            "egaAccession": {
                                                                "type": "string",
                                                                "title": "EGA's accession of the object",
                                                                "description": "The object accession (i.e. unique identifier) assigned by the archive (EGA). \\nObject accessions can be found in the 'Identifiers' section of the EGA-archive \\nwebsite (https://ega-archive.org/metadata/how-to-use-the-api) and commonly start \\nwith EGA, followed by the distinctive letter of the object and finally the \\nnumeric ID of the instance.",
                                                                "examples": [
                                                                    "EGAN00003245489"
                                                                ]
                                                            },
                                                            "externalAccessions": {
                                                                "type": "array",
                                                                "title": "External accessions array",
                                                                "description": "External accession node to reference objects in other archives (e.g. an already \\nexisting sample at BioSamples).",
                                                                "minItems": 1,
                                                                "additionalProperties": false,
                                                                "uniqueItems": true,
                                                                "items": {
                                                                    "type": "object",
                                                                    "title": "Object External accession",
                                                                    "description": "External accession property defining a reference to an external record in \\nanother resource. For example, a reference to a sequence deposited in NCBI's \\nNucleotide database (e.g. 'https://identifiers.org/nucleotide:T35715.1'); or a \\nsample record in BioSamples (e.g. \\n'https://identifiers.org/biosample:SAMEA7616999').",
                                                                    "additionalProperties": false,
                                                                    "properties": {
                                                                        "objectExternalAccessionIdentifier": {
                                                                            "type": "object",
                                                                            "title": "Identifier of the external accession",
                                                                            "description": "Unique identifier of an external record. Its 'termId' (e.g. \\n'biosample:SAMEA7616999', 'pubmed:30962759', 'biostudies:S-EPMC3314381', etc.) \\nshall follow CURIE format of ``prefix``:``accession``, where: (1) the prefix \\n(e.g. 'biosample') is unique and assigned to the external resource at \\nidentifiers.org; (2) and the unique accession of the object (e.g. SAMEA7616999) \\nshould resolve to an existing record within the resource. If in doubt, use \\nidentifiers.org to resolve your external accession: 'https://identifiers.org/' + \\n'termId', e.g. 'https://identifiers.org/biosample:SAMEA7616999'",
                                                                            "allOf": [
                                                                                {
                                                                                    "type": "object",
                                                                                    "title": "Ontology term",
                                                                                    "description": "This property represents an ontology term (a.k.a. class). It consists on two \\nproperties: the term identifier (termId) and its label (termLabel). This \\nproperty and its structure is inherited across many other elements in the \\nschemas. It is there, when inherited, where the real ontology constraint is put \\nin place (e.g. using 'graphRestriction' keywords). Based on phenopacket's [OntologyClass](https://phenopacket-schema.readthedocs.io/en/latest/ontologyclass.html)",
                                                                                    "additionalProperties": false,
                                                                                    "required": [
                                                                                        "termId",
                                                                                        "termLabel"
                                                                                    ],
                                                                                    "properties": {
                                                                                        "termId": {
                                                                                            "type": "string",
                                                                                            "title": "ID of the term",
                                                                                            "description": "The identifier of an ontology term must be in CURIE format (check property \\n'curieGeneralPattern'). Whether a specific term is valid or not according to an \\nontology hierarchy is checked at each specific termId using ontology validation \\nkeywords (e.g. 'graphRestriction').",
                                                                                            "minLength": 1,
                                                                                            "allOf": [
                                                                                                {
                                                                                                    "type": "string",
                                                                                                    "title": "Compact URI (CURIE) pattern",
                                                                                                    "description": "A [W3C Compact URI](https://www.w3.org/TR/curie/) formatted string. A CURIE \\nstring has the structure ``prefix``:``reference``, as defined by the W3C syntax. \\nEven though we do not restrict prefixes, we recommend that the term used as \\n``prefix`` is uniformely resolved. In other words, it is better to use prefixes \\n(e.g. 'ensembl') from identifiers.org.",
                                                                                                    "minLength": 1,
                                                                                                    "pattern": "^\\w[^:]*:.+$",
                                                                                                    "examples": [
                                                                                                        "ensembl:ENSG00000139618",
                                                                                                        "HGNC:11535",
                                                                                                        "data:1026",
                                                                                                        "EFO:0003815"
                                                                                                    ]
                                                                                                }
                                                                                            ],
                                                                                            "examples": [
                                                                                                "MONDO:0100096",
                                                                                                "EFO:0003101",
                                                                                                "EFO:0005518",
                                                                                                "EFO:0002944",
                                                                                                "EFO:0003813"
                                                                                            ]
                                                                                        },
                                                                                        "termLabel": {
                                                                                            "type": "string",
                                                                                            "title": "Label of the term",
                                                                                            "description": "The label of a term is the human-readable string associated with the identifier. \\nIt is not required that it matches the label of the termId within the referenced \\nontology, although it should. This is due to the fact that the source of truth \\nwill always be the termId, and not the label, which adds more context.",
                                                                                            "minLength": 1,
                                                                                            "examples": [
                                                                                                "COVID-19",
                                                                                                "Axila skin",
                                                                                                "bone marrow cell",
                                                                                                "astrocyte",
                                                                                                "oligodendrocyte",
                                                                                                "Unknown",
                                                                                                "Unaffected",
                                                                                                "homo sapiens"
                                                                                            ]
                                                                                        }
                                                                                    }
                                                                                }
                                                                            ]
                                                                        },
                                                                        "objectExternalAccessionURI": {
                                                                            "type": "string",
                                                                            "title": "URI of the external accession",
                                                                            "description": "Full or partial URL/URI of the external accession, for systems to resolve it. \\nShould only be used in case identifiers.org does not contain a namespace for the \\nrequired resource or the mapping to the URI from its identifier is faulty.",
                                                                            "allOf": [
                                                                                {
                                                                                    "type": "string",
                                                                                    "title": "URL/URI pattern",
                                                                                    "description": "This object exists to hold the pattern that a URL or URI should have. For it to \\nbe referenced elsewhere within this (or other) JSON schema.",
                                                                                    "pattern": "^((http|https)://)(www.)?[a-zA-Z0-9@:%._\\+~#?&//=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%._\\+~#?&//=]*)$",
                                                                                    "examples": [
                                                                                        "https://phenopacket-schema.readthedocs.io/en/latest/externalreference.html",
                                                                                        "https://www.ebi.ac.uk/arrayexpress/experiments/E-MEXP-1712/",
                                                                                        "https://www.geeksforgeeks.org/check-if-an-url-is-valid-or-not-using-regular-expression/"
                                                                                    ]
                                                                                }
                                                                            ],
                                                                            "examples": [
                                                                                "https://www.ebi.ac.uk/biosamples/samples/SAMN11716999",
                                                                                "https://pubmed.ncbi.nlm.nih.gov/19491253",
                                                                                "https://www.ebi.ac.uk/arrayexpress/experiments/E-MEXP-1712/"
                                                                            ]
                                                                        },
                                                                        "objectExternalAccessionDescription": {
                                                                            "type": [
                                                                                "string",
                                                                                "number"
                                                                            ],
                                                                            "title": "Description of the external accession",
                                                                            "description": "Optional description of the external accession, used to add context to the \\nidentifier if applicable.",
                                                                            "examples": [
                                                                                "taken from biosample temporarily",
                                                                                "Ensembl's part of the accessions",
                                                                                "first",
                                                                                2,
                                                                                "Recurrent Erythema Nodosum in a Child with a SHOC2 Gene Mutation"
                                                                            ]
                                                                        }
                                                                    },
                                                                    "anyOf": [
                                                                        {
                                                                            "title": "Either the identifier is needed",
                                                                            "required": [
                                                                                "objectExternalAccessionIdentifier"
                                                                            ]
                                                                        },
                                                                        {
                                                                            "title": "Or the reference is needed",
                                                                            "required": [
                                                                                "objectExternalAccessionURI"
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            }
                                                        },
                                                        "anyOf": [
                                                            {
                                                                "title": "Check core IDs: combination of Alias and Center name",
                                                                "required": [
                                                                    "alias",
                                                                    "centerName"
                                                                ]
                                                            },
                                                            {
                                                                "title": "Check core IDs: EGA accession ID",
                                                                "required": [
                                                                    "egaAccession"
                                                                ]
                                                            },
                                                            {
                                                                "title": "Check core IDs: external accessions",
                                                                "required": [
                                                                    "externalAccessions"
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ]
                                            },
                                            "objectType": {
                                                "type": "string",
                                                "title": "Type of the relationship's object",
                                                "description": "Type of the relationship's object, chosen from a list of CV (e.g. experiment, \\ndataset, externalURL...). Both the source or target types can be: (1) the object \\ntag of one of EGA's object (e.g. file, sample...); (2) an 'externalAccession'; \\n(3) or an 'externalURL'. Term chosen from a list of controlled vocabulary (CV). \\nIf you cannot find your term in the CV list, please create an issue at our \\n[metadata GitHub repository](https://github.com/EbiEga/ega-metadata-schema) \\nproposing its addition.",
                                                "enum": [
                                                    "experiment",
                                                    "study",
                                                    "sample",
                                                    "individual",
                                                    "submission",
                                                    "assay",
                                                    "dataset",
                                                    "analysis",
                                                    "policy",
                                                    "DAC",
                                                    "protocol",
                                                    "externalAccession",
                                                    "externalURL"
                                                ],
                                                "meta:enum": {
                                                    "experiment": "Contains information about the experimental design of the sequencing",
                                                    "study": "Information about the study",
                                                    "sample": "Information about the used samples",
                                                    "individual": "Information about the participants (i.e. humans) of the study",
                                                    "submission": "Information about the submission actions",
                                                    "assay": "Contains information about the specific assays (either sequencing or array \\nassays) from the experiment",
                                                    "dataset": "Contains the collection of assay/analysis data files to be subject to controlled \\naccess",
                                                    "analysis": "Contains the analysis metadata and data files",
                                                    "policy": "Contains information related to the Data Access Agreement (DAA) the dataset is \\nsubject to",
                                                    "DAC": "Contains information about the Data Access Committee (DAC)",
                                                    "protocol": "Contains information about a planned process.",
                                                    "externalAccession": "An external accession among the ones Entrez (NCBI's text search) contemplates \\n(search for the terms here: \\nhttps://www.ncbi.nlm.nih.gov/entrez/eutils/einfo.fcgi?)",
                                                    "externalURL": "An external URL resource, of any type"
                                                },
                                                "examples": [
                                                    "sample"
                                                ]
                                            }
                                        },
                                        "allOf": [
                                            {
                                                "type": "object",
                                                "title": "Check that the objectId's accession pattern and objectType match",
                                                "description": "This object exists with the only purpose of being a reference as a pattern check \\nof a given objectId and objectType. The constraint consists in asserting that, \\nif the object identifier is an EGA accession, its pattern matches the object \\ntype (e.g. if objectType is 'sample', its EGA accession needs to match \\n'^EGAN[0-9]{11}$')",
                                                "anyOf": [
                                                    {
                                                        "title": "Alias and Centername: objectId and objectType check",
                                                        "description": "A check that ensures that the alias and centername are given as the objectType. \\nSince the alias and centername cannot be checked for specific objectTypes (i.e. \\neach can name their objects in different ways), this block exists here just so \\nthat this option is allowed.",
                                                        "properties": {
                                                            "objectId": {
                                                                "required": [
                                                                    "alias",
                                                                    "centerName"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "External accession: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'externalAccession' is given as the objectType, \\nthe corresponding node exists within objectId",
                                                        "properties": {
                                                            "objectId": {
                                                                "required": [
                                                                    "externalAccessions"
                                                                ]
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "externalAccession"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Experiment: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'experiment' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA experiment's ID (EGAX...)",
                                                                        "pattern": "^EGAX[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAX00002189113"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "experiment"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Study: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'study' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA study's ID (EGAS...)",
                                                                        "pattern": "^EGAS[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAS00001004508"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "study"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Sample: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'sample' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA sample's ID (EGAN...)",
                                                                        "pattern": "^EGAN[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAN00003245489"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "sample"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Submission: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'submission' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA submission's ID (EGAB...)",
                                                                        "pattern": "^EGAB[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAB00001001831"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "submission"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Assay: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'assay' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA assay's ID (EGAR...)",
                                                                        "pattern": "^EGAR[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAR00001314547"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "assay"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Dataset: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'dataset' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA dataset's ID (EGAD...)",
                                                                        "pattern": "^EGAD[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAD00001004170"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "dataset"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Analysis: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'analysis' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA analysis's ID (EGAZ...)",
                                                                        "pattern": "^EGAZ[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAZ00001004170"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "analysis"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Policy: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'policy' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA policy's ID (EGAP...)",
                                                                        "pattern": "^EGAP[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAP00001001831"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "policy"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "DAC: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'DAC' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA DAC's ID (EGAC...)",
                                                                        "pattern": "^EGAC[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAC00001000908"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "DAC"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Individual: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'individual' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA Individual's ID (EGAI...)",
                                                                        "pattern": "^EGAI[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAI00001159712"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "individual"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Protocol: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'protocol' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA protocol's ID (EGAO...)",
                                                                        "pattern": "^EGAO[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAO00001159483"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "protocol"
                                                                ]
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            "rTarget": {
                                "type": "object",
                                "title": "Target of the relationship",
                                "description": "Object reference of the relationship's target. In other words, the ending point \\nof the relationship: in 'sample_A developsFrom sample_B' the target is \\n'sample_B'.",
                                "allOf": [
                                    {
                                        "type": "object",
                                        "title": "Relationship's object (either source or target)",
                                        "description": "Node containing metadata (identifiers and the type of reference) of one of the \\nends of the relationship, whether it is the source or the target of the \\nrelationship.",
                                        "additionalProperties": false,
                                        "required": [
                                            "objectId",
                                            "objectType"
                                        ],
                                        "properties": {
                                            "objectId": {
                                                "type": "object",
                                                "title": "Relationship's object's IDs block",
                                                "description": "Node containing the main identifiers of the relationship's object (e.g. alias, \\ncenterName...), inherited from the common definitions \\n(#/definitions/objectCoreId).",
                                                "allOf": [
                                                    {
                                                        "type": "object",
                                                        "title": "Core identifiers of an object",
                                                        "description": "Base definition containing the properties (e.g. Sample's alias) of a minimal \\nidentification layer of an EGA object (e.g. Sample).",
                                                        "additionalProperties": false,
                                                        "properties": {
                                                            "alias": {
                                                                "type": "string",
                                                                "title": "Alias of an object",
                                                                "description": "Submitter designated name (e.g. 'my_sample_J13') for the object (e.g. Sample). \\nThe name must be unique within the submission account (e.g. 'ega-box-79'), since \\nthe aliases and submission accounts are concatenated within our database to \\nobtain the unique alias (e.g. 'ega-box-79::my_sample_J13').",
                                                                "minLength": 1,
                                                                "examples": [
                                                                    "my_sample_J13"
                                                                ]
                                                            },
                                                            "centerName": {
                                                                "type": "string",
                                                                "title": "Center name of the submitter",
                                                                "description": "Center name (e.g. 'EBI-TEST') associated to the submitter. In other words, it is \\nthe acronym of the submitter's account (provided by the HelpDesk team).",
                                                                "minLength": 1,
                                                                "examples": [
                                                                    "EBI-TEST"
                                                                ]
                                                            },
                                                            "egaAccession": {
                                                                "type": "string",
                                                                "title": "EGA's accession of the object",
                                                                "description": "The object accession (i.e. unique identifier) assigned by the archive (EGA). \\nObject accessions can be found in the 'Identifiers' section of the EGA-archive \\nwebsite (https://ega-archive.org/metadata/how-to-use-the-api) and commonly start \\nwith EGA, followed by the distinctive letter of the object and finally the \\nnumeric ID of the instance.",
                                                                "examples": [
                                                                    "EGAN00003245489"
                                                                ]
                                                            },
                                                            "externalAccessions": {
                                                                "type": "array",
                                                                "title": "External accessions array",
                                                                "description": "External accession node to reference objects in other archives (e.g. an already \\nexisting sample at BioSamples).",
                                                                "minItems": 1,
                                                                "additionalProperties": false,
                                                                "uniqueItems": true,
                                                                "items": {
                                                                    "type": "object",
                                                                    "title": "Object External accession",
                                                                    "description": "External accession property defining a reference to an external record in \\nanother resource. For example, a reference to a sequence deposited in NCBI's \\nNucleotide database (e.g. 'https://identifiers.org/nucleotide:T35715.1'); or a \\nsample record in BioSamples (e.g. \\n'https://identifiers.org/biosample:SAMEA7616999').",
                                                                    "additionalProperties": false,
                                                                    "properties": {
                                                                        "objectExternalAccessionIdentifier": {
                                                                            "type": "object",
                                                                            "title": "Identifier of the external accession",
                                                                            "description": "Unique identifier of an external record. Its 'termId' (e.g. \\n'biosample:SAMEA7616999', 'pubmed:30962759', 'biostudies:S-EPMC3314381', etc.) \\nshall follow CURIE format of ``prefix``:``accession``, where: (1) the prefix \\n(e.g. 'biosample') is unique and assigned to the external resource at \\nidentifiers.org; (2) and the unique accession of the object (e.g. SAMEA7616999) \\nshould resolve to an existing record within the resource. If in doubt, use \\nidentifiers.org to resolve your external accession: 'https://identifiers.org/' + \\n'termId', e.g. 'https://identifiers.org/biosample:SAMEA7616999'",
                                                                            "allOf": [
                                                                                {
                                                                                    "type": "object",
                                                                                    "title": "Ontology term",
                                                                                    "description": "This property represents an ontology term (a.k.a. class). It consists on two \\nproperties: the term identifier (termId) and its label (termLabel). This \\nproperty and its structure is inherited across many other elements in the \\nschemas. It is there, when inherited, where the real ontology constraint is put \\nin place (e.g. using 'graphRestriction' keywords). Based on phenopacket's [OntologyClass](https://phenopacket-schema.readthedocs.io/en/latest/ontologyclass.html)",
                                                                                    "additionalProperties": false,
                                                                                    "required": [
                                                                                        "termId",
                                                                                        "termLabel"
                                                                                    ],
                                                                                    "properties": {
                                                                                        "termId": {
                                                                                            "type": "string",
                                                                                            "title": "ID of the term",
                                                                                            "description": "The identifier of an ontology term must be in CURIE format (check property \\n'curieGeneralPattern'). Whether a specific term is valid or not according to an \\nontology hierarchy is checked at each specific termId using ontology validation \\nkeywords (e.g. 'graphRestriction').",
                                                                                            "minLength": 1,
                                                                                            "allOf": [
                                                                                                {
                                                                                                    "type": "string",
                                                                                                    "title": "Compact URI (CURIE) pattern",
                                                                                                    "description": "A [W3C Compact URI](https://www.w3.org/TR/curie/) formatted string. A CURIE \\nstring has the structure ``prefix``:``reference``, as defined by the W3C syntax. \\nEven though we do not restrict prefixes, we recommend that the term used as \\n``prefix`` is uniformely resolved. In other words, it is better to use prefixes \\n(e.g. 'ensembl') from identifiers.org.",
                                                                                                    "minLength": 1,
                                                                                                    "pattern": "^\\w[^:]*:.+$",
                                                                                                    "examples": [
                                                                                                        "ensembl:ENSG00000139618",
                                                                                                        "HGNC:11535",
                                                                                                        "data:1026",
                                                                                                        "EFO:0003815"
                                                                                                    ]
                                                                                                }
                                                                                            ],
                                                                                            "examples": [
                                                                                                "MONDO:0100096",
                                                                                                "EFO:0003101",
                                                                                                "EFO:0005518",
                                                                                                "EFO:0002944",
                                                                                                "EFO:0003813"
                                                                                            ]
                                                                                        },
                                                                                        "termLabel": {
                                                                                            "type": "string",
                                                                                            "title": "Label of the term",
                                                                                            "description": "The label of a term is the human-readable string associated with the identifier. \\nIt is not required that it matches the label of the termId within the referenced \\nontology, although it should. This is due to the fact that the source of truth \\nwill always be the termId, and not the label, which adds more context.",
                                                                                            "minLength": 1,
                                                                                            "examples": [
                                                                                                "COVID-19",
                                                                                                "Axila skin",
                                                                                                "bone marrow cell",
                                                                                                "astrocyte",
                                                                                                "oligodendrocyte",
                                                                                                "Unknown",
                                                                                                "Unaffected",
                                                                                                "homo sapiens"
                                                                                            ]
                                                                                        }
                                                                                    }
                                                                                }
                                                                            ]
                                                                        },
                                                                        "objectExternalAccessionURI": {
                                                                            "type": "string",
                                                                            "title": "URI of the external accession",
                                                                            "description": "Full or partial URL/URI of the external accession, for systems to resolve it. \\nShould only be used in case identifiers.org does not contain a namespace for the \\nrequired resource or the mapping to the URI from its identifier is faulty.",
                                                                            "allOf": [
                                                                                {
                                                                                    "type": "string",
                                                                                    "title": "URL/URI pattern",
                                                                                    "description": "This object exists to hold the pattern that a URL or URI should have. For it to \\nbe referenced elsewhere within this (or other) JSON schema.",
                                                                                    "pattern": "^((http|https)://)(www.)?[a-zA-Z0-9@:%._\\+~#?&//=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%._\\+~#?&//=]*)$",
                                                                                    "examples": [
                                                                                        "https://phenopacket-schema.readthedocs.io/en/latest/externalreference.html",
                                                                                        "https://www.ebi.ac.uk/arrayexpress/experiments/E-MEXP-1712/",
                                                                                        "https://www.geeksforgeeks.org/check-if-an-url-is-valid-or-not-using-regular-expression/"
                                                                                    ]
                                                                                }
                                                                            ],
                                                                            "examples": [
                                                                                "https://www.ebi.ac.uk/biosamples/samples/SAMN11716999",
                                                                                "https://pubmed.ncbi.nlm.nih.gov/19491253",
                                                                                "https://www.ebi.ac.uk/arrayexpress/experiments/E-MEXP-1712/"
                                                                            ]
                                                                        },
                                                                        "objectExternalAccessionDescription": {
                                                                            "type": [
                                                                                "string",
                                                                                "number"
                                                                            ],
                                                                            "title": "Description of the external accession",
                                                                            "description": "Optional description of the external accession, used to add context to the \\nidentifier if applicable.",
                                                                            "examples": [
                                                                                "taken from biosample temporarily",
                                                                                "Ensembl's part of the accessions",
                                                                                "first",
                                                                                2,
                                                                                "Recurrent Erythema Nodosum in a Child with a SHOC2 Gene Mutation"
                                                                            ]
                                                                        }
                                                                    },
                                                                    "anyOf": [
                                                                        {
                                                                            "title": "Either the identifier is needed",
                                                                            "required": [
                                                                                "objectExternalAccessionIdentifier"
                                                                            ]
                                                                        },
                                                                        {
                                                                            "title": "Or the reference is needed",
                                                                            "required": [
                                                                                "objectExternalAccessionURI"
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            }
                                                        },
                                                        "anyOf": [
                                                            {
                                                                "title": "Check core IDs: combination of Alias and Center name",
                                                                "required": [
                                                                    "alias",
                                                                    "centerName"
                                                                ]
                                                            },
                                                            {
                                                                "title": "Check core IDs: EGA accession ID",
                                                                "required": [
                                                                    "egaAccession"
                                                                ]
                                                            },
                                                            {
                                                                "title": "Check core IDs: external accessions",
                                                                "required": [
                                                                    "externalAccessions"
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ]
                                            },
                                            "objectType": {
                                                "type": "string",
                                                "title": "Type of the relationship's object",
                                                "description": "Type of the relationship's object, chosen from a list of CV (e.g. experiment, \\ndataset, externalURL...). Both the source or target types can be: (1) the object \\ntag of one of EGA's object (e.g. file, sample...); (2) an 'externalAccession'; \\n(3) or an 'externalURL'. Term chosen from a list of controlled vocabulary (CV). \\nIf you cannot find your term in the CV list, please create an issue at our \\n[metadata GitHub repository](https://github.com/EbiEga/ega-metadata-schema) \\nproposing its addition.",
                                                "enum": [
                                                    "experiment",
                                                    "study",
                                                    "sample",
                                                    "individual",
                                                    "submission",
                                                    "assay",
                                                    "dataset",
                                                    "analysis",
                                                    "policy",
                                                    "DAC",
                                                    "protocol",
                                                    "externalAccession",
                                                    "externalURL"
                                                ],
                                                "meta:enum": {
                                                    "experiment": "Contains information about the experimental design of the sequencing",
                                                    "study": "Information about the study",
                                                    "sample": "Information about the used samples",
                                                    "individual": "Information about the participants (i.e. humans) of the study",
                                                    "submission": "Information about the submission actions",
                                                    "assay": "Contains information about the specific assays (either sequencing or array \\nassays) from the experiment",
                                                    "dataset": "Contains the collection of assay/analysis data files to be subject to controlled \\naccess",
                                                    "analysis": "Contains the analysis metadata and data files",
                                                    "policy": "Contains information related to the Data Access Agreement (DAA) the dataset is \\nsubject to",
                                                    "DAC": "Contains information about the Data Access Committee (DAC)",
                                                    "protocol": "Contains information about a planned process.",
                                                    "externalAccession": "An external accession among the ones Entrez (NCBI's text search) contemplates \\n(search for the terms here: \\nhttps://www.ncbi.nlm.nih.gov/entrez/eutils/einfo.fcgi?)",
                                                    "externalURL": "An external URL resource, of any type"
                                                },
                                                "examples": [
                                                    "sample"
                                                ]
                                            }
                                        },
                                        "allOf": [
                                            {
                                                "type": "object",
                                                "title": "Check that the objectId's accession pattern and objectType match",
                                                "description": "This object exists with the only purpose of being a reference as a pattern check \\nof a given objectId and objectType. The constraint consists in asserting that, \\nif the object identifier is an EGA accession, its pattern matches the object \\ntype (e.g. if objectType is 'sample', its EGA accession needs to match \\n'^EGAN[0-9]{11}$')",
                                                "anyOf": [
                                                    {
                                                        "title": "Alias and Centername: objectId and objectType check",
                                                        "description": "A check that ensures that the alias and centername are given as the objectType. \\nSince the alias and centername cannot be checked for specific objectTypes (i.e. \\neach can name their objects in different ways), this block exists here just so \\nthat this option is allowed.",
                                                        "properties": {
                                                            "objectId": {
                                                                "required": [
                                                                    "alias",
                                                                    "centerName"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "External accession: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'externalAccession' is given as the objectType, \\nthe corresponding node exists within objectId",
                                                        "properties": {
                                                            "objectId": {
                                                                "required": [
                                                                    "externalAccessions"
                                                                ]
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "externalAccession"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Experiment: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'experiment' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA experiment's ID (EGAX...)",
                                                                        "pattern": "^EGAX[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAX00002189113"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "experiment"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Study: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'study' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA study's ID (EGAS...)",
                                                                        "pattern": "^EGAS[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAS00001004508"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "study"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Sample: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'sample' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA sample's ID (EGAN...)",
                                                                        "pattern": "^EGAN[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAN00003245489"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "sample"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Submission: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'submission' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA submission's ID (EGAB...)",
                                                                        "pattern": "^EGAB[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAB00001001831"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "submission"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Assay: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'assay' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA assay's ID (EGAR...)",
                                                                        "pattern": "^EGAR[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAR00001314547"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "assay"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Dataset: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'dataset' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA dataset's ID (EGAD...)",
                                                                        "pattern": "^EGAD[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAD00001004170"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "dataset"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Analysis: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'analysis' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA analysis's ID (EGAZ...)",
                                                                        "pattern": "^EGAZ[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAZ00001004170"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "analysis"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Policy: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'policy' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA policy's ID (EGAP...)",
                                                                        "pattern": "^EGAP[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAP00001001831"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "policy"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "DAC: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'DAC' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA DAC's ID (EGAC...)",
                                                                        "pattern": "^EGAC[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAC00001000908"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "DAC"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Individual: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'individual' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA Individual's ID (EGAI...)",
                                                                        "pattern": "^EGAI[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAI00001159712"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "individual"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Protocol: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'protocol' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA protocol's ID (EGAO...)",
                                                                        "pattern": "^EGAO[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAO00001159483"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "protocol"
                                                                ]
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            "rLabel": {
                                "type": "string",
                                "title": "Custom label of the relationship",
                                "description": "Custom free-form label of the relationship, used to add extra details of the \\nrelationship if needed.",
                                "minLength": 1,
                                "examples": [
                                    "Source individual is the third child of the target individual",
                                    "Grouped samples by colour of the medium",
                                    "Both samples are the same because of an error in the submission at..."
                                ]
                            }
                        },
                        "oneOf": [
                            {
                                "title": "The source is given (i.e. the target is inferred as the current instance)",
                                "required": [
                                    "rSource"
                                ]
                            },
                            {
                                "title": "The target is given (i.e. the source is inferred as the current instance)",
                                "required": [
                                    "rTarget"
                                ]
                            }
                        ]
                    },
                    {
                        "title": "Relationship constraints for a sample",
                        "description": "Not all possible relationships between objects are allowed (e.g. an individual \\nshould not be linked to a policy). This node contains the restricted \\nrelationships that can be given for a sample.",
                        "anyOf": [
                            {
                                "title": "Allowed relationships of type referencedBy (main ones)",
                                "allOf": [
                                    {
                                        "type": "object",
                                        "title": "Relationship type: referencedBy",
                                        "description": "Node to be used as a relationship type for relationship contraints.",
                                        "required": [
                                            "rType"
                                        ],
                                        "properties": {
                                            "rType": {
                                                "const": "referencedBy"
                                            }
                                        }
                                    },
                                    {
                                        "anyOf": [
                                            {
                                                "type": "object",
                                                "title": "Relationship target: analysis",
                                                "description": "Node to be used as an object type for relationship contraints.",
                                                "required": [
                                                    "rTarget"
                                                ],
                                                "properties": {
                                                    "rTarget": {
                                                        "properties": {
                                                            "objectType": {
                                                                "const": "analysis"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship target: assay",
                                                "description": "Node to be used as an object type for relationship contraints.",
                                                "required": [
                                                    "rTarget"
                                                ],
                                                "properties": {
                                                    "rTarget": {
                                                        "properties": {
                                                            "objectType": {
                                                                "const": "assay"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship source: submission",
                                                "description": "Node to be used as an object type for relationship contraints.",
                                                "required": [
                                                    "rSource"
                                                ],
                                                "properties": {
                                                    "rSource": {
                                                        "properties": {
                                                            "objectType": {
                                                                "const": "submission"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship source: protocol",
                                                "description": "Node to be used as an object type for relationship contraints.",
                                                "required": [
                                                    "rSource"
                                                ],
                                                "properties": {
                                                    "rSource": {
                                                        "properties": {
                                                            "objectType": {
                                                                "const": "protocol"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship target: experiment",
                                                "description": "Node to be used as an object type for relationship contraints.",
                                                "required": [
                                                    "rTarget"
                                                ],
                                                "properties": {
                                                    "rTarget": {
                                                        "properties": {
                                                            "objectType": {
                                                                "const": "experiment"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship source: individual",
                                                "description": "Node to be used as an object type for relationship contraints.",
                                                "required": [
                                                    "rSource"
                                                ],
                                                "properties": {
                                                    "rSource": {
                                                        "properties": {
                                                            "objectType": {
                                                                "const": "individual"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "title": "Allowed relationships of type groupedWith, sameAs, developsFrom, memberOf \\n(optional ones)",
                                "allOf": [
                                    {
                                        "anyOf": [
                                            {
                                                "type": "object",
                                                "title": "Relationship type: groupedWith",
                                                "description": "Node to be used as a relationship type for relationship contraints.",
                                                "required": [
                                                    "rType"
                                                ],
                                                "properties": {
                                                    "rType": {
                                                        "const": "groupedWith"
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship type: sameAs",
                                                "description": "Node to be used as a relationship type for relationship contraints.",
                                                "required": [
                                                    "rType"
                                                ],
                                                "properties": {
                                                    "rType": {
                                                        "const": "sameAs"
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship type: developsFrom",
                                                "description": "Node to be used as a relationship type for relationship contraints.",
                                                "required": [
                                                    "rType"
                                                ],
                                                "properties": {
                                                    "rType": {
                                                        "const": "developsFrom"
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship type: memberOf",
                                                "description": "Node to be used as a relationship type for relationship contraints.",
                                                "required": [
                                                    "rType"
                                                ],
                                                "properties": {
                                                    "rType": {
                                                        "const": "memberOf"
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        "anyOf": [
                                            {
                                                "type": "object",
                                                "title": "Relationship source: sample",
                                                "description": "Node to be used as an object type for relationship contraints.",
                                                "required": [
                                                    "rSource"
                                                ],
                                                "properties": {
                                                    "rSource": {
                                                        "properties": {
                                                            "objectType": {
                                                                "const": "sample"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship target: sample",
                                                "description": "Node to be used as an object type for relationship contraints.",
                                                "required": [
                                                    "rTarget"
                                                ],
                                                "properties": {
                                                    "rTarget": {
                                                        "properties": {
                                                            "objectType": {
                                                                "const": "sample"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "title": "Relationships of external accessions and URLs (optional ones)",
                                "description": "Almost any relationship is imaginable with external accessions and URLs.",
                                "allOf": [
                                    {
                                        "anyOf": [
                                            {
                                                "type": "object",
                                                "title": "Relationship type: childOf",
                                                "description": "Node to be used as a relationship type for relationship contraints.",
                                                "required": [
                                                    "rType"
                                                ],
                                                "properties": {
                                                    "rType": {
                                                        "const": "childOf"
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship type: familyRelationshipWith",
                                                "description": "Node to be used as a relationship type for relationship contraints.",
                                                "required": [
                                                    "rType"
                                                ],
                                                "properties": {
                                                    "rType": {
                                                        "const": "familyRelationshipWith"
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship type: groupedWith",
                                                "description": "Node to be used as a relationship type for relationship contraints.",
                                                "required": [
                                                    "rType"
                                                ],
                                                "properties": {
                                                    "rType": {
                                                        "const": "groupedWith"
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship type: sameAs",
                                                "description": "Node to be used as a relationship type for relationship contraints.",
                                                "required": [
                                                    "rType"
                                                ],
                                                "properties": {
                                                    "rType": {
                                                        "const": "sameAs"
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship type: referencedBy",
                                                "description": "Node to be used as a relationship type for relationship contraints.",
                                                "required": [
                                                    "rType"
                                                ],
                                                "properties": {
                                                    "rType": {
                                                        "const": "referencedBy"
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship type: developsFrom",
                                                "description": "Node to be used as a relationship type for relationship contraints.",
                                                "required": [
                                                    "rType"
                                                ],
                                                "properties": {
                                                    "rType": {
                                                        "const": "developsFrom"
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship type: memberOf",
                                                "description": "Node to be used as a relationship type for relationship contraints.",
                                                "required": [
                                                    "rType"
                                                ],
                                                "properties": {
                                                    "rType": {
                                                        "const": "memberOf"
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship type: isAfter",
                                                "description": "Node to be used as a relationship type for relationship contraints.",
                                                "required": [
                                                    "rType"
                                                ],
                                                "properties": {
                                                    "rType": {
                                                        "const": "isAfter"
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        "anyOf": [
                                            {
                                                "type": "object",
                                                "title": "Relationship source: externalAccession",
                                                "description": "Node to be used as an object type for relationship contraints.",
                                                "required": [
                                                    "rSource"
                                                ],
                                                "properties": {
                                                    "rSource": {
                                                        "properties": {
                                                            "objectType": {
                                                                "const": "externalAccession"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship source: externalURL",
                                                "description": "Node to be used as an object type for relationship contraints.",
                                                "required": [
                                                    "rSource"
                                                ],
                                                "properties": {
                                                    "rSource": {
                                                        "properties": {
                                                            "objectType": {
                                                                "const": "externalURL"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship target: externalAccession",
                                                "description": "Node to be used as an object type for relationship contraints.",
                                                "required": [
                                                    "rTarget"
                                                ],
                                                "properties": {
                                                    "rTarget": {
                                                        "properties": {
                                                            "objectType": {
                                                                "const": "externalAccession"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship target: externalURL",
                                                "description": "Node to be used as an object type for relationship contraints.",
                                                "required": [
                                                    "rTarget"
                                                ],
                                                "properties": {
                                                    "rTarget": {
                                                        "properties": {
                                                            "objectType": {
                                                                "const": "externalURL"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "contains": {
                "title": "Relationship constraint of 1 submission as source",
                "description": "This node defines a relationship item containing a 'submission' as a source and \\nof type 'referencedBy'. This node can be used with the keyword 'contains' at \\neach relationship array of all objects (but submission), in order to assert that \\nall objects have a submission object (EGAB...) linked to them.",
                "allOf": [
                    {
                        "type": "object",
                        "title": "Relationship type: referencedBy",
                        "description": "Node to be used as a relationship type for relationship contraints.",
                        "required": [
                            "rType"
                        ],
                        "properties": {
                            "rType": {
                                "const": "referencedBy"
                            }
                        }
                    },
                    {
                        "type": "object",
                        "title": "Relationship source: submission",
                        "description": "Node to be used as an object type for relationship contraints.",
                        "required": [
                            "rSource"
                        ],
                        "properties": {
                            "rSource": {
                                "properties": {
                                    "objectType": {
                                        "const": "submission"
                                    }
                                }
                            }
                        }
                    }
                ]
            }
        },
        "sampleAttributes": {
            "type": "array",
            "title": "Sample custom attributes",
            "description": "Custom attributes of a sample: reusable attributes to encode tag-value pairs \\n(e.g. Tag being 'age' and its Value '30') with optional units (e.g. 'years'). \\nIts properties are inherited from the common-definitions.json schema.",
            "minItems": 1,
            "additionalProperties": false,
            "uniqueItems": true,
            "items": {
                "type": "object",
                "title": "Custom attribute of an object",
                "description": "Reusable attributes to encode tag-value pairs (e.g. Tag being 'Age' and its \\nValue '40') with optional units (e.g. 'years').",
                "required": [
                    "tag",
                    "value"
                ],
                "additionalProperties": false,
                "properties": {
                    "tag": {
                        "type": "string",
                        "title": "Tag of the custom attribute",
                        "description": "The name of the attribute (e.g. 'Age').",
                        "minLength": 1,
                        "examples": [
                            "age"
                        ]
                    },
                    "value": {
                        "type": [
                            "string",
                            "number"
                        ],
                        "title": "Value of the custom attribute",
                        "description": "The value of the attribute (e.g. '40').",
                        "examples": [
                            "smoker",
                            40
                        ]
                    },
                    "units": {
                        "type": "string",
                        "title": "Units of the custom attribute",
                        "description": "The optional units of the attribute (e.g. 'years').",
                        "minLength": 1,
                        "examples": [
                            "years"
                        ]
                    }
                }
            }
        }
    }
}
@endjson
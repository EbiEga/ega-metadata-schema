@startjson
#highlight "properties" / "schemaDescriptor" / "properties" / "objectType" / "enum"
#highlight "properties" / "assayTypeSpecifications" / "properties" / "assayInstrument" / "enum"
#highlight "properties" / "assayTypeSpecifications" / "properties" / "arrayAssaySpecifications" / "properties" / "nLabelsPerArray" / "enum"
#highlight "properties" / "assayTypeSpecifications" / "allOf" / "0" / "if" / "properties" / "assayInstrument" / "enum"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rType" / "enum"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "properties" / "objectType" / "enum"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "1" / "properties" / "objectType" / "enum"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "2" / "properties" / "objectType" / "enum"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "3" / "properties" / "objectType" / "enum"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "4" / "properties" / "objectType" / "enum"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "5" / "properties" / "objectType" / "enum"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "6" / "properties" / "objectType" / "enum"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "7" / "properties" / "objectType" / "enum"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "8" / "properties" / "objectType" / "enum"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "9" / "properties" / "objectType" / "enum"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "10" / "properties" / "objectType" / "enum"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "11" / "properties" / "objectType" / "enum"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "12" / "properties" / "objectType" / "enum"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "properties" / "objectType" / "enum"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "1" / "properties" / "objectType" / "enum"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "2" / "properties" / "objectType" / "enum"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "3" / "properties" / "objectType" / "enum"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "4" / "properties" / "objectType" / "enum"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "5" / "properties" / "objectType" / "enum"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "6" / "properties" / "objectType" / "enum"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "7" / "properties" / "objectType" / "enum"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "8" / "properties" / "objectType" / "enum"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "9" / "properties" / "objectType" / "enum"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "10" / "properties" / "objectType" / "enum"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "11" / "properties" / "objectType" / "enum"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "12" / "properties" / "objectType" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "properties" / "checksumMethod" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "properties" / "sequenceQualityDetails" / "properties" / "qualityScoringSystem" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "properties" / "sequenceQualityDetails" / "properties" / "qualityEncoding" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "properties" / "sequenceQualityDetails" / "properties" / "asciiOffset" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "0" / "properties" / "checksumMethod" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "1" / "properties" / "checksumMethod" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "0" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "1" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "2" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "3" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "4" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "5" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "6" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "7" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "8" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "9" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "10" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "11" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "12" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "13" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "14" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "15" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "16" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "17" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "18" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "19" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "20" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "21" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "22" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "23" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "24" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "25" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "26" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "27" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "28" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "29" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "30" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "31" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "32" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "33" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "34" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "35" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "36" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "37" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "38" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "39" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "40" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "41" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "42" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "43" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "44" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "45" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "46" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "47" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "48" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "49" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "50" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "51" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "52" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "53" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "54" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "55" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "56" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "57" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "58" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "59" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "60" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "61" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "62" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "63" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "64" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "65" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "66" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "67" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "68" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "69" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "70" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "71" / "properties" / "filetype" / "enum"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "1" / "properties" / "filetype" / "enum"
#highlight "allOf" / "0" / "if" / "properties" / "assayFiles" / "items" / "properties" / "filetype" / "enum"
#highlight "allOf" / "1" / "then" / "properties" / "assayFiles" / "items" / "properties" / "filetype" / "enum"
#highlight "allOf" / "2" / "then" / "properties" / "assayFiles" / "items" / "properties" / "filetype" / "enum"
#highlight "properties"
#highlight "properties" / "schemaDescriptor"
#highlight "properties" / "schemaDescriptor" / "properties"
#highlight "properties" / "schemaDescriptor" / "properties" / "objectType"
#highlight "properties" / "assayTypeSpecifications"
#highlight "properties" / "assayTypeSpecifications" / "properties"
#highlight "properties" / "assayTypeSpecifications" / "properties" / "assayInstrument"
#highlight "properties" / "assayTypeSpecifications" / "properties" / "arrayAssaySpecifications"
#highlight "properties" / "assayTypeSpecifications" / "properties" / "arrayAssaySpecifications" / "properties"
#highlight "properties" / "assayTypeSpecifications" / "properties" / "arrayAssaySpecifications" / "properties" / "nLabelsPerArray"
#highlight "properties" / "assayTypeSpecifications" / "allOf"
#highlight "properties" / "assayTypeSpecifications" / "allOf" / "0"
#highlight "properties" / "assayTypeSpecifications" / "allOf" / "0" / "if"
#highlight "properties" / "assayTypeSpecifications" / "allOf" / "0" / "if" / "properties"
#highlight "properties" / "assayTypeSpecifications" / "allOf" / "0" / "if" / "properties" / "assayInstrument"
#highlight "properties" / "assayRelationships"
#highlight "properties" / "assayRelationships" / "items"
#highlight "properties" / "assayRelationships" / "items" / "allOf"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rType"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "properties"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "properties" / "objectType"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "1"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "1" / "properties"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "1" / "properties" / "objectType"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "2"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "2" / "properties"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "2" / "properties" / "objectType"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "3"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "3" / "properties"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "3" / "properties" / "objectType"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "4"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "4" / "properties"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "4" / "properties" / "objectType"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "5"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "5" / "properties"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "5" / "properties" / "objectType"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "6"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "6" / "properties"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "6" / "properties" / "objectType"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "7"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "7" / "properties"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "7" / "properties" / "objectType"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "8"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "8" / "properties"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "8" / "properties" / "objectType"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "9"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "9" / "properties"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "9" / "properties" / "objectType"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "10"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "10" / "properties"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "10" / "properties" / "objectType"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "11"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "11" / "properties"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "11" / "properties" / "objectType"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "12"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "12" / "properties"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rSource" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "12" / "properties" / "objectType"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "properties"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "properties" / "objectType"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "1"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "1" / "properties"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "1" / "properties" / "objectType"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "2"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "2" / "properties"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "2" / "properties" / "objectType"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "3"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "3" / "properties"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "3" / "properties" / "objectType"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "4"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "4" / "properties"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "4" / "properties" / "objectType"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "5"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "5" / "properties"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "5" / "properties" / "objectType"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "6"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "6" / "properties"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "6" / "properties" / "objectType"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "7"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "7" / "properties"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "7" / "properties" / "objectType"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "8"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "8" / "properties"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "8" / "properties" / "objectType"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "9"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "9" / "properties"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "9" / "properties" / "objectType"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "10"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "10" / "properties"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "10" / "properties" / "objectType"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "11"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "11" / "properties"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "11" / "properties" / "objectType"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "12"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "12" / "properties"
#highlight "properties" / "assayRelationships" / "items" / "allOf" / "0" / "properties" / "rTarget" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "12" / "properties" / "objectType"
#highlight "properties" / "assayFiles"
#highlight "properties" / "assayFiles" / "items"
#highlight "properties" / "assayFiles" / "items" / "allOf"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "properties" / "checksumMethod"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "properties" / "sequenceQualityDetails"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "properties" / "sequenceQualityDetails" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "properties" / "sequenceQualityDetails" / "properties" / "qualityScoringSystem"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "properties" / "sequenceQualityDetails" / "properties" / "qualityEncoding"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "properties" / "sequenceQualityDetails" / "properties" / "asciiOffset"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "0"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "0" / "anyOf"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "0"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "0" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "0" / "properties" / "checksumMethod"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "1"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "1" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "0" / "anyOf" / "1" / "properties" / "checksumMethod"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "0"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "0" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "0" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "1"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "1" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "1" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "2"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "2" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "2" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "3"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "3" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "3" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "4"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "4" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "4" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "5"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "5" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "5" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "6"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "6" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "6" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "7"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "7" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "7" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "8"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "8" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "8" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "9"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "9" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "9" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "10"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "10" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "10" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "11"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "11" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "11" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "12"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "12" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "12" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "13"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "13" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "13" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "14"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "14" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "14" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "15"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "15" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "15" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "16"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "16" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "16" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "17"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "17" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "17" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "18"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "18" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "18" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "19"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "19" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "19" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "20"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "20" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "20" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "21"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "21" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "21" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "22"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "22" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "22" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "23"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "23" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "23" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "24"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "24" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "24" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "25"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "25" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "25" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "26"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "26" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "26" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "27"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "27" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "27" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "28"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "28" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "28" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "29"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "29" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "29" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "30"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "30" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "30" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "31"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "31" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "31" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "32"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "32" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "32" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "33"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "33" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "33" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "34"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "34" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "34" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "35"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "35" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "35" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "36"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "36" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "36" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "37"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "37" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "37" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "38"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "38" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "38" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "39"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "39" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "39" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "40"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "40" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "40" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "41"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "41" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "41" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "42"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "42" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "42" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "43"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "43" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "43" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "44"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "44" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "44" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "45"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "45" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "45" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "46"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "46" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "46" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "47"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "47" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "47" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "48"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "48" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "48" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "49"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "49" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "49" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "50"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "50" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "50" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "51"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "51" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "51" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "52"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "52" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "52" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "53"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "53" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "53" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "54"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "54" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "54" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "55"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "55" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "55" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "56"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "56" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "56" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "57"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "57" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "57" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "58"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "58" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "58" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "59"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "59" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "59" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "60"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "60" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "60" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "61"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "61" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "61" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "62"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "62" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "62" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "63"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "63" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "63" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "64"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "64" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "64" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "65"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "65" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "65" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "66"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "66" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "66" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "67"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "67" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "67" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "68"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "68" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "68" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "69"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "69" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "69" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "70"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "70" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "70" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "71"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "71" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "0" / "allOf" / "1" / "anyOf" / "71" / "properties" / "filetype"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "1"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "1" / "properties"
#highlight "properties" / "assayFiles" / "items" / "allOf" / "1" / "properties" / "filetype"
#highlight "allOf"
#highlight "allOf" / "0"
#highlight "allOf" / "0" / "if"
#highlight "allOf" / "0" / "if" / "properties"
#highlight "allOf" / "0" / "if" / "properties" / "assayFiles"
#highlight "allOf" / "0" / "if" / "properties" / "assayFiles" / "items"
#highlight "allOf" / "0" / "if" / "properties" / "assayFiles" / "items" / "properties"
#highlight "allOf" / "0" / "if" / "properties" / "assayFiles" / "items" / "properties" / "filetype"
#highlight "allOf" / "1"
#highlight "allOf" / "1" / "then"
#highlight "allOf" / "1" / "then" / "properties"
#highlight "allOf" / "1" / "then" / "properties" / "assayFiles"
#highlight "allOf" / "1" / "then" / "properties" / "assayFiles" / "items"
#highlight "allOf" / "1" / "then" / "properties" / "assayFiles" / "items" / "properties"
#highlight "allOf" / "1" / "then" / "properties" / "assayFiles" / "items" / "properties" / "filetype"
#highlight "allOf" / "2"
#highlight "allOf" / "2" / "then"
#highlight "allOf" / "2" / "then" / "properties"
#highlight "allOf" / "2" / "then" / "properties" / "assayFiles"
#highlight "allOf" / "2" / "then" / "properties" / "assayFiles" / "items"
#highlight "allOf" / "2" / "then" / "properties" / "assayFiles" / "items" / "properties"
#highlight "allOf" / "2" / "then" / "properties" / "assayFiles" / "items" / "properties" / "filetype"

{
    "$schema": "https://json-schema.org/draft/2019-09/schema",
    "$id": "https://raw.githubusercontent.com/EbiEga/ega-metadata-schema/main/schemas/EGA.assay.json",
    "type": "object",
    "title": "EGA assay metadata schema",
    "meta:version": "0.0.0",
    "$async": true,
    "description": "Metadata schema used by the European Genome-phenome Archive (EGA) to validate \\nits assay metadata object. This object is intended to contain metadata about the \\nraw qualitative or quantitative test performed to determine any kind of \\nbiological property of a biological sample. It can be of different types: (1) \\nsequencing assay [EFO:0003740] (e.g. sequence CRAM or FastQ files); and an (2) \\narray assay [EFO:0002696] (e.g. intensity CEL files). Further details can be \\nfound in the EGA-metadata-schema GitHub repository \\n(https://github.com/EbiEga/ega-metadata-schema/tree/main/schemas) and \\nEGA-archive website (https://ega-archive.org/)",
    "required": [
        "objectId",
        "assayTypeSpecifications",
        "assayFiles"
    ],
    "additionalProperties": false,
    "properties": {
        "objectId": {
            "type": "object",
            "title": "Object's IDs block",
            "description": "Node containing the main identifiers of the object (e.g. alias, centerName...), \\ninherited from the common definitions. #! We extend the core object \\n(objectCoreId) by adding a pattern check based on this schema's nature: an assay \\n(by using EGAAssayIdPattern)",
            "allOf": [
                {
                    "type": "object",
                    "title": "Core identifiers of an object",
                    "description": "Base definition containing the properties (e.g. Sample's alias) of a minimal \\nidentification layer of an EGA object (e.g. Sample).",
                    "additionalProperties": false,
                    "properties": {
                        "alias": {
                            "type": "string",
                            "title": "Alias of an object",
                            "description": "Submitter designated name (e.g. 'my_sample_J13') for the object (e.g. Sample). \\nThe name must be unique within the submission account (e.g. 'ega-box-79'), since \\nthe aliases and submission accounts are concatenated within our database to \\nobtain the unique alias (e.g. 'ega-box-79::my_sample_J13').",
                            "minLength": 1,
                            "examples": [
                                "my_sample_J13"
                            ]
                        },
                        "centerName": {
                            "type": "string",
                            "title": "Center name of the submitter",
                            "description": "Center name (e.g. 'EBI-TEST') associated to the submitter. In other words, it is \\nthe acronym of the submitter's account (provided by the HelpDesk team).",
                            "minLength": 1,
                            "examples": [
                                "EBI-TEST"
                            ]
                        },
                        "egaAccession": {
                            "type": "string",
                            "title": "EGA's accession of the object",
                            "description": "The object accession (i.e. unique identifier) assigned by the archive (EGA). \\nObject accessions can be found in the 'Identifiers' section of the EGA-archive \\nwebsite (https://ega-archive.org/metadata/how-to-use-the-api) and commonly start \\nwith EGA, followed by the distinctive letter of the object and finally the \\nnumeric ID of the instance.",
                            "examples": [
                                "EGAN00003245489"
                            ]
                        },
                        "externalAccessions": {
                            "type": "array",
                            "title": "External accessions array",
                            "description": "External accession node to reference objects in other archives (e.g. an already \\nexisting sample at BioSamples).",
                            "minItems": 1,
                            "additionalProperties": false,
                            "uniqueItems": true,
                            "items": {
                                "type": "object",
                                "title": "Object External accession",
                                "description": "External accession property defining a reference to an external record in \\nanother resource. For example, a reference to a sequence deposited in NCBI's \\nNucleotide database (e.g. 'https://identifiers.org/nucleotide:T35715.1'); or a \\nsample record in BioSamples (e.g. \\n'https://identifiers.org/biosample:SAMEA7616999').",
                                "additionalProperties": false,
                                "properties": {
                                    "objectExternalAccessionIdentifier": {
                                        "type": "object",
                                        "title": "Identifier of the external accession",
                                        "description": "Unique identifier of an external record. Its 'termId' (e.g. \\n'biosample:SAMEA7616999', 'pubmed:30962759', 'biostudies:S-EPMC3314381', etc.) \\nshall follow CURIE format of ``prefix``:``accession``, where: (1) the prefix \\n(e.g. 'biosample') is unique and assigned to the external resource at \\nidentifiers.org; (2) and the unique accession of the object (e.g. SAMEA7616999) \\nshould resolve to an existing record within the resource. If in doubt, use \\nidentifiers.org to resolve your external accession: 'https://identifiers.org/' + \\n'termId', e.g. 'https://identifiers.org/biosample:SAMEA7616999'",
                                        "allOf": [
                                            {
                                                "type": "object",
                                                "title": "Ontology term",
                                                "description": "This property represents an ontology term (a.k.a. class). It consists on two \\nproperties: the term identifier (termId) and its label (termLabel). This \\nproperty and its structure is inherited across many other elements in the \\nschemas. It is there, when inherited, where the real ontology constraint is put \\nin place (e.g. using 'graphRestriction' keywords). Based on phenopacket's [OntologyClass](https://phenopacket-schema.readthedocs.io/en/latest/ontologyclass.html)",
                                                "additionalProperties": false,
                                                "required": [
                                                    "termId",
                                                    "termLabel"
                                                ],
                                                "properties": {
                                                    "termId": {
                                                        "type": "string",
                                                        "title": "ID of the term",
                                                        "description": "The identifier of an ontology term must be in CURIE format (check property \\n'curieGeneralPattern'). Whether a specific term is valid or not according to an \\nontology hierarchy is checked at each specific termId using ontology validation \\nkeywords (e.g. 'graphRestriction').",
                                                        "minLength": 1,
                                                        "allOf": [
                                                            {
                                                                "type": "string",
                                                                "title": "Compact URI (CURIE) pattern",
                                                                "description": "A [W3C Compact URI](https://www.w3.org/TR/curie/) formatted string. A CURIE \\nstring has the structure ``prefix``:``reference``, as defined by the W3C syntax. \\nEven though we do not restrict prefixes, we recommend that the term used as \\n``prefix`` is uniformely resolved. In other words, it is better to use prefixes \\n(e.g. 'ensembl') from identifiers.org.",
                                                                "minLength": 1,
                                                                "pattern": "^\\w[^:]*:.+$",
                                                                "examples": [
                                                                    "ensembl:ENSG00000139618",
                                                                    "HGNC:11535",
                                                                    "data:1026",
                                                                    "EFO:0003815"
                                                                ]
                                                            }
                                                        ],
                                                        "examples": [
                                                            "MONDO:0100096",
                                                            "EFO:0003101",
                                                            "EFO:0005518",
                                                            "EFO:0002944",
                                                            "EFO:0003813"
                                                        ]
                                                    },
                                                    "termLabel": {
                                                        "type": "string",
                                                        "title": "Label of the term",
                                                        "description": "The label of a term is the human-readable string associated with the identifier. \\nIt is not required that it matches the label of the termId within the referenced \\nontology, although it should. This is due to the fact that the source of truth \\nwill always be the termId, and not the label, which adds more context.",
                                                        "minLength": 1,
                                                        "examples": [
                                                            "COVID-19",
                                                            "Axila skin",
                                                            "bone marrow cell",
                                                            "astrocyte",
                                                            "oligodendrocyte",
                                                            "Unknown",
                                                            "Unaffected",
                                                            "homo sapiens"
                                                        ]
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    "objectExternalAccessionURI": {
                                        "type": "string",
                                        "title": "URI of the external accession",
                                        "description": "Full or partial URL/URI of the external accession, for systems to resolve it. \\nShould only be used in case identifiers.org does not contain a namespace for the \\nrequired resource or the mapping to the URI from its identifier is faulty.",
                                        "allOf": [
                                            {
                                                "type": "string",
                                                "title": "URL/URI pattern",
                                                "description": "This object exists to hold the pattern that a URL or URI should have. For it to \\nbe referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^((http|https)://)(www.)?[a-zA-Z0-9@:%._\\+~#?&//=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%._\\+~#?&//=]*)$",
                                                "examples": [
                                                    "https://phenopacket-schema.readthedocs.io/en/latest/externalreference.html",
                                                    "https://www.ebi.ac.uk/arrayexpress/experiments/E-MEXP-1712/",
                                                    "https://www.geeksforgeeks.org/check-if-an-url-is-valid-or-not-using-regular-expression/"
                                                ]
                                            }
                                        ],
                                        "examples": [
                                            "https://www.ebi.ac.uk/biosamples/samples/SAMN11716999",
                                            "https://pubmed.ncbi.nlm.nih.gov/19491253",
                                            "https://www.ebi.ac.uk/arrayexpress/experiments/E-MEXP-1712/"
                                        ]
                                    },
                                    "objectExternalAccessionDescription": {
                                        "type": [
                                            "string",
                                            "number"
                                        ],
                                        "title": "Description of the external accession",
                                        "description": "Optional description of the external accession, used to add context to the \\nidentifier if applicable.",
                                        "examples": [
                                            "taken from biosample temporarily",
                                            "Ensembl's part of the accessions",
                                            "first",
                                            2,
                                            "Recurrent Erythema Nodosum in a Child with a SHOC2 Gene Mutation"
                                        ]
                                    }
                                },
                                "anyOf": [
                                    {
                                        "title": "Either the identifier is needed",
                                        "required": [
                                            "objectExternalAccessionIdentifier"
                                        ]
                                    },
                                    {
                                        "title": "Or the reference is needed",
                                        "required": [
                                            "objectExternalAccessionURI"
                                        ]
                                    }
                                ]
                            }
                        }
                    },
                    "anyOf": [
                        {
                            "title": "Check core IDs: combination of Alias and Center name",
                            "required": [
                                "alias",
                                "centerName"
                            ]
                        },
                        {
                            "title": "Check core IDs: EGA accession ID",
                            "required": [
                                "egaAccession"
                            ]
                        },
                        {
                            "title": "Check core IDs: external accessions",
                            "required": [
                                "externalAccessions"
                            ]
                        }
                    ]
                },
                {
                    "title": "Check that assay's EGA ID (EGAR) is correct",
                    "properties": {
                        "egaAccession": {
                            "type": "string",
                            "title": "Pattern of an EGA assay's ID (EGAR...)",
                            "pattern": "^EGAR[0-9]{11}$",
                            "examples": [
                                "EGAR00001314547"
                            ]
                        }
                    }
                }
            ]
        },
        "schemaDescriptor": {
            "type": "object",
            "title": "Schema descriptor",
            "description": "This node is intended to be used to describe the schemas and standards that a \\nJSON document was based on. For instance, if a sample.json document was created \\nto be validated against EGA.sample.json schema version 1.0.0, such information \\nshould be reflected in this block. This way, both a human and a machine can \\ninterpret and validate the JSON document efficiently, without the need of \\nguessing versions.",
            "additionalProperties": false,
            "required": [
                "objectType",
                "describedBySchemaUri",
                "objectSchemaVersion",
                "commonSchemaVersion"
            ],
            "properties": {
                "objectType": {
                    "type": "string",
                    "title": "Type of the object",
                    "description": "Type of the object (e.g. 'sample') the JSON document describes.",
                    "enum": [
                        "experiment",
                        "study",
                        "sample",
                        "individual",
                        "submission",
                        "assay",
                        "dataset",
                        "analysis",
                        "policy",
                        "DAC",
                        "protocol",
                        "object-set"
                    ]
                },
                "describedBySchemaUri": {
                    "type": "string",
                    "title": "URI of the schema",
                    "description": "URI of the schema (e.g. 'https://github.com/EbiEga/ega-metadata-schema/tree/main/schemas/EGA.sample.json') \\nthat describes the JSON document (e.g. 'my_sample.json')",
                    "pattern": "^https://github\\.com/EbiEga/ega-metadata-schema/tree/main/schemas/EGA\\..+\\.json$",
                    "examples": [
                        "https://github.com/EbiEga/ega-metadata-schema/tree/main/schemas/EGA.sample.json"
                    ]
                },
                "objectSchemaVersion": {
                    "type": "string",
                    "title": "Version of the object's schema",
                    "description": "The version of the object's schema, the one specific for the object the JSON \\ndocument corresponds to (e.g. 'EGA.sample.json'), not the common definitions \\nschema's version (i.e. 'EGA.common-definitions.json').",
                    "allOf": [
                        {
                            "type": "string",
                            "title": "Semantic versioning pattern",
                            "description": "This object exists to hold the pattern that semantic versioning has, for it to \\nbe referenced elsewhere within this (or other) JSON schema. For further details \\nabout semantic versioning check 'https://semver.org/'",
                            "pattern": "^[0-9]+\\.[0-9]+\\.[0-9]+$",
                            "examples": [
                                "2.5.1"
                            ]
                        }
                    ]
                },
                "commonSchemaVersion": {
                    "type": "string",
                    "title": "Version of the common definition's schema",
                    "description": "The version of the common definition's schema, the one containing all shared \\ndefinitions (i.e. 'EGA.common-definitions.json'), not the one specific to the \\nobject described by the JSON document (e.g. 'EGA.sample.json').",
                    "allOf": [
                        {
                            "type": "string",
                            "title": "Semantic versioning pattern",
                            "description": "This object exists to hold the pattern that semantic versioning has, for it to \\nbe referenced elsewhere within this (or other) JSON schema. For further details \\nabout semantic versioning check 'https://semver.org/'",
                            "pattern": "^[0-9]+\\.[0-9]+\\.[0-9]+$",
                            "examples": [
                                "2.5.1"
                            ]
                        }
                    ]
                }
            }
        },
        "objectTitle": {
            "type": "string",
            "title": "Title of the assay",
            "description": "An informative assay title that should serve as an overview of the assay and \\ndifferentiate it from others. This short text can be used to call out assay \\nrecords in searches or in displays.",
            "minLength": 1,
            "examples": [
                "Ilumina sequencing assay 3409 - Cancer genomics"
            ]
        },
        "objectDescription": {
            "type": "string",
            "title": "Description of the assay",
            "description": "An in-depth description (e.g. used technology, sample groups, purpose...) of the \\nassay.",
            "minLength": 1,
            "examples": [
                "Sequencing assay number 3409 of 4000. Sequenced through Illumina MiSeq to find \\nSNPs of colorectal cancer samples..."
            ]
        },
        "assayCenter": {
            "type": "string",
            "title": "Centername that performed the assay",
            "description": "The name of the center (e.g. 'EBI-TEST') responsible for performing assay, if \\napplicable, in case it's different from the center submitting metadata).",
            "minLength": 1,
            "examples": [
                "EBI-TEST"
            ]
        },
        "assayDate": {
            "type": "string",
            "title": "Pattern of EGA ISO 8601 date",
            "description": "Regular expression to check the syntax of a date following 'ISO 8601 date' \\nformat. Notice that the Time (denoted by 'T...') is optional. So is the time \\nzone, specified at the end of the string (e.g. 'Z', '+01:00'...). See more \\ndetail at 'https://regexpattern.com/iso-8601-dates-times/'.",
            "pattern": "^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])(T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z|[+-](?:2[0-3]|[01][0-9]):[0-5][0-9])?)?$",
            "examples": [
                "2021-04-30",
                "2020-12-29T19:30:45.123Z",
                "2020-12-29",
                "2020-12-29T19:30:45",
                "2021-10-13T04:13:00+01:00",
                "2021-10-13T12:13:00-08:00",
                "2021-10-13T12:13:00"
            ]
        },
        "assayTypeSpecifications": {
            "type": "object",
            "title": "Assay type specifications",
            "description": "Node containing different sets of fields that depend on the instrument used for \\nthe assay: either array assays (those in which an [array instrument \\n[EFO:0002698]](http://www.ebi.ac.uk/efo/EFO_0002698) was used) or sequencing \\nassays (those in which a [sequencing instrument \\n[EFO:0003739]](http://www.ebi.ac.uk/efo/EFO_0003739) was used). Depending on the \\nused technology, different types of fields will be required. For example, if an \\narray was used, its arraySampleLabels will be expected. Having this modular \\nassay type-related node allows for easy additions of new technology-specific \\nrequirements.",
            "additionalProperties": false,
            "required": [
                "assayInstrument"
            ],
            "properties": {
                "assayInstrument": {
                    "type": "string",
                    "title": "Assay type",
                    "description": "The general categories, either sequencing or array, in which assays are \\ncategorized based on the used instruments. Term chosen from a list of controlled \\nvocabulary (CV). If you cannot find your term in the CV list, please create an \\nissue at our [metadata GitHub \\nrepository](https://github.com/EbiEga/ega-metadata-schema/issues/new/choose) \\nproposing its addition.",
                    "enum": [
                        "array",
                        "sequencer"
                    ],
                    "meta:enum": {
                        "array": "An assay in which an [array instrument \\n[EFO:0002698]](http://www.ebi.ac.uk/efo/EFO_0002698) was used.",
                        "sequencer": "An assay in which a [sequencer instrument \\n[EFO:0003739]](http://www.ebi.ac.uk/efo/EFO_0003739) was used."
                    }
                },
                "arrayAssaySpecifications": {
                    "type": "object",
                    "title": "Specifications of an array assay",
                    "description": "Node containing the set of fields specific to an assay of type 'array' (i.e. an \\narray was used to obtain the raw data).",
                    "additionalProperties": false,
                    "required": [
                        "nLabelsPerArray"
                    ],
                    "properties": {
                        "nLabelsPerArray": {
                            "type": "number",
                            "title": "Number of labels per array",
                            "description": "A single array can be prepared with biological materials labelled differently \\nfor them to be compared in parallel. Here one shall specify the number of labels \\nused in the single array (e.g. 2 for a Two-colour cDNA microarray). Term chosen \\nfrom a list of controlled vocabulary (CV). If you cannot find your term in the \\nCV list, please create an issue at our [metadata GitHub \\nrepository](https://github.com/EbiEga/ega-metadata-schema/issues/new/choose) \\nproposing its addition.",
                            "enum": [
                                1,
                                2,
                                3,
                                4
                            ],
                            "meta:enum": {
                                "1": "One single label was used for a single array",
                                "2": "Two labels were used for a single array. The node 'arraySampleLabels' specifying \\nwhich samples were labelled by which compounds will be expected.",
                                "3": "Three labels were used for a single array. The node 'arraySampleLabels' \\nspecifying which samples were labelled by which compounds will be expected.",
                                "4": "Four labels were used for a single array. The node 'arraySampleLabels' \\nspecifying which samples were labelled by which compounds will be expected."
                            }
                        },
                        "arraySampleLabels": {
                            "type": "array",
                            "title": "Array of sampleLabel pairs of the array assay",
                            "description": "Sample-Label pairs (e.g. sample 'EGAN00000000001' and label 'Cy3') to know which \\nsamples used in this assay are labelled by which chemicals. Can be omitted if \\nthe array is of one single label/colour.",
                            "minItems": 1,
                            "additionalProperties": false,
                            "uniqueItems": true,
                            "items": {
                                "type": "object",
                                "title": "Repeatable Sample-label node",
                                "description": "The base node of a label-sample association. One form of basic identification of \\nthe sample (inherited from objectCoreId - e.g. either the center name and alias \\nor the accession) is required, as well as the label per se.",
                                "required": [
                                    "arrayLabel",
                                    "objectId"
                                ],
                                "additionalProperties": false,
                                "properties": {
                                    "arrayLabel": {
                                        "type": "object",
                                        "title": "Repeatable arrayLabel node",
                                        "description": "Chemical conjugated to nucleic acid/proteins to label them before microarray \\nhybridisation. This node defines one single label, and thus should be repeated \\nas an array where inherited if multiple labels are intended to be described.",
                                        "anyOf": [
                                            {
                                                "required": [
                                                    "arrayLabelIdentifier"
                                                ]
                                            },
                                            {
                                                "required": [
                                                    "arrayLabelDescription"
                                                ]
                                            }
                                        ],
                                        "additionalProperties": false,
                                        "properties": {
                                            "arrayLabelIdentifier": {
                                                "type": "object",
                                                "title": "Array label identifier",
                                                "description": "The chosen term (e.g. 'Cy3 dye' [CHEBI:37987]) needs to be a Chemical Entity \\nfrom the CHEBI ontology, look for yours at: \\nhttps://www.ebi.ac.uk/ols/search?q=&ontology=chebi",
                                                "allOf": [
                                                    {
                                                        "type": "object",
                                                        "title": "Ontology term",
                                                        "description": "This property represents an ontology term (a.k.a. class). It consists on two \\nproperties: the term identifier (termId) and its label (termLabel). This \\nproperty and its structure is inherited across many other elements in the \\nschemas. It is there, when inherited, where the real ontology constraint is put \\nin place (e.g. using 'graphRestriction' keywords). Based on phenopacket's [OntologyClass](https://phenopacket-schema.readthedocs.io/en/latest/ontologyclass.html)",
                                                        "additionalProperties": false,
                                                        "required": [
                                                            "termId",
                                                            "termLabel"
                                                        ],
                                                        "properties": {
                                                            "termId": {
                                                                "type": "string",
                                                                "title": "ID of the term",
                                                                "description": "The identifier of an ontology term must be in CURIE format (check property \\n'curieGeneralPattern'). Whether a specific term is valid or not according to an \\nontology hierarchy is checked at each specific termId using ontology validation \\nkeywords (e.g. 'graphRestriction').",
                                                                "minLength": 1,
                                                                "allOf": [
                                                                    {
                                                                        "type": "string",
                                                                        "title": "Compact URI (CURIE) pattern",
                                                                        "description": "A [W3C Compact URI](https://www.w3.org/TR/curie/) formatted string. A CURIE \\nstring has the structure ``prefix``:``reference``, as defined by the W3C syntax. \\nEven though we do not restrict prefixes, we recommend that the term used as \\n``prefix`` is uniformely resolved. In other words, it is better to use prefixes \\n(e.g. 'ensembl') from identifiers.org.",
                                                                        "minLength": 1,
                                                                        "pattern": "^\\w[^:]*:.+$",
                                                                        "examples": [
                                                                            "ensembl:ENSG00000139618",
                                                                            "HGNC:11535",
                                                                            "data:1026",
                                                                            "EFO:0003815"
                                                                        ]
                                                                    }
                                                                ],
                                                                "examples": [
                                                                    "MONDO:0100096",
                                                                    "EFO:0003101",
                                                                    "EFO:0005518",
                                                                    "EFO:0002944",
                                                                    "EFO:0003813"
                                                                ]
                                                            },
                                                            "termLabel": {
                                                                "type": "string",
                                                                "title": "Label of the term",
                                                                "description": "The label of a term is the human-readable string associated with the identifier. \\nIt is not required that it matches the label of the termId within the referenced \\nontology, although it should. This is due to the fact that the source of truth \\nwill always be the termId, and not the label, which adds more context.",
                                                                "minLength": 1,
                                                                "examples": [
                                                                    "COVID-19",
                                                                    "Axila skin",
                                                                    "bone marrow cell",
                                                                    "astrocyte",
                                                                    "oligodendrocyte",
                                                                    "Unknown",
                                                                    "Unaffected",
                                                                    "homo sapiens"
                                                                ]
                                                            }
                                                        }
                                                    }
                                                ],
                                                "properties": {
                                                    "termId": {
                                                        "title": "Ontology constraints for this specific termId",
                                                        "graphRestriction ": {
                                                            "ontologies": [
                                                                "obo:chebi"
                                                            ],
                                                            "classes": [
                                                                "CHEBI:24431"
                                                            ],
                                                            "relations": [
                                                                "rdfs:subClassOf"
                                                            ],
                                                            "direct": false,
                                                            "include_self": false
                                                        },
                                                        "examples": [
                                                            "CHEBI:37987",
                                                            "CHEBI:15956"
                                                        ]
                                                    }
                                                }
                                            },
                                            "arrayLabelDescription": {
                                                "type": "string",
                                                "title": "Array label description",
                                                "description": "Additional description of the used array label, indicating further details: \\ncontext, purpose of the label, description of the label in the absence of an \\nontologized term, etcetera.",
                                                "minLength": 1,
                                                "examples": [
                                                    "This label was used to dye the control samples",
                                                    "This newly discovered label (yet to be added to an ontology) consists of a \\ncompound of type X...",
                                                    "The label ID is unknown because we were given an already dyed kit..."
                                                ]
                                            }
                                        }
                                    },
                                    "objectId": {
                                        "type": "object",
                                        "title": "Object's IDs block",
                                        "allOf": [
                                            {
                                                "type": "object",
                                                "title": "Core identifiers of an object",
                                                "description": "Base definition containing the properties (e.g. Sample's alias) of a minimal \\nidentification layer of an EGA object (e.g. Sample).",
                                                "additionalProperties": false,
                                                "properties": {
                                                    "alias": {
                                                        "type": "string",
                                                        "title": "Alias of an object",
                                                        "description": "Submitter designated name (e.g. 'my_sample_J13') for the object (e.g. Sample). \\nThe name must be unique within the submission account (e.g. 'ega-box-79'), since \\nthe aliases and submission accounts are concatenated within our database to \\nobtain the unique alias (e.g. 'ega-box-79::my_sample_J13').",
                                                        "minLength": 1,
                                                        "examples": [
                                                            "my_sample_J13"
                                                        ]
                                                    },
                                                    "centerName": {
                                                        "type": "string",
                                                        "title": "Center name of the submitter",
                                                        "description": "Center name (e.g. 'EBI-TEST') associated to the submitter. In other words, it is \\nthe acronym of the submitter's account (provided by the HelpDesk team).",
                                                        "minLength": 1,
                                                        "examples": [
                                                            "EBI-TEST"
                                                        ]
                                                    },
                                                    "egaAccession": {
                                                        "type": "string",
                                                        "title": "EGA's accession of the object",
                                                        "description": "The object accession (i.e. unique identifier) assigned by the archive (EGA). \\nObject accessions can be found in the 'Identifiers' section of the EGA-archive \\nwebsite (https://ega-archive.org/metadata/how-to-use-the-api) and commonly start \\nwith EGA, followed by the distinctive letter of the object and finally the \\nnumeric ID of the instance.",
                                                        "examples": [
                                                            "EGAN00003245489"
                                                        ]
                                                    },
                                                    "externalAccessions": {
                                                        "type": "array",
                                                        "title": "External accessions array",
                                                        "description": "External accession node to reference objects in other archives (e.g. an already \\nexisting sample at BioSamples).",
                                                        "minItems": 1,
                                                        "additionalProperties": false,
                                                        "uniqueItems": true,
                                                        "items": {
                                                            "type": "object",
                                                            "title": "Object External accession",
                                                            "description": "External accession property defining a reference to an external record in \\nanother resource. For example, a reference to a sequence deposited in NCBI's \\nNucleotide database (e.g. 'https://identifiers.org/nucleotide:T35715.1'); or a \\nsample record in BioSamples (e.g. \\n'https://identifiers.org/biosample:SAMEA7616999').",
                                                            "additionalProperties": false,
                                                            "properties": {
                                                                "objectExternalAccessionIdentifier": {
                                                                    "type": "object",
                                                                    "title": "Identifier of the external accession",
                                                                    "description": "Unique identifier of an external record. Its 'termId' (e.g. \\n'biosample:SAMEA7616999', 'pubmed:30962759', 'biostudies:S-EPMC3314381', etc.) \\nshall follow CURIE format of ``prefix``:``accession``, where: (1) the prefix \\n(e.g. 'biosample') is unique and assigned to the external resource at \\nidentifiers.org; (2) and the unique accession of the object (e.g. SAMEA7616999) \\nshould resolve to an existing record within the resource. If in doubt, use \\nidentifiers.org to resolve your external accession: 'https://identifiers.org/' + \\n'termId', e.g. 'https://identifiers.org/biosample:SAMEA7616999'",
                                                                    "allOf": [
                                                                        {
                                                                            "type": "object",
                                                                            "title": "Ontology term",
                                                                            "description": "This property represents an ontology term (a.k.a. class). It consists on two \\nproperties: the term identifier (termId) and its label (termLabel). This \\nproperty and its structure is inherited across many other elements in the \\nschemas. It is there, when inherited, where the real ontology constraint is put \\nin place (e.g. using 'graphRestriction' keywords). Based on phenopacket's [OntologyClass](https://phenopacket-schema.readthedocs.io/en/latest/ontologyclass.html)",
                                                                            "additionalProperties": false,
                                                                            "required": [
                                                                                "termId",
                                                                                "termLabel"
                                                                            ],
                                                                            "properties": {
                                                                                "termId": {
                                                                                    "type": "string",
                                                                                    "title": "ID of the term",
                                                                                    "description": "The identifier of an ontology term must be in CURIE format (check property \\n'curieGeneralPattern'). Whether a specific term is valid or not according to an \\nontology hierarchy is checked at each specific termId using ontology validation \\nkeywords (e.g. 'graphRestriction').",
                                                                                    "minLength": 1,
                                                                                    "allOf": [
                                                                                        {
                                                                                            "type": "string",
                                                                                            "title": "Compact URI (CURIE) pattern",
                                                                                            "description": "A [W3C Compact URI](https://www.w3.org/TR/curie/) formatted string. A CURIE \\nstring has the structure ``prefix``:``reference``, as defined by the W3C syntax. \\nEven though we do not restrict prefixes, we recommend that the term used as \\n``prefix`` is uniformely resolved. In other words, it is better to use prefixes \\n(e.g. 'ensembl') from identifiers.org.",
                                                                                            "minLength": 1,
                                                                                            "pattern": "^\\w[^:]*:.+$",
                                                                                            "examples": [
                                                                                                "ensembl:ENSG00000139618",
                                                                                                "HGNC:11535",
                                                                                                "data:1026",
                                                                                                "EFO:0003815"
                                                                                            ]
                                                                                        }
                                                                                    ],
                                                                                    "examples": [
                                                                                        "MONDO:0100096",
                                                                                        "EFO:0003101",
                                                                                        "EFO:0005518",
                                                                                        "EFO:0002944",
                                                                                        "EFO:0003813"
                                                                                    ]
                                                                                },
                                                                                "termLabel": {
                                                                                    "type": "string",
                                                                                    "title": "Label of the term",
                                                                                    "description": "The label of a term is the human-readable string associated with the identifier. \\nIt is not required that it matches the label of the termId within the referenced \\nontology, although it should. This is due to the fact that the source of truth \\nwill always be the termId, and not the label, which adds more context.",
                                                                                    "minLength": 1,
                                                                                    "examples": [
                                                                                        "COVID-19",
                                                                                        "Axila skin",
                                                                                        "bone marrow cell",
                                                                                        "astrocyte",
                                                                                        "oligodendrocyte",
                                                                                        "Unknown",
                                                                                        "Unaffected",
                                                                                        "homo sapiens"
                                                                                    ]
                                                                                }
                                                                            }
                                                                        }
                                                                    ]
                                                                },
                                                                "objectExternalAccessionURI": {
                                                                    "type": "string",
                                                                    "title": "URI of the external accession",
                                                                    "description": "Full or partial URL/URI of the external accession, for systems to resolve it. \\nShould only be used in case identifiers.org does not contain a namespace for the \\nrequired resource or the mapping to the URI from its identifier is faulty.",
                                                                    "allOf": [
                                                                        {
                                                                            "type": "string",
                                                                            "title": "URL/URI pattern",
                                                                            "description": "This object exists to hold the pattern that a URL or URI should have. For it to \\nbe referenced elsewhere within this (or other) JSON schema.",
                                                                            "pattern": "^((http|https)://)(www.)?[a-zA-Z0-9@:%._\\+~#?&//=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%._\\+~#?&//=]*)$",
                                                                            "examples": [
                                                                                "https://phenopacket-schema.readthedocs.io/en/latest/externalreference.html",
                                                                                "https://www.ebi.ac.uk/arrayexpress/experiments/E-MEXP-1712/",
                                                                                "https://www.geeksforgeeks.org/check-if-an-url-is-valid-or-not-using-regular-expression/"
                                                                            ]
                                                                        }
                                                                    ],
                                                                    "examples": [
                                                                        "https://www.ebi.ac.uk/biosamples/samples/SAMN11716999",
                                                                        "https://pubmed.ncbi.nlm.nih.gov/19491253",
                                                                        "https://www.ebi.ac.uk/arrayexpress/experiments/E-MEXP-1712/"
                                                                    ]
                                                                },
                                                                "objectExternalAccessionDescription": {
                                                                    "type": [
                                                                        "string",
                                                                        "number"
                                                                    ],
                                                                    "title": "Description of the external accession",
                                                                    "description": "Optional description of the external accession, used to add context to the \\nidentifier if applicable.",
                                                                    "examples": [
                                                                        "taken from biosample temporarily",
                                                                        "Ensembl's part of the accessions",
                                                                        "first",
                                                                        2,
                                                                        "Recurrent Erythema Nodosum in a Child with a SHOC2 Gene Mutation"
                                                                    ]
                                                                }
                                                            },
                                                            "anyOf": [
                                                                {
                                                                    "title": "Either the identifier is needed",
                                                                    "required": [
                                                                        "objectExternalAccessionIdentifier"
                                                                    ]
                                                                },
                                                                {
                                                                    "title": "Or the reference is needed",
                                                                    "required": [
                                                                        "objectExternalAccessionURI"
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    }
                                                },
                                                "anyOf": [
                                                    {
                                                        "title": "Check core IDs: combination of Alias and Center name",
                                                        "required": [
                                                            "alias",
                                                            "centerName"
                                                        ]
                                                    },
                                                    {
                                                        "title": "Check core IDs: EGA accession ID",
                                                        "required": [
                                                            "egaAccession"
                                                        ]
                                                    },
                                                    {
                                                        "title": "Check core IDs: external accessions",
                                                        "required": [
                                                            "externalAccessions"
                                                        ]
                                                    }
                                                ]
                                            },
                                            {
                                                "title": "Check that sample EGA ID (EGAN) pattern is correct",
                                                "properties": {
                                                    "egaAccession": {
                                                        "type": "string",
                                                        "title": "Pattern of an EGA sample's ID (EGAN...)",
                                                        "pattern": "^EGAN[0-9]{11}$",
                                                        "examples": [
                                                            "EGAN00003245489"
                                                        ]
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "anyOf": [
                        {
                            "title": "2 labels per array check",
                            "description": "If 2 labels were used per array, the sampleLabel specifications will be expected \\nand at least 2 items (one for each label)",
                            "required": [
                                "nLabelsPerArray",
                                "arraySampleLabels"
                            ],
                            "properties": {
                                "nLabelsPerArray": {
                                    "const": 2
                                },
                                "arraySampleLabels": {
                                    "minItems": 2
                                }
                            }
                        },
                        {
                            "title": "3 labels per array check",
                            "description": "If 3 labels were used per array, the sampleLabel specifications will be expected \\nand at least 3 items (one for each label)",
                            "required": [
                                "nLabelsPerArray",
                                "arraySampleLabels"
                            ],
                            "properties": {
                                "nLabelsPerArray": {
                                    "const": 3
                                },
                                "arraySampleLabels": {
                                    "minItems": 3
                                }
                            }
                        },
                        {
                            "title": "4 labels per array check",
                            "description": "If 4 labels were used per array, the sampleLabel specifications will be expected \\nand at least 4 items (one for each label)",
                            "required": [
                                "nLabelsPerArray",
                                "arraySampleLabels"
                            ],
                            "properties": {
                                "nLabelsPerArray": {
                                    "const": 4
                                },
                                "arraySampleLabels": {
                                    "minItems": 4
                                }
                            }
                        }
                    ]
                },
                "sequencingAssaySpecifications": {
                    "type": "object",
                    "title": "Specifications of a sequencing assay",
                    "description": "Node containing the set of fields specific to an assay of type 'sequencer' (i.e. \\na sequencer was used to obtain the raw data).",
                    "additionalProperties": false,
                    "properties": {
                        "referenceAlignmentDetails": {
                            "type": "array",
                            "title": "Reference assembly and sequence details",
                            "description": "Node containing the information of the reference assembly that was used to \\nobtain the sequence alignment. For example, processing raw sequence FastQ files \\naligning it to a reference sequence (e.g. human Chromosome X of GRCh38's \\nassembly), obtaining aligned sequences (e.g. BAM format). In this array one can \\nlist the used assembly (e.g. GRCh38.p14), the used assembly units (e.g. \\nrefseq:NC_000001.11), or a combination of both. In order to ease the \\ninterpretation of the data, it is important to notice that the field \\n'assemblyUnitName' shall correspond to how the Reference Sequence is labelled in \\nsubmission file(s) (e.g. '1' for chromosome 1). This name is equivalent to the \\nSQ label (the reference sequence dictionary) in BAM (see [documentation for \\nv1](https://samtools.github.io/hts-specs/SAMv1.pdf)) and optional when submitted \\nfile uses INSDC accession.version",
                            "additionalProperties": false,
                            "uniqueItems": true,
                            "minItems": 1,
                            "items": {
                                "type": "object",
                                "title": "NCBI's Assembly descriptor",
                                "meta:propertyCurie": "topic:0196",
                                "description": "Node describing a sequence assembly referenced in [NCBI's Assembly \\ndatabase](https://www.ncbi.nlm.nih.gov/assembly). Assembly is a database \\nproviding information on the structure of assembled genomes, assembly names and \\nother meta-data, statistical reports, and links to genomic sequence data. An \\nassembly is defined as the set of chromosomes, unlocalized and unplaced \\n(sometimes called 'random') and alternate sequences used to represent an \\norganism's genome. Assemblies are constructed from 1 or more assembly units.",
                                "additionalProperties": false,
                                "required": [
                                    "ncbiAssembly"
                                ],
                                "properties": {
                                    "ncbiAssembly": {
                                        "type": "object",
                                        "title": "NCBI Assembly",
                                        "description": "Node defining an Assembly (e.g. 'GCF_000001405.26'). For example, the assembly \\naccession for the GenBank version of the public human reference assembly \\n('termLabel' being 'GRCh38.p14') is 'GCA_000001405.29' ('termId'). See further \\ndetails here: https://www.ncbi.nlm.nih.gov/assembly/model/.",
                                        "allOf": [
                                            {
                                                "type": "object",
                                                "title": "Ontology term",
                                                "description": "This property represents an ontology term (a.k.a. class). It consists on two \\nproperties: the term identifier (termId) and its label (termLabel). This \\nproperty and its structure is inherited across many other elements in the \\nschemas. It is there, when inherited, where the real ontology constraint is put \\nin place (e.g. using 'graphRestriction' keywords). Based on phenopacket's [OntologyClass](https://phenopacket-schema.readthedocs.io/en/latest/ontologyclass.html)",
                                                "additionalProperties": false,
                                                "required": [
                                                    "termId",
                                                    "termLabel"
                                                ],
                                                "properties": {
                                                    "termId": {
                                                        "type": "string",
                                                        "title": "ID of the term",
                                                        "description": "The identifier of an ontology term must be in CURIE format (check property \\n'curieGeneralPattern'). Whether a specific term is valid or not according to an \\nontology hierarchy is checked at each specific termId using ontology validation \\nkeywords (e.g. 'graphRestriction').",
                                                        "minLength": 1,
                                                        "allOf": [
                                                            {
                                                                "type": "string",
                                                                "title": "Compact URI (CURIE) pattern",
                                                                "description": "A [W3C Compact URI](https://www.w3.org/TR/curie/) formatted string. A CURIE \\nstring has the structure ``prefix``:``reference``, as defined by the W3C syntax. \\nEven though we do not restrict prefixes, we recommend that the term used as \\n``prefix`` is uniformely resolved. In other words, it is better to use prefixes \\n(e.g. 'ensembl') from identifiers.org.",
                                                                "minLength": 1,
                                                                "pattern": "^\\w[^:]*:.+$",
                                                                "examples": [
                                                                    "ensembl:ENSG00000139618",
                                                                    "HGNC:11535",
                                                                    "data:1026",
                                                                    "EFO:0003815"
                                                                ]
                                                            }
                                                        ],
                                                        "examples": [
                                                            "MONDO:0100096",
                                                            "EFO:0003101",
                                                            "EFO:0005518",
                                                            "EFO:0002944",
                                                            "EFO:0003813"
                                                        ]
                                                    },
                                                    "termLabel": {
                                                        "type": "string",
                                                        "title": "Label of the term",
                                                        "description": "The label of a term is the human-readable string associated with the identifier. \\nIt is not required that it matches the label of the termId within the referenced \\nontology, although it should. This is due to the fact that the source of truth \\nwill always be the termId, and not the label, which adds more context.",
                                                        "minLength": 1,
                                                        "examples": [
                                                            "COVID-19",
                                                            "Axila skin",
                                                            "bone marrow cell",
                                                            "astrocyte",
                                                            "oligodendrocyte",
                                                            "Unknown",
                                                            "Unaffected",
                                                            "homo sapiens"
                                                        ]
                                                    }
                                                }
                                            }
                                        ],
                                        "properties": {
                                            "termId": {
                                                "title": "Ontology constraints for this specific termId",
                                                "allOf": [
                                                    {
                                                        "type": "string",
                                                        "title": "NCBI Assembly CURIE pattern",
                                                        "description": "The assembly accession starts with a three letter prefix, GCA for GenBank \\nassemblies and GCF for RefSeq assemblies. This is followed by an underscore and \\n9 digits (e.g. '_000001405'). A version (e.g. '.26') is then added to the \\naccession. See further details here: \\nhttps://registry.identifiers.org/registry/assembly",
                                                        "pattern": "^assembly:(GCF|GCA)_\\d+(\\.\\d+)?$",
                                                        "allOf": [
                                                            {
                                                                "type": "string",
                                                                "title": "Compact URI (CURIE) pattern",
                                                                "description": "A [W3C Compact URI](https://www.w3.org/TR/curie/) formatted string. A CURIE \\nstring has the structure ``prefix``:``reference``, as defined by the W3C syntax. \\nEven though we do not restrict prefixes, we recommend that the term used as \\n``prefix`` is uniformely resolved. In other words, it is better to use prefixes \\n(e.g. 'ensembl') from identifiers.org.",
                                                                "minLength": 1,
                                                                "pattern": "^\\w[^:]*:.+$",
                                                                "examples": [
                                                                    "ensembl:ENSG00000139618",
                                                                    "HGNC:11535",
                                                                    "data:1026",
                                                                    "EFO:0003815"
                                                                ]
                                                            }
                                                        ],
                                                        "examples": [
                                                            "assembly:GCF_000001405.26",
                                                            "assembly:GCA_000001405.1",
                                                            "assembly:GCF_000005845.2"
                                                        ]
                                                    }
                                                ],
                                                "examples": [
                                                    "assembly:GCF_000001405.26",
                                                    "assembly:GCA_000001405.1",
                                                    "assembly:GCF_000005845.2"
                                                ]
                                            }
                                        }
                                    },
                                    "ncbiAssemblyUnit": {
                                        "type": "object",
                                        "title": "NCBI assembly unit",
                                        "description": "NCBI's identifier of the assembly unit. An assembly unit is defined as the \\ncollection of sequences used to define discrete parts of an assembly. Commonly, \\nassembly units are entire chromosomes (e.g. Chromosome 1 of human genome), \\nscaffolds or different types of sequences (e.g. Mitochondrial DNA). Again, it \\nfollows an 'ontologyTerm' structure, having a 'termId' (e.g. \\n'refseq:NC_000001.11') and 'termLabel' (e.g. 'chromosome 1'). See further \\ndetails here: https://www.ncbi.nlm.nih.gov/assembly/model/.",
                                        "allOf": [
                                            {
                                                "type": "object",
                                                "title": "Ontology term",
                                                "description": "This property represents an ontology term (a.k.a. class). It consists on two \\nproperties: the term identifier (termId) and its label (termLabel). This \\nproperty and its structure is inherited across many other elements in the \\nschemas. It is there, when inherited, where the real ontology constraint is put \\nin place (e.g. using 'graphRestriction' keywords). Based on phenopacket's [OntologyClass](https://phenopacket-schema.readthedocs.io/en/latest/ontologyclass.html)",
                                                "additionalProperties": false,
                                                "required": [
                                                    "termId",
                                                    "termLabel"
                                                ],
                                                "properties": {
                                                    "termId": {
                                                        "type": "string",
                                                        "title": "ID of the term",
                                                        "description": "The identifier of an ontology term must be in CURIE format (check property \\n'curieGeneralPattern'). Whether a specific term is valid or not according to an \\nontology hierarchy is checked at each specific termId using ontology validation \\nkeywords (e.g. 'graphRestriction').",
                                                        "minLength": 1,
                                                        "allOf": [
                                                            {
                                                                "type": "string",
                                                                "title": "Compact URI (CURIE) pattern",
                                                                "description": "A [W3C Compact URI](https://www.w3.org/TR/curie/) formatted string. A CURIE \\nstring has the structure ``prefix``:``reference``, as defined by the W3C syntax. \\nEven though we do not restrict prefixes, we recommend that the term used as \\n``prefix`` is uniformely resolved. In other words, it is better to use prefixes \\n(e.g. 'ensembl') from identifiers.org.",
                                                                "minLength": 1,
                                                                "pattern": "^\\w[^:]*:.+$",
                                                                "examples": [
                                                                    "ensembl:ENSG00000139618",
                                                                    "HGNC:11535",
                                                                    "data:1026",
                                                                    "EFO:0003815"
                                                                ]
                                                            }
                                                        ],
                                                        "examples": [
                                                            "MONDO:0100096",
                                                            "EFO:0003101",
                                                            "EFO:0005518",
                                                            "EFO:0002944",
                                                            "EFO:0003813"
                                                        ]
                                                    },
                                                    "termLabel": {
                                                        "type": "string",
                                                        "title": "Label of the term",
                                                        "description": "The label of a term is the human-readable string associated with the identifier. \\nIt is not required that it matches the label of the termId within the referenced \\nontology, although it should. This is due to the fact that the source of truth \\nwill always be the termId, and not the label, which adds more context.",
                                                        "minLength": 1,
                                                        "examples": [
                                                            "COVID-19",
                                                            "Axila skin",
                                                            "bone marrow cell",
                                                            "astrocyte",
                                                            "oligodendrocyte",
                                                            "Unknown",
                                                            "Unaffected",
                                                            "homo sapiens"
                                                        ]
                                                    }
                                                }
                                            }
                                        ],
                                        "properties": {
                                            "termId": {
                                                "title": "Ontology constraints for this specific termId",
                                                "examples": [
                                                    "refseq:NC_000001.11",
                                                    "refseq:NC_012920.1"
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "allOf": [
                {
                    "title": "If the assay is of type array its specifications will be expected",
                    "if": {
                        "required": [
                            "assayInstrument"
                        ],
                        "properties": {
                            "assayInstrument": {
                                "enum": [
                                    "array"
                                ]
                            }
                        }
                    },
                    "then": {
                        "required": [
                            "arrayAssaySpecifications"
                        ]
                    }
                }
            ]
        },
        "assayRelationships": {
            "type": "array",
            "title": "Assay relationships",
            "description": "Comprises metadata (e.g. Source or Target) of a directional association between \\ntwo entities, one of which shall be the current assay.",
            "minItems": 1,
            "additionalProperties": false,
            "uniqueItems": true,
            "items": {
                "allOf": [
                    {
                        "type": "object",
                        "title": "EGA Relationships object",
                        "description": "Object containing the base metadata attributes of a relationship object in the \\nEGA. Comprises metadata (e.g. Source or Target) of a directional association \\nbetween two entities. One of the entitis **needs** to be the current instance. \\nFor instance, a study JSON document should not contain relationships between a \\nsample and an individual. Therefore, only one end of the relationship is given: \\nif the source is present, the target is inferred to be the current instance; if \\nthe target is given, then it's the source the one inferred as the current \\ninstance. Examples of common relationships: (1) a sample being referenced in an \\nexperiment; (2) an study being the same as another study at a different archive \\n(e.g. in BioStudies); (3) an individual being the parent of another individual; \\n(4) hundreds of samples being grouped with each other for broad reasons.",
                        "required": [
                            "rType"
                        ],
                        "additionalProperties": false,
                        "properties": {
                            "rType": {
                                "type": "string",
                                "title": "Relationship type",
                                "description": "ID (e.g. sameAs) of the type of the relationship. To be chosen from a controlled \\nvocabulary (CV) list. If you cannot find your term in the CV list, please create \\nan issue at our [metadata GitHub \\nrepository](https://github.com/EbiEga/ega-metadata-schema) proposing its \\naddition.",
                                "enum": [
                                    "referencedBy",
                                    "developsFrom",
                                    "sameAs",
                                    "memberOf",
                                    "groupedWith",
                                    "familyRelationshipWith",
                                    "childOf",
                                    "isAfter",
                                    "publishedIn",
                                    "submittedBy",
                                    "contactOf",
                                    "mainContactOf"
                                ],
                                "meta:enum": {
                                    "referencedBy": "[SIO:000252]",
                                    "developsFrom": "[RO:0002202]",
                                    "sameAs": "[NCIT:C64637]",
                                    "memberOf": "[RO:0002350]",
                                    "groupedWith": "",
                                    "familyRelationshipWith": "[EFO:0004424]",
                                    "childOf": "[GSSO:000728]",
                                    "isAfter": "[SIO:000211]",
                                    "publishedIn": "[EFO:0001796]",
                                    "submittedBy": "[NCIT:C25695]",
                                    "contactOf": "[NCIT:C25461]",
                                    "mainContactOf": ""
                                },
                                "examples": [
                                    "referencedBy"
                                ]
                            },
                            "rSource": {
                                "type": "object",
                                "title": "Source of the relationship",
                                "description": "Object reference of the relationship's source. In other words, the starting \\npoint of the relationship: in 'sample_A developsFrom sample_B' the source is \\n'sample_A'.",
                                "allOf": [
                                    {
                                        "type": "object",
                                        "title": "Relationship's object (either source or target)",
                                        "description": "Node containing metadata (identifiers and the type of reference) of one of the \\nends of the relationship, whether it is the source or the target of the \\nrelationship.",
                                        "additionalProperties": false,
                                        "required": [
                                            "objectId",
                                            "objectType"
                                        ],
                                        "properties": {
                                            "objectId": {
                                                "type": "object",
                                                "title": "Relationship's object's IDs block",
                                                "description": "Node containing the main identifiers of the relationship's object (e.g. alias, \\ncenterName...), inherited from the common definitions \\n(#/definitions/objectCoreId).",
                                                "allOf": [
                                                    {
                                                        "type": "object",
                                                        "title": "Core identifiers of an object",
                                                        "description": "Base definition containing the properties (e.g. Sample's alias) of a minimal \\nidentification layer of an EGA object (e.g. Sample).",
                                                        "additionalProperties": false,
                                                        "properties": {
                                                            "alias": {
                                                                "type": "string",
                                                                "title": "Alias of an object",
                                                                "description": "Submitter designated name (e.g. 'my_sample_J13') for the object (e.g. Sample). \\nThe name must be unique within the submission account (e.g. 'ega-box-79'), since \\nthe aliases and submission accounts are concatenated within our database to \\nobtain the unique alias (e.g. 'ega-box-79::my_sample_J13').",
                                                                "minLength": 1,
                                                                "examples": [
                                                                    "my_sample_J13"
                                                                ]
                                                            },
                                                            "centerName": {
                                                                "type": "string",
                                                                "title": "Center name of the submitter",
                                                                "description": "Center name (e.g. 'EBI-TEST') associated to the submitter. In other words, it is \\nthe acronym of the submitter's account (provided by the HelpDesk team).",
                                                                "minLength": 1,
                                                                "examples": [
                                                                    "EBI-TEST"
                                                                ]
                                                            },
                                                            "egaAccession": {
                                                                "type": "string",
                                                                "title": "EGA's accession of the object",
                                                                "description": "The object accession (i.e. unique identifier) assigned by the archive (EGA). \\nObject accessions can be found in the 'Identifiers' section of the EGA-archive \\nwebsite (https://ega-archive.org/metadata/how-to-use-the-api) and commonly start \\nwith EGA, followed by the distinctive letter of the object and finally the \\nnumeric ID of the instance.",
                                                                "examples": [
                                                                    "EGAN00003245489"
                                                                ]
                                                            },
                                                            "externalAccessions": {
                                                                "type": "array",
                                                                "title": "External accessions array",
                                                                "description": "External accession node to reference objects in other archives (e.g. an already \\nexisting sample at BioSamples).",
                                                                "minItems": 1,
                                                                "additionalProperties": false,
                                                                "uniqueItems": true,
                                                                "items": {
                                                                    "type": "object",
                                                                    "title": "Object External accession",
                                                                    "description": "External accession property defining a reference to an external record in \\nanother resource. For example, a reference to a sequence deposited in NCBI's \\nNucleotide database (e.g. 'https://identifiers.org/nucleotide:T35715.1'); or a \\nsample record in BioSamples (e.g. \\n'https://identifiers.org/biosample:SAMEA7616999').",
                                                                    "additionalProperties": false,
                                                                    "properties": {
                                                                        "objectExternalAccessionIdentifier": {
                                                                            "type": "object",
                                                                            "title": "Identifier of the external accession",
                                                                            "description": "Unique identifier of an external record. Its 'termId' (e.g. \\n'biosample:SAMEA7616999', 'pubmed:30962759', 'biostudies:S-EPMC3314381', etc.) \\nshall follow CURIE format of ``prefix``:``accession``, where: (1) the prefix \\n(e.g. 'biosample') is unique and assigned to the external resource at \\nidentifiers.org; (2) and the unique accession of the object (e.g. SAMEA7616999) \\nshould resolve to an existing record within the resource. If in doubt, use \\nidentifiers.org to resolve your external accession: 'https://identifiers.org/' + \\n'termId', e.g. 'https://identifiers.org/biosample:SAMEA7616999'",
                                                                            "allOf": [
                                                                                {
                                                                                    "type": "object",
                                                                                    "title": "Ontology term",
                                                                                    "description": "This property represents an ontology term (a.k.a. class). It consists on two \\nproperties: the term identifier (termId) and its label (termLabel). This \\nproperty and its structure is inherited across many other elements in the \\nschemas. It is there, when inherited, where the real ontology constraint is put \\nin place (e.g. using 'graphRestriction' keywords). Based on phenopacket's [OntologyClass](https://phenopacket-schema.readthedocs.io/en/latest/ontologyclass.html)",
                                                                                    "additionalProperties": false,
                                                                                    "required": [
                                                                                        "termId",
                                                                                        "termLabel"
                                                                                    ],
                                                                                    "properties": {
                                                                                        "termId": {
                                                                                            "type": "string",
                                                                                            "title": "ID of the term",
                                                                                            "description": "The identifier of an ontology term must be in CURIE format (check property \\n'curieGeneralPattern'). Whether a specific term is valid or not according to an \\nontology hierarchy is checked at each specific termId using ontology validation \\nkeywords (e.g. 'graphRestriction').",
                                                                                            "minLength": 1,
                                                                                            "allOf": [
                                                                                                {
                                                                                                    "type": "string",
                                                                                                    "title": "Compact URI (CURIE) pattern",
                                                                                                    "description": "A [W3C Compact URI](https://www.w3.org/TR/curie/) formatted string. A CURIE \\nstring has the structure ``prefix``:``reference``, as defined by the W3C syntax. \\nEven though we do not restrict prefixes, we recommend that the term used as \\n``prefix`` is uniformely resolved. In other words, it is better to use prefixes \\n(e.g. 'ensembl') from identifiers.org.",
                                                                                                    "minLength": 1,
                                                                                                    "pattern": "^\\w[^:]*:.+$",
                                                                                                    "examples": [
                                                                                                        "ensembl:ENSG00000139618",
                                                                                                        "HGNC:11535",
                                                                                                        "data:1026",
                                                                                                        "EFO:0003815"
                                                                                                    ]
                                                                                                }
                                                                                            ],
                                                                                            "examples": [
                                                                                                "MONDO:0100096",
                                                                                                "EFO:0003101",
                                                                                                "EFO:0005518",
                                                                                                "EFO:0002944",
                                                                                                "EFO:0003813"
                                                                                            ]
                                                                                        },
                                                                                        "termLabel": {
                                                                                            "type": "string",
                                                                                            "title": "Label of the term",
                                                                                            "description": "The label of a term is the human-readable string associated with the identifier. \\nIt is not required that it matches the label of the termId within the referenced \\nontology, although it should. This is due to the fact that the source of truth \\nwill always be the termId, and not the label, which adds more context.",
                                                                                            "minLength": 1,
                                                                                            "examples": [
                                                                                                "COVID-19",
                                                                                                "Axila skin",
                                                                                                "bone marrow cell",
                                                                                                "astrocyte",
                                                                                                "oligodendrocyte",
                                                                                                "Unknown",
                                                                                                "Unaffected",
                                                                                                "homo sapiens"
                                                                                            ]
                                                                                        }
                                                                                    }
                                                                                }
                                                                            ]
                                                                        },
                                                                        "objectExternalAccessionURI": {
                                                                            "type": "string",
                                                                            "title": "URI of the external accession",
                                                                            "description": "Full or partial URL/URI of the external accession, for systems to resolve it. \\nShould only be used in case identifiers.org does not contain a namespace for the \\nrequired resource or the mapping to the URI from its identifier is faulty.",
                                                                            "allOf": [
                                                                                {
                                                                                    "type": "string",
                                                                                    "title": "URL/URI pattern",
                                                                                    "description": "This object exists to hold the pattern that a URL or URI should have. For it to \\nbe referenced elsewhere within this (or other) JSON schema.",
                                                                                    "pattern": "^((http|https)://)(www.)?[a-zA-Z0-9@:%._\\+~#?&//=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%._\\+~#?&//=]*)$",
                                                                                    "examples": [
                                                                                        "https://phenopacket-schema.readthedocs.io/en/latest/externalreference.html",
                                                                                        "https://www.ebi.ac.uk/arrayexpress/experiments/E-MEXP-1712/",
                                                                                        "https://www.geeksforgeeks.org/check-if-an-url-is-valid-or-not-using-regular-expression/"
                                                                                    ]
                                                                                }
                                                                            ],
                                                                            "examples": [
                                                                                "https://www.ebi.ac.uk/biosamples/samples/SAMN11716999",
                                                                                "https://pubmed.ncbi.nlm.nih.gov/19491253",
                                                                                "https://www.ebi.ac.uk/arrayexpress/experiments/E-MEXP-1712/"
                                                                            ]
                                                                        },
                                                                        "objectExternalAccessionDescription": {
                                                                            "type": [
                                                                                "string",
                                                                                "number"
                                                                            ],
                                                                            "title": "Description of the external accession",
                                                                            "description": "Optional description of the external accession, used to add context to the \\nidentifier if applicable.",
                                                                            "examples": [
                                                                                "taken from biosample temporarily",
                                                                                "Ensembl's part of the accessions",
                                                                                "first",
                                                                                2,
                                                                                "Recurrent Erythema Nodosum in a Child with a SHOC2 Gene Mutation"
                                                                            ]
                                                                        }
                                                                    },
                                                                    "anyOf": [
                                                                        {
                                                                            "title": "Either the identifier is needed",
                                                                            "required": [
                                                                                "objectExternalAccessionIdentifier"
                                                                            ]
                                                                        },
                                                                        {
                                                                            "title": "Or the reference is needed",
                                                                            "required": [
                                                                                "objectExternalAccessionURI"
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            }
                                                        },
                                                        "anyOf": [
                                                            {
                                                                "title": "Check core IDs: combination of Alias and Center name",
                                                                "required": [
                                                                    "alias",
                                                                    "centerName"
                                                                ]
                                                            },
                                                            {
                                                                "title": "Check core IDs: EGA accession ID",
                                                                "required": [
                                                                    "egaAccession"
                                                                ]
                                                            },
                                                            {
                                                                "title": "Check core IDs: external accessions",
                                                                "required": [
                                                                    "externalAccessions"
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ]
                                            },
                                            "objectType": {
                                                "type": "string",
                                                "title": "Type of the relationship's object",
                                                "description": "Type of the relationship's object, chosen from a list of CV (e.g. experiment, \\ndataset, externalURL...). Both the source or target types can be: (1) the object \\ntag of one of EGA's object (e.g. file, sample...); (2) an 'externalAccession'; \\n(3) or an 'externalURL'. Term chosen from a list of controlled vocabulary (CV). \\nIf you cannot find your term in the CV list, please create an issue at our \\n[metadata GitHub repository](https://github.com/EbiEga/ega-metadata-schema) \\nproposing its addition.",
                                                "enum": [
                                                    "experiment",
                                                    "study",
                                                    "sample",
                                                    "individual",
                                                    "submission",
                                                    "assay",
                                                    "dataset",
                                                    "analysis",
                                                    "policy",
                                                    "DAC",
                                                    "protocol",
                                                    "externalAccession",
                                                    "externalURL"
                                                ],
                                                "meta:enum": {
                                                    "experiment": "Contains information about the experimental design of the sequencing",
                                                    "study": "Information about the study",
                                                    "sample": "Information about the used samples",
                                                    "individual": "Information about the participants (i.e. humans) of the study",
                                                    "submission": "Information about the submission actions",
                                                    "assay": "Contains information about the specific assays (either sequencing or array \\nassays) from the experiment",
                                                    "dataset": "Contains the collection of assay/analysis data files to be subject to controlled \\naccess",
                                                    "analysis": "Contains the analysis metadata and data files",
                                                    "policy": "Contains information related to the Data Access Agreement (DAA) the dataset is \\nsubject to",
                                                    "DAC": "Contains information about the Data Access Committee (DAC)",
                                                    "protocol": "Contains information about a planned process.",
                                                    "externalAccession": "An external accession among the ones Entrez (NCBI's text search) contemplates \\n(search for the terms here: \\nhttps://www.ncbi.nlm.nih.gov/entrez/eutils/einfo.fcgi?)",
                                                    "externalURL": "An external URL resource, of any type"
                                                },
                                                "examples": [
                                                    "sample"
                                                ]
                                            }
                                        },
                                        "allOf": [
                                            {
                                                "type": "object",
                                                "title": "Check that the objectId's accession pattern and objectType match",
                                                "description": "This object exists with the only purpose of being a reference as a pattern check \\nof a given objectId and objectType. The constraint consists in asserting that, \\nif the object identifier is an EGA accession, its pattern matches the object \\ntype (e.g. if objectType is 'sample', its EGA accession needs to match \\n'^EGAN[0-9]{11}$')",
                                                "anyOf": [
                                                    {
                                                        "title": "Alias and Centername: objectId and objectType check",
                                                        "description": "A check that ensures that the alias and centername are given as the objectType. \\nSince the alias and centername cannot be checked for specific objectTypes (i.e. \\neach can name their objects in different ways), this block exists here just so \\nthat this option is allowed.",
                                                        "properties": {
                                                            "objectId": {
                                                                "required": [
                                                                    "alias",
                                                                    "centerName"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "External accession: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'externalAccession' is given as the objectType, \\nthe corresponding node exists within objectId",
                                                        "properties": {
                                                            "objectId": {
                                                                "required": [
                                                                    "externalAccessions"
                                                                ]
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "externalAccession"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Experiment: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'experiment' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA experiment's ID (EGAX...)",
                                                                        "pattern": "^EGAX[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAX00002189113"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "experiment"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Study: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'study' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA study's ID (EGAS...)",
                                                                        "pattern": "^EGAS[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAS00001004508"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "study"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Sample: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'sample' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA sample's ID (EGAN...)",
                                                                        "pattern": "^EGAN[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAN00003245489"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "sample"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Submission: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'submission' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA submission's ID (EGAB...)",
                                                                        "pattern": "^EGAB[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAB00001001831"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "submission"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Assay: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'assay' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA assay's ID (EGAR...)",
                                                                        "pattern": "^EGAR[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAR00001314547"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "assay"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Dataset: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'dataset' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA dataset's ID (EGAD...)",
                                                                        "pattern": "^EGAD[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAD00001004170"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "dataset"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Analysis: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'analysis' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA analysis's ID (EGAZ...)",
                                                                        "pattern": "^EGAZ[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAZ00001004170"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "analysis"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Policy: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'policy' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA policy's ID (EGAP...)",
                                                                        "pattern": "^EGAP[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAP00001001831"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "policy"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "DAC: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'DAC' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA DAC's ID (EGAC...)",
                                                                        "pattern": "^EGAC[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAC00001000908"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "DAC"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Individual: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'individual' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA Individual's ID (EGAI...)",
                                                                        "pattern": "^EGAI[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAI00001159712"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "individual"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Protocol: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'protocol' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA protocol's ID (EGAO...)",
                                                                        "pattern": "^EGAO[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAO00001159483"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "protocol"
                                                                ]
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            "rTarget": {
                                "type": "object",
                                "title": "Target of the relationship",
                                "description": "Object reference of the relationship's target. In other words, the ending point \\nof the relationship: in 'sample_A developsFrom sample_B' the target is \\n'sample_B'.",
                                "allOf": [
                                    {
                                        "type": "object",
                                        "title": "Relationship's object (either source or target)",
                                        "description": "Node containing metadata (identifiers and the type of reference) of one of the \\nends of the relationship, whether it is the source or the target of the \\nrelationship.",
                                        "additionalProperties": false,
                                        "required": [
                                            "objectId",
                                            "objectType"
                                        ],
                                        "properties": {
                                            "objectId": {
                                                "type": "object",
                                                "title": "Relationship's object's IDs block",
                                                "description": "Node containing the main identifiers of the relationship's object (e.g. alias, \\ncenterName...), inherited from the common definitions \\n(#/definitions/objectCoreId).",
                                                "allOf": [
                                                    {
                                                        "type": "object",
                                                        "title": "Core identifiers of an object",
                                                        "description": "Base definition containing the properties (e.g. Sample's alias) of a minimal \\nidentification layer of an EGA object (e.g. Sample).",
                                                        "additionalProperties": false,
                                                        "properties": {
                                                            "alias": {
                                                                "type": "string",
                                                                "title": "Alias of an object",
                                                                "description": "Submitter designated name (e.g. 'my_sample_J13') for the object (e.g. Sample). \\nThe name must be unique within the submission account (e.g. 'ega-box-79'), since \\nthe aliases and submission accounts are concatenated within our database to \\nobtain the unique alias (e.g. 'ega-box-79::my_sample_J13').",
                                                                "minLength": 1,
                                                                "examples": [
                                                                    "my_sample_J13"
                                                                ]
                                                            },
                                                            "centerName": {
                                                                "type": "string",
                                                                "title": "Center name of the submitter",
                                                                "description": "Center name (e.g. 'EBI-TEST') associated to the submitter. In other words, it is \\nthe acronym of the submitter's account (provided by the HelpDesk team).",
                                                                "minLength": 1,
                                                                "examples": [
                                                                    "EBI-TEST"
                                                                ]
                                                            },
                                                            "egaAccession": {
                                                                "type": "string",
                                                                "title": "EGA's accession of the object",
                                                                "description": "The object accession (i.e. unique identifier) assigned by the archive (EGA). \\nObject accessions can be found in the 'Identifiers' section of the EGA-archive \\nwebsite (https://ega-archive.org/metadata/how-to-use-the-api) and commonly start \\nwith EGA, followed by the distinctive letter of the object and finally the \\nnumeric ID of the instance.",
                                                                "examples": [
                                                                    "EGAN00003245489"
                                                                ]
                                                            },
                                                            "externalAccessions": {
                                                                "type": "array",
                                                                "title": "External accessions array",
                                                                "description": "External accession node to reference objects in other archives (e.g. an already \\nexisting sample at BioSamples).",
                                                                "minItems": 1,
                                                                "additionalProperties": false,
                                                                "uniqueItems": true,
                                                                "items": {
                                                                    "type": "object",
                                                                    "title": "Object External accession",
                                                                    "description": "External accession property defining a reference to an external record in \\nanother resource. For example, a reference to a sequence deposited in NCBI's \\nNucleotide database (e.g. 'https://identifiers.org/nucleotide:T35715.1'); or a \\nsample record in BioSamples (e.g. \\n'https://identifiers.org/biosample:SAMEA7616999').",
                                                                    "additionalProperties": false,
                                                                    "properties": {
                                                                        "objectExternalAccessionIdentifier": {
                                                                            "type": "object",
                                                                            "title": "Identifier of the external accession",
                                                                            "description": "Unique identifier of an external record. Its 'termId' (e.g. \\n'biosample:SAMEA7616999', 'pubmed:30962759', 'biostudies:S-EPMC3314381', etc.) \\nshall follow CURIE format of ``prefix``:``accession``, where: (1) the prefix \\n(e.g. 'biosample') is unique and assigned to the external resource at \\nidentifiers.org; (2) and the unique accession of the object (e.g. SAMEA7616999) \\nshould resolve to an existing record within the resource. If in doubt, use \\nidentifiers.org to resolve your external accession: 'https://identifiers.org/' + \\n'termId', e.g. 'https://identifiers.org/biosample:SAMEA7616999'",
                                                                            "allOf": [
                                                                                {
                                                                                    "type": "object",
                                                                                    "title": "Ontology term",
                                                                                    "description": "This property represents an ontology term (a.k.a. class). It consists on two \\nproperties: the term identifier (termId) and its label (termLabel). This \\nproperty and its structure is inherited across many other elements in the \\nschemas. It is there, when inherited, where the real ontology constraint is put \\nin place (e.g. using 'graphRestriction' keywords). Based on phenopacket's [OntologyClass](https://phenopacket-schema.readthedocs.io/en/latest/ontologyclass.html)",
                                                                                    "additionalProperties": false,
                                                                                    "required": [
                                                                                        "termId",
                                                                                        "termLabel"
                                                                                    ],
                                                                                    "properties": {
                                                                                        "termId": {
                                                                                            "type": "string",
                                                                                            "title": "ID of the term",
                                                                                            "description": "The identifier of an ontology term must be in CURIE format (check property \\n'curieGeneralPattern'). Whether a specific term is valid or not according to an \\nontology hierarchy is checked at each specific termId using ontology validation \\nkeywords (e.g. 'graphRestriction').",
                                                                                            "minLength": 1,
                                                                                            "allOf": [
                                                                                                {
                                                                                                    "type": "string",
                                                                                                    "title": "Compact URI (CURIE) pattern",
                                                                                                    "description": "A [W3C Compact URI](https://www.w3.org/TR/curie/) formatted string. A CURIE \\nstring has the structure ``prefix``:``reference``, as defined by the W3C syntax. \\nEven though we do not restrict prefixes, we recommend that the term used as \\n``prefix`` is uniformely resolved. In other words, it is better to use prefixes \\n(e.g. 'ensembl') from identifiers.org.",
                                                                                                    "minLength": 1,
                                                                                                    "pattern": "^\\w[^:]*:.+$",
                                                                                                    "examples": [
                                                                                                        "ensembl:ENSG00000139618",
                                                                                                        "HGNC:11535",
                                                                                                        "data:1026",
                                                                                                        "EFO:0003815"
                                                                                                    ]
                                                                                                }
                                                                                            ],
                                                                                            "examples": [
                                                                                                "MONDO:0100096",
                                                                                                "EFO:0003101",
                                                                                                "EFO:0005518",
                                                                                                "EFO:0002944",
                                                                                                "EFO:0003813"
                                                                                            ]
                                                                                        },
                                                                                        "termLabel": {
                                                                                            "type": "string",
                                                                                            "title": "Label of the term",
                                                                                            "description": "The label of a term is the human-readable string associated with the identifier. \\nIt is not required that it matches the label of the termId within the referenced \\nontology, although it should. This is due to the fact that the source of truth \\nwill always be the termId, and not the label, which adds more context.",
                                                                                            "minLength": 1,
                                                                                            "examples": [
                                                                                                "COVID-19",
                                                                                                "Axila skin",
                                                                                                "bone marrow cell",
                                                                                                "astrocyte",
                                                                                                "oligodendrocyte",
                                                                                                "Unknown",
                                                                                                "Unaffected",
                                                                                                "homo sapiens"
                                                                                            ]
                                                                                        }
                                                                                    }
                                                                                }
                                                                            ]
                                                                        },
                                                                        "objectExternalAccessionURI": {
                                                                            "type": "string",
                                                                            "title": "URI of the external accession",
                                                                            "description": "Full or partial URL/URI of the external accession, for systems to resolve it. \\nShould only be used in case identifiers.org does not contain a namespace for the \\nrequired resource or the mapping to the URI from its identifier is faulty.",
                                                                            "allOf": [
                                                                                {
                                                                                    "type": "string",
                                                                                    "title": "URL/URI pattern",
                                                                                    "description": "This object exists to hold the pattern that a URL or URI should have. For it to \\nbe referenced elsewhere within this (or other) JSON schema.",
                                                                                    "pattern": "^((http|https)://)(www.)?[a-zA-Z0-9@:%._\\+~#?&//=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%._\\+~#?&//=]*)$",
                                                                                    "examples": [
                                                                                        "https://phenopacket-schema.readthedocs.io/en/latest/externalreference.html",
                                                                                        "https://www.ebi.ac.uk/arrayexpress/experiments/E-MEXP-1712/",
                                                                                        "https://www.geeksforgeeks.org/check-if-an-url-is-valid-or-not-using-regular-expression/"
                                                                                    ]
                                                                                }
                                                                            ],
                                                                            "examples": [
                                                                                "https://www.ebi.ac.uk/biosamples/samples/SAMN11716999",
                                                                                "https://pubmed.ncbi.nlm.nih.gov/19491253",
                                                                                "https://www.ebi.ac.uk/arrayexpress/experiments/E-MEXP-1712/"
                                                                            ]
                                                                        },
                                                                        "objectExternalAccessionDescription": {
                                                                            "type": [
                                                                                "string",
                                                                                "number"
                                                                            ],
                                                                            "title": "Description of the external accession",
                                                                            "description": "Optional description of the external accession, used to add context to the \\nidentifier if applicable.",
                                                                            "examples": [
                                                                                "taken from biosample temporarily",
                                                                                "Ensembl's part of the accessions",
                                                                                "first",
                                                                                2,
                                                                                "Recurrent Erythema Nodosum in a Child with a SHOC2 Gene Mutation"
                                                                            ]
                                                                        }
                                                                    },
                                                                    "anyOf": [
                                                                        {
                                                                            "title": "Either the identifier is needed",
                                                                            "required": [
                                                                                "objectExternalAccessionIdentifier"
                                                                            ]
                                                                        },
                                                                        {
                                                                            "title": "Or the reference is needed",
                                                                            "required": [
                                                                                "objectExternalAccessionURI"
                                                                            ]
                                                                        }
                                                                    ]
                                                                }
                                                            }
                                                        },
                                                        "anyOf": [
                                                            {
                                                                "title": "Check core IDs: combination of Alias and Center name",
                                                                "required": [
                                                                    "alias",
                                                                    "centerName"
                                                                ]
                                                            },
                                                            {
                                                                "title": "Check core IDs: EGA accession ID",
                                                                "required": [
                                                                    "egaAccession"
                                                                ]
                                                            },
                                                            {
                                                                "title": "Check core IDs: external accessions",
                                                                "required": [
                                                                    "externalAccessions"
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ]
                                            },
                                            "objectType": {
                                                "type": "string",
                                                "title": "Type of the relationship's object",
                                                "description": "Type of the relationship's object, chosen from a list of CV (e.g. experiment, \\ndataset, externalURL...). Both the source or target types can be: (1) the object \\ntag of one of EGA's object (e.g. file, sample...); (2) an 'externalAccession'; \\n(3) or an 'externalURL'. Term chosen from a list of controlled vocabulary (CV). \\nIf you cannot find your term in the CV list, please create an issue at our \\n[metadata GitHub repository](https://github.com/EbiEga/ega-metadata-schema) \\nproposing its addition.",
                                                "enum": [
                                                    "experiment",
                                                    "study",
                                                    "sample",
                                                    "individual",
                                                    "submission",
                                                    "assay",
                                                    "dataset",
                                                    "analysis",
                                                    "policy",
                                                    "DAC",
                                                    "protocol",
                                                    "externalAccession",
                                                    "externalURL"
                                                ],
                                                "meta:enum": {
                                                    "experiment": "Contains information about the experimental design of the sequencing",
                                                    "study": "Information about the study",
                                                    "sample": "Information about the used samples",
                                                    "individual": "Information about the participants (i.e. humans) of the study",
                                                    "submission": "Information about the submission actions",
                                                    "assay": "Contains information about the specific assays (either sequencing or array \\nassays) from the experiment",
                                                    "dataset": "Contains the collection of assay/analysis data files to be subject to controlled \\naccess",
                                                    "analysis": "Contains the analysis metadata and data files",
                                                    "policy": "Contains information related to the Data Access Agreement (DAA) the dataset is \\nsubject to",
                                                    "DAC": "Contains information about the Data Access Committee (DAC)",
                                                    "protocol": "Contains information about a planned process.",
                                                    "externalAccession": "An external accession among the ones Entrez (NCBI's text search) contemplates \\n(search for the terms here: \\nhttps://www.ncbi.nlm.nih.gov/entrez/eutils/einfo.fcgi?)",
                                                    "externalURL": "An external URL resource, of any type"
                                                },
                                                "examples": [
                                                    "sample"
                                                ]
                                            }
                                        },
                                        "allOf": [
                                            {
                                                "type": "object",
                                                "title": "Check that the objectId's accession pattern and objectType match",
                                                "description": "This object exists with the only purpose of being a reference as a pattern check \\nof a given objectId and objectType. The constraint consists in asserting that, \\nif the object identifier is an EGA accession, its pattern matches the object \\ntype (e.g. if objectType is 'sample', its EGA accession needs to match \\n'^EGAN[0-9]{11}$')",
                                                "anyOf": [
                                                    {
                                                        "title": "Alias and Centername: objectId and objectType check",
                                                        "description": "A check that ensures that the alias and centername are given as the objectType. \\nSince the alias and centername cannot be checked for specific objectTypes (i.e. \\neach can name their objects in different ways), this block exists here just so \\nthat this option is allowed.",
                                                        "properties": {
                                                            "objectId": {
                                                                "required": [
                                                                    "alias",
                                                                    "centerName"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "External accession: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'externalAccession' is given as the objectType, \\nthe corresponding node exists within objectId",
                                                        "properties": {
                                                            "objectId": {
                                                                "required": [
                                                                    "externalAccessions"
                                                                ]
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "externalAccession"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Experiment: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'experiment' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA experiment's ID (EGAX...)",
                                                                        "pattern": "^EGAX[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAX00002189113"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "experiment"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Study: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'study' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA study's ID (EGAS...)",
                                                                        "pattern": "^EGAS[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAS00001004508"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "study"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Sample: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'sample' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA sample's ID (EGAN...)",
                                                                        "pattern": "^EGAN[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAN00003245489"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "sample"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Submission: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'submission' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA submission's ID (EGAB...)",
                                                                        "pattern": "^EGAB[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAB00001001831"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "submission"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Assay: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'assay' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA assay's ID (EGAR...)",
                                                                        "pattern": "^EGAR[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAR00001314547"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "assay"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Dataset: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'dataset' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA dataset's ID (EGAD...)",
                                                                        "pattern": "^EGAD[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAD00001004170"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "dataset"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Analysis: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'analysis' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA analysis's ID (EGAZ...)",
                                                                        "pattern": "^EGAZ[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAZ00001004170"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "analysis"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Policy: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'policy' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA policy's ID (EGAP...)",
                                                                        "pattern": "^EGAP[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAP00001001831"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "policy"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "DAC: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'DAC' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA DAC's ID (EGAC...)",
                                                                        "pattern": "^EGAC[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAC00001000908"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "DAC"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Individual: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'individual' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA Individual's ID (EGAI...)",
                                                                        "pattern": "^EGAI[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAI00001159712"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "individual"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "title": "Protocol: objectId and objectType check",
                                                        "description": "A check that ensures that, if 'protocol' is given as the objectType and an EGA \\naccession for it is given, it matches the corresponding EGA ID pattern.",
                                                        "properties": {
                                                            "objectId": {
                                                                "properties": {
                                                                    "egaAccession": {
                                                                        "type": "string",
                                                                        "title": "Pattern of an EGA protocol's ID (EGAO...)",
                                                                        "pattern": "^EGAO[0-9]{11}$",
                                                                        "examples": [
                                                                            "EGAO00001159483"
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "objectType": {
                                                                "enum": [
                                                                    "protocol"
                                                                ]
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            "rLabel": {
                                "type": "string",
                                "title": "Custom label of the relationship",
                                "description": "Custom free-form label of the relationship, used to add extra details of the \\nrelationship if needed.",
                                "minLength": 1,
                                "examples": [
                                    "Source individual is the third child of the target individual",
                                    "Grouped samples by colour of the medium",
                                    "Both samples are the same because of an error in the submission at..."
                                ]
                            }
                        },
                        "oneOf": [
                            {
                                "title": "The source is given (i.e. the target is inferred as the current instance)",
                                "required": [
                                    "rSource"
                                ]
                            },
                            {
                                "title": "The target is given (i.e. the source is inferred as the current instance)",
                                "required": [
                                    "rTarget"
                                ]
                            }
                        ]
                    },
                    {
                        "title": "Relationship constraints for an assay",
                        "description": "Not all possible relationships between objects are allowed (e.g. an individual \\nshould not be linked to a policy). This node contains the restricted \\nrelationships that can be given for a XXXXX.",
                        "anyOf": [
                            {
                                "title": "Allowed relationships of type referencedBy (main ones)",
                                "allOf": [
                                    {
                                        "type": "object",
                                        "title": "Relationship type: referencedBy",
                                        "description": "Node to be used as a relationship type for relationship contraints.",
                                        "required": [
                                            "rType"
                                        ],
                                        "properties": {
                                            "rType": {
                                                "const": "referencedBy"
                                            }
                                        }
                                    },
                                    {
                                        "anyOf": [
                                            {
                                                "type": "object",
                                                "title": "Relationship target: dataset",
                                                "description": "Node to be used as an object type for relationship contraints.",
                                                "required": [
                                                    "rTarget"
                                                ],
                                                "properties": {
                                                    "rTarget": {
                                                        "properties": {
                                                            "objectType": {
                                                                "const": "dataset"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship target: analysis",
                                                "description": "Node to be used as an object type for relationship contraints.",
                                                "required": [
                                                    "rTarget"
                                                ],
                                                "properties": {
                                                    "rTarget": {
                                                        "properties": {
                                                            "objectType": {
                                                                "const": "analysis"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship source: sample",
                                                "description": "Node to be used as an object type for relationship contraints.",
                                                "required": [
                                                    "rSource"
                                                ],
                                                "properties": {
                                                    "rSource": {
                                                        "properties": {
                                                            "objectType": {
                                                                "const": "sample"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship source: experiment",
                                                "description": "Node to be used as an object type for relationship contraints.",
                                                "required": [
                                                    "rSource"
                                                ],
                                                "properties": {
                                                    "rSource": {
                                                        "properties": {
                                                            "objectType": {
                                                                "const": "experiment"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship source: submission",
                                                "description": "Node to be used as an object type for relationship contraints.",
                                                "required": [
                                                    "rSource"
                                                ],
                                                "properties": {
                                                    "rSource": {
                                                        "properties": {
                                                            "objectType": {
                                                                "const": "submission"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "title": "Allowed relationships of type groupedWith, isAfter, sameAs (optional ones)",
                                "allOf": [
                                    {
                                        "anyOf": [
                                            {
                                                "type": "object",
                                                "title": "Relationship type: groupedWith",
                                                "description": "Node to be used as a relationship type for relationship contraints.",
                                                "required": [
                                                    "rType"
                                                ],
                                                "properties": {
                                                    "rType": {
                                                        "const": "groupedWith"
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship type: isAfter",
                                                "description": "Node to be used as a relationship type for relationship contraints.",
                                                "required": [
                                                    "rType"
                                                ],
                                                "properties": {
                                                    "rType": {
                                                        "const": "isAfter"
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship type: sameAs",
                                                "description": "Node to be used as a relationship type for relationship contraints.",
                                                "required": [
                                                    "rType"
                                                ],
                                                "properties": {
                                                    "rType": {
                                                        "const": "sameAs"
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        "anyOf": [
                                            {
                                                "type": "object",
                                                "title": "Relationship source: assay",
                                                "description": "Node to be used as an object type for relationship contraints.",
                                                "required": [
                                                    "rSource"
                                                ],
                                                "properties": {
                                                    "rSource": {
                                                        "properties": {
                                                            "objectType": {
                                                                "const": "assay"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship target: assay",
                                                "description": "Node to be used as an object type for relationship contraints.",
                                                "required": [
                                                    "rTarget"
                                                ],
                                                "properties": {
                                                    "rTarget": {
                                                        "properties": {
                                                            "objectType": {
                                                                "const": "assay"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "title": "Relationships of external accessions and URLs (optional ones)",
                                "description": "Almost any relationship is imaginable with external accessions and URLs.",
                                "allOf": [
                                    {
                                        "anyOf": [
                                            {
                                                "type": "object",
                                                "title": "Relationship type: childOf",
                                                "description": "Node to be used as a relationship type for relationship contraints.",
                                                "required": [
                                                    "rType"
                                                ],
                                                "properties": {
                                                    "rType": {
                                                        "const": "childOf"
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship type: familyRelationshipWith",
                                                "description": "Node to be used as a relationship type for relationship contraints.",
                                                "required": [
                                                    "rType"
                                                ],
                                                "properties": {
                                                    "rType": {
                                                        "const": "familyRelationshipWith"
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship type: groupedWith",
                                                "description": "Node to be used as a relationship type for relationship contraints.",
                                                "required": [
                                                    "rType"
                                                ],
                                                "properties": {
                                                    "rType": {
                                                        "const": "groupedWith"
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship type: sameAs",
                                                "description": "Node to be used as a relationship type for relationship contraints.",
                                                "required": [
                                                    "rType"
                                                ],
                                                "properties": {
                                                    "rType": {
                                                        "const": "sameAs"
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship type: referencedBy",
                                                "description": "Node to be used as a relationship type for relationship contraints.",
                                                "required": [
                                                    "rType"
                                                ],
                                                "properties": {
                                                    "rType": {
                                                        "const": "referencedBy"
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship type: developsFrom",
                                                "description": "Node to be used as a relationship type for relationship contraints.",
                                                "required": [
                                                    "rType"
                                                ],
                                                "properties": {
                                                    "rType": {
                                                        "const": "developsFrom"
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship type: memberOf",
                                                "description": "Node to be used as a relationship type for relationship contraints.",
                                                "required": [
                                                    "rType"
                                                ],
                                                "properties": {
                                                    "rType": {
                                                        "const": "memberOf"
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship type: isAfter",
                                                "description": "Node to be used as a relationship type for relationship contraints.",
                                                "required": [
                                                    "rType"
                                                ],
                                                "properties": {
                                                    "rType": {
                                                        "const": "isAfter"
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        "anyOf": [
                                            {
                                                "type": "object",
                                                "title": "Relationship source: externalAccession",
                                                "description": "Node to be used as an object type for relationship contraints.",
                                                "required": [
                                                    "rSource"
                                                ],
                                                "properties": {
                                                    "rSource": {
                                                        "properties": {
                                                            "objectType": {
                                                                "const": "externalAccession"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship source: externalURL",
                                                "description": "Node to be used as an object type for relationship contraints.",
                                                "required": [
                                                    "rSource"
                                                ],
                                                "properties": {
                                                    "rSource": {
                                                        "properties": {
                                                            "objectType": {
                                                                "const": "externalURL"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship target: externalAccession",
                                                "description": "Node to be used as an object type for relationship contraints.",
                                                "required": [
                                                    "rTarget"
                                                ],
                                                "properties": {
                                                    "rTarget": {
                                                        "properties": {
                                                            "objectType": {
                                                                "const": "externalAccession"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            {
                                                "type": "object",
                                                "title": "Relationship target: externalURL",
                                                "description": "Node to be used as an object type for relationship contraints.",
                                                "required": [
                                                    "rTarget"
                                                ],
                                                "properties": {
                                                    "rTarget": {
                                                        "properties": {
                                                            "objectType": {
                                                                "const": "externalURL"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            "contains": {
                "title": "Relationship constraint of 1 submission as source",
                "description": "This node defines a relationship item containing a 'submission' as a source and \\nof type 'referencedBy'. This node can be used with the keyword 'contains' at \\neach relationship array of all objects (but submission), in order to assert that \\nall objects have a submission object (EGAB...) linked to them.",
                "allOf": [
                    {
                        "type": "object",
                        "title": "Relationship type: referencedBy",
                        "description": "Node to be used as a relationship type for relationship contraints.",
                        "required": [
                            "rType"
                        ],
                        "properties": {
                            "rType": {
                                "const": "referencedBy"
                            }
                        }
                    },
                    {
                        "type": "object",
                        "title": "Relationship source: submission",
                        "description": "Node to be used as an object type for relationship contraints.",
                        "required": [
                            "rSource"
                        ],
                        "properties": {
                            "rSource": {
                                "properties": {
                                    "objectType": {
                                        "const": "submission"
                                    }
                                }
                            }
                        }
                    }
                ]
            }
        },
        "assayFiles": {
            "type": "array",
            "title": "Data files produced from an assay",
            "description": "This property contains the specific files (e.g. raw CRAM files) derived from \\nperforming the sequencing or hybridization and scanning with the sampled \\nmaterial.",
            "minItems": 1,
            "additionalProperties": false,
            "uniqueItems": true,
            "items": {
                "allOf": [
                    {
                        "type": "object",
                        "title": "EGA File object",
                        "description": "Object containing the base metadata attributes of a file object in the EGA. \\nThese can inherited elsewhere with or without extending them.",
                        "required": [
                            "filename",
                            "filetype",
                            "checksumMethod",
                            "unencryptedChecksum",
                            "encryptedChecksum"
                        ],
                        "additionalProperties": false,
                        "properties": {
                            "filename": {
                                "type": "string",
                                "title": "Filename",
                                "meta:propertyCurie": "data:1050",
                                "description": "The full name of a file, including all of their file extensions (e.g. .gpg, \\n.md5...), that identifies the file (e.g. 'my-bam-file.bam.gpg').",
                                "pattern": "^[^<>:;,?\"*|]+$",
                                "examples": [
                                    "my-bam-file.bam.gpg"
                                ]
                            },
                            "fileContent": {
                                "type": "array",
                                "title": "File content array",
                                "description": "Array of file content items. This array exists to clarify what the purpose of a \\nfile, regardless of its format, may be. For example, a TXT formatted file could \\ncontain multiple types of data, from gene annotations to READMEs. Therefore, \\nselect the items from the used ontology that best describe the content of your \\nfile.",
                                "additionalProperties": false,
                                "uniqueItems": true,
                                "minItems": 1,
                                "items": {
                                    "type": "object",
                                    "title": "File content item",
                                    "description": "Item describing the type of data a file contains or represents.",
                                    "meta:propertyCurie": "format:2350",
                                    "allOf": [
                                        {
                                            "type": "object",
                                            "title": "Ontology term",
                                            "description": "This property represents an ontology term (a.k.a. class). It consists on two \\nproperties: the term identifier (termId) and its label (termLabel). This \\nproperty and its structure is inherited across many other elements in the \\nschemas. It is there, when inherited, where the real ontology constraint is put \\nin place (e.g. using 'graphRestriction' keywords). Based on phenopacket's [OntologyClass](https://phenopacket-schema.readthedocs.io/en/latest/ontologyclass.html)",
                                            "additionalProperties": false,
                                            "required": [
                                                "termId",
                                                "termLabel"
                                            ],
                                            "properties": {
                                                "termId": {
                                                    "type": "string",
                                                    "title": "ID of the term",
                                                    "description": "The identifier of an ontology term must be in CURIE format (check property \\n'curieGeneralPattern'). Whether a specific term is valid or not according to an \\nontology hierarchy is checked at each specific termId using ontology validation \\nkeywords (e.g. 'graphRestriction').",
                                                    "minLength": 1,
                                                    "allOf": [
                                                        {
                                                            "type": "string",
                                                            "title": "Compact URI (CURIE) pattern",
                                                            "description": "A [W3C Compact URI](https://www.w3.org/TR/curie/) formatted string. A CURIE \\nstring has the structure ``prefix``:``reference``, as defined by the W3C syntax. \\nEven though we do not restrict prefixes, we recommend that the term used as \\n``prefix`` is uniformely resolved. In other words, it is better to use prefixes \\n(e.g. 'ensembl') from identifiers.org.",
                                                            "minLength": 1,
                                                            "pattern": "^\\w[^:]*:.+$",
                                                            "examples": [
                                                                "ensembl:ENSG00000139618",
                                                                "HGNC:11535",
                                                                "data:1026",
                                                                "EFO:0003815"
                                                            ]
                                                        }
                                                    ],
                                                    "examples": [
                                                        "MONDO:0100096",
                                                        "EFO:0003101",
                                                        "EFO:0005518",
                                                        "EFO:0002944",
                                                        "EFO:0003813"
                                                    ]
                                                },
                                                "termLabel": {
                                                    "type": "string",
                                                    "title": "Label of the term",
                                                    "description": "The label of a term is the human-readable string associated with the identifier. \\nIt is not required that it matches the label of the termId within the referenced \\nontology, although it should. This is due to the fact that the source of truth \\nwill always be the termId, and not the label, which adds more context.",
                                                    "minLength": 1,
                                                    "examples": [
                                                        "COVID-19",
                                                        "Axila skin",
                                                        "bone marrow cell",
                                                        "astrocyte",
                                                        "oligodendrocyte",
                                                        "Unknown",
                                                        "Unaffected",
                                                        "homo sapiens"
                                                    ]
                                                }
                                            }
                                        }
                                    ],
                                    "properties": {
                                        "termId": {
                                            "title": "Ontology constraints for this specific termId",
                                            "description": "Property containing just the ontology constraints for the file content. Notice \\nthe 'direct' being 'true', which makes the constraint more stringent, and only \\nallows for terms one step below [format:2350].",
                                            "graphRestriction ": {
                                                "ontologies": [
                                                    "obo:edam"
                                                ],
                                                "classes": [
                                                    "format:2350"
                                                ],
                                                "relations": [
                                                    "rdfs:subClassOf"
                                                ],
                                                "direct": true,
                                                "include_self": false
                                            },
                                            "examples": [
                                                "format:1919",
                                                "format:3326"
                                            ]
                                        }
                                    }
                                }
                            },
                            "filetype": {
                                "type": "string",
                                "title": "Filetype",
                                "meta:propertyCurie": "format:1915",
                                "description": "The main format in which data is structured and represented in an electronic \\nfile. It is normally defined by the file extension of the file (e.g. FASTQ for a \\n'.fastq' file). The string corresponds to the ID or name (e.g. FASTA, TSV...), \\nchosen from a list of controlled vocabulary (CV), associated with the given \\nfiletype. If you cannot find your term in the CV list, please create an issue at \\nour [metadata GitHub \\nrepository](https://github.com/EbiEga/ega-metadata-schema/issues/new/choose) \\nproposing its addition.",
                                "enum": [
                                    "CEL",
                                    "TSV",
                                    "FASTQ",
                                    "FASTA",
                                    "VCF",
                                    "SRA",
                                    "SRF",
                                    "SFF",
                                    "BAM",
                                    "CRAM",
                                    "XLSX",
                                    "CSV",
                                    "BED",
                                    "IDAT",
                                    "MAP",
                                    "PED",
                                    "BIM",
                                    "FAM",
                                    "TXT",
                                    "EXP",
                                    "GPR",
                                    "PY",
                                    "SH",
                                    "ADF",
                                    "SDRF",
                                    "IDF",
                                    "MD5",
                                    "HAP",
                                    "CSFASTA",
                                    "LOC",
                                    "HTML",
                                    "HIC",
                                    "MD",
                                    "MATLAB",
                                    "PERL",
                                    "TIF",
                                    "R",
                                    "SNP",
                                    "XML",
                                    "SVG",
                                    "PNG",
                                    "JPG",
                                    "GTC",
                                    "HDF5",
                                    "FAST5",
                                    "PAIR",
                                    "TXT",
                                    "BGI",
                                    "BGEN",
                                    "GEN",
                                    "PXF",
                                    "LOOM",
                                    "BAX.H5",
                                    "BAS.H5",
                                    "ASM",
                                    "CSI",
                                    "TBI",
                                    "BCF",
                                    "qual454",
                                    "qualsolid",
                                    "FASTQ-illumina",
                                    "FASTQ-helicos",
                                    "FASTQ-sanger",
                                    "FASTQ-solexa",
                                    "SAM",
                                    "CRAI",
                                    "BAI",
                                    "MTX",
                                    "MEX ",
                                    "GMX",
                                    "GMT",
                                    "GRP"
                                ],
                                "meta:enum": {
                                    "CEL": "[format:1638]",
                                    "TSV": "[format:3475]",
                                    "FASTQ": "[format:1930]",
                                    "FASTA": "[format:1929]",
                                    "VCF": "[format:3016]",
                                    "SRA": "[format:3698]",
                                    "SRF": "[format:3698]",
                                    "SFF": "[format:3284]",
                                    "BAM": "[format:2572]",
                                    "CRAM": "[format:3462]",
                                    "XLSX": "[format:3620]",
                                    "CSV": "[format:3752]",
                                    "BED": "[format:3003]",
                                    "IDAT": "[format:3578]",
                                    "MAP": "[format:3285]",
                                    "PED": "[format:3286]",
                                    "BIM": "[]",
                                    "FAM": "[]",
                                    "EXP": "[format:1631]",
                                    "GPR": "[format:3829]",
                                    "PY": "[format:3996]",
                                    "SH": "[]",
                                    "ADF": "[NCIT:C172213]",
                                    "SDRF": "[NCIT:C172211]",
                                    "IDF": "[NCIT:C172212]",
                                    "MD5": "[data:2190]",
                                    "HAP": "[]",
                                    "CSFASTA": "[]",
                                    "LOC": "[]",
                                    "HTML": "[format:2331]",
                                    "HIC": "[]",
                                    "MD": "[]",
                                    "MATLAB": "[format:4007]",
                                    "PERL": "[format:3998]",
                                    "TIF": "[]",
                                    "R": "[format:3999]",
                                    "SNP": "[]",
                                    "XML": "[format:2332]",
                                    "SVG": "[format:3604]",
                                    "PNG": "[format:3603]",
                                    "JPG": "[format:3579]",
                                    "GTC": "[]: An Illumina-specific file containing called genotypes in AA/AB/BB format",
                                    "HDF5": "[format:3590]",
                                    "FAST5": "[]",
                                    "PAIR": "[]",
                                    "TXT": "[format:2330]",
                                    "BGI": "[]: Index file of a BGEN file",
                                    "BGEN": "[]: Binary version of a GEN file",
                                    "GEN": "[format:3812]",
                                    "PXF": "[]: A phenopacket. An open standard for sharing disease and phenotype \\ninformation represented as PXF (Phenotype Exchange Format) files, which may be \\nencoded in JSON or YAML.",
                                    "LOOM": "[format:3913]",
                                    "BAX.H5": "[]",
                                    "BAS.H5": "[]",
                                    "ASM": "[]: The files in the ASM directory describe and annotate the genome assembly \\nwith respect to the reference genome.",
                                    "CSI": "[]",
                                    "TBI": "[format:3700]",
                                    "BCF": "[format:3020]",
                                    "qual454": "[format:3611]",
                                    "qualsolid": "[format:3610]",
                                    "FASTQ-illumina": "[format:1931]",
                                    "FASTQ-helicos": "[]",
                                    "FASTQ-sanger": "[format:1932]",
                                    "FASTQ-solexa": "[format:1933]",
                                    "SAM": "[format:2573]",
                                    "CRAI": "[]: CRAM indexing format",
                                    "BAI": "[format:3327]",
                                    "MTX": "[format:3916]",
                                    "MEX ": "[]: Market Exchange Format (MEX) for sparse matrices. It contains a matrix (MTX) \\nfile, and also gzipped TSV files with feature and barcode sequences \\ncorresponding to row and column indices respectively. Feature-barcode matrix",
                                    "GMX": "[]",
                                    "GMT": "[]",
                                    "GRP": "[]"
                                }
                            },
                            "checksumMethod": {
                                "type": "string",
                                "title": "Checksum method ID",
                                "meta:propertyCurie": "REPR:ChecksumAlgorithm",
                                "description": "Node containing both the ID (MD5 or SHA-256), describing the method which yields \\nthe checksum from a data input for the purpose of detecting errors. Term chosen \\nfrom a list of controlled vocabulary (CV). If you cannot find your term in the \\nCV list, please create an issue at our [metadata GitHub \\nrepository](https://github.com/EbiEga/ega-metadata-schema/issues/new/choose) \\nproposing its addition.",
                                "enum": [
                                    "MD5",
                                    "SHA-256"
                                ],
                                "meta:enum": {
                                    "MD5": "[NCIT:C171276]",
                                    "SHA-256": "[NCIT:C80226]"
                                }
                            },
                            "unencryptedChecksum": {
                                "type": "string",
                                "title": "Checksum [NCIT:C43522] of the unencrypted file",
                                "description": "A computed value which depends on the contents of a block of data and which is \\ntransmitted or stored along with the data in order to detect corruption of the \\ndata, computed from the unencrypted files.",
                                "examples": [
                                    "46798b5cfca45c46a84b7419f8b74735"
                                ],
                                "oneOf": [
                                    {
                                        "type": "string",
                                        "title": "Checksum pattern obtained by MD5",
                                        "description": "This object exists to hold the pattern that a checksum would have if it was \\nobtained using the algorithm MD5, for it to be referenced elsewhere within this \\n(or other) JSON schema.",
                                        "pattern": "^[0-9a-z](?:-?[0-9a-z]){31}$",
                                        "examples": [
                                            "bc527343c7ffc103111f3a694b004e2f"
                                        ]
                                    },
                                    {
                                        "type": "string",
                                        "title": "Checksum pattern obtained by SHA-256",
                                        "description": "This object exists to hold the pattern that a checksum would have if it was \\nobtained using the algorithm SHA-256, for it to be referenced elsewhere within \\nthis (or other) JSON schema.",
                                        "pattern": "^[A-Fa-f0-9]{64}$",
                                        "examples": [
                                            "c01b39c7a35ccc3b081a3e83d2c71fa9a767ebfeb45c69f08e17dfe3ef375a7b"
                                        ]
                                    }
                                ]
                            },
                            "encryptedChecksum": {
                                "type": "string",
                                "title": "Checksum [NCIT:C43522] of the encrypted file",
                                "description": "A computed value which depends on the contents of a block of data and which is \\ntransmitted or stored along with the data in order to detect corruption of the \\ndata, computed from the encrypted files.",
                                "examples": [
                                    "bc527343c7ffc103111f3a694b004e2f"
                                ],
                                "oneOf": [
                                    {
                                        "type": "string",
                                        "title": "Checksum pattern obtained by MD5",
                                        "description": "This object exists to hold the pattern that a checksum would have if it was \\nobtained using the algorithm MD5, for it to be referenced elsewhere within this \\n(or other) JSON schema.",
                                        "pattern": "^[0-9a-z](?:-?[0-9a-z]){31}$",
                                        "examples": [
                                            "bc527343c7ffc103111f3a694b004e2f"
                                        ]
                                    },
                                    {
                                        "type": "string",
                                        "title": "Checksum pattern obtained by SHA-256",
                                        "description": "This object exists to hold the pattern that a checksum would have if it was \\nobtained using the algorithm SHA-256, for it to be referenced elsewhere within \\nthis (or other) JSON schema.",
                                        "pattern": "^[A-Fa-f0-9]{64}$",
                                        "examples": [
                                            "c01b39c7a35ccc3b081a3e83d2c71fa9a767ebfeb45c69f08e17dfe3ef375a7b"
                                        ]
                                    }
                                ]
                            },
                            "sequenceQualityDetails": {
                                "type": "object",
                                "title": "Sequence quality details",
                                "description": "Sequencing quality scores measure the probability that a base is called (i.e. \\nsequenced) incorrectly. New sequencing technologies assign a quality score to \\neach of the bases in the sequence.",
                                "required": [
                                    "qualityScoringSystem"
                                ],
                                "additionalProperties": false,
                                "properties": {
                                    "qualityScoringSystem": {
                                        "type": "string",
                                        "title": "Quality scoring system",
                                        "description": "How the quality score was computed for the data.",
                                        "enum": [
                                            "phred",
                                            "logOdds"
                                        ],
                                        "meta:enum": {
                                            "phred": "The quality score is expressed as a probability of error in log form: -10 \\nlog(1/p) where p is the probability of error, with value range 0..63 (0 meaning \\nno base call).",
                                            "logOdds": "The quality score is expressed as the ratio of error to non-error in log form: \\n-10 log(p/(1-p)) where p is the of error, with value range -40..40. The SRA will \\nconvert these into phred scale during loadtime."
                                        }
                                    },
                                    "qualityEncoding": {
                                        "type": "string",
                                        "title": "Quality encoding format",
                                        "description": "Encoding system used to represent the quality score.",
                                        "enum": [
                                            "ascii",
                                            "decimal",
                                            "hexadecimal"
                                        ],
                                        "meta:enum": {
                                            "ascii": "ASCII character based encoding.",
                                            "decimal": "Single decimal value per quality score.",
                                            "hexadecimal": "Single hexadecimal value per quality score."
                                        }
                                    },
                                    "asciiOffset": {
                                        "type": "string",
                                        "title": "ASCII offset",
                                        "description": "Character used in representing the minimum quality value. Helps specify how to \\ndecode text rendering of quality data.",
                                        "enum": [
                                            "!",
                                            "@"
                                        ],
                                        "meta:enum": {
                                            "!": "ASCII value 33.  Typically used for range 0..63.",
                                            "@": "ASCII value 64.  Typically used for range 0..60."
                                        }
                                    }
                                }
                            }
                        },
                        "allOf": [
                            {
                                "type": "object",
                                "title": "Check: checksum checks based on its method",
                                "description": "This object exists with the only purpose of being a reference of pattern checks \\nof the given checksum (e.g. 'c6779ec2960296ed9a04f08d67f64423') of a file based \\non its corresponding method (e.g. if the given checksum method is 'MD5' the \\nchecksum shall fit into MD5's format of '^[0-9a-z](?:-?[0-9a-z]){31}$')",
                                "anyOf": [
                                    {
                                        "title": "Checksum pattern check - MD5",
                                        "description": "A check that ensures that, if MD5 is given as a checksumMethodId, the checksums \\nper se (e.g. unencryptedChecksum) follow MD5 patterns (md5ChecksumPattern).",
                                        "properties": {
                                            "checksumMethod": {
                                                "enum": [
                                                    "MD5"
                                                ]
                                            },
                                            "unencryptedChecksum": {
                                                "type": "string",
                                                "title": "Checksum pattern obtained by MD5",
                                                "description": "This object exists to hold the pattern that a checksum would have if it was \\nobtained using the algorithm MD5, for it to be referenced elsewhere within this \\n(or other) JSON schema.",
                                                "pattern": "^[0-9a-z](?:-?[0-9a-z]){31}$",
                                                "examples": [
                                                    "bc527343c7ffc103111f3a694b004e2f"
                                                ]
                                            },
                                            "encryptedChecksum": {
                                                "type": "string",
                                                "title": "Checksum pattern obtained by MD5",
                                                "description": "This object exists to hold the pattern that a checksum would have if it was \\nobtained using the algorithm MD5, for it to be referenced elsewhere within this \\n(or other) JSON schema.",
                                                "pattern": "^[0-9a-z](?:-?[0-9a-z]){31}$",
                                                "examples": [
                                                    "bc527343c7ffc103111f3a694b004e2f"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "Checksum pattern check - SHA-256",
                                        "description": "A check that ensures that, if SHA-256 is given as a checksumMethodId, the \\nchecksums per se (e.g. unencryptedChecksum) follow SHA-256 patterns \\n(sha-256-checksum-pattern).",
                                        "properties": {
                                            "checksumMethod": {
                                                "enum": [
                                                    "SHA-256"
                                                ]
                                            },
                                            "unencryptedChecksum": {
                                                "type": "string",
                                                "title": "Checksum pattern obtained by SHA-256",
                                                "description": "This object exists to hold the pattern that a checksum would have if it was \\nobtained using the algorithm SHA-256, for it to be referenced elsewhere within \\nthis (or other) JSON schema.",
                                                "pattern": "^[A-Fa-f0-9]{64}$",
                                                "examples": [
                                                    "c01b39c7a35ccc3b081a3e83d2c71fa9a767ebfeb45c69f08e17dfe3ef375a7b"
                                                ]
                                            },
                                            "encryptedChecksum": {
                                                "type": "string",
                                                "title": "Checksum pattern obtained by SHA-256",
                                                "description": "This object exists to hold the pattern that a checksum would have if it was \\nobtained using the algorithm SHA-256, for it to be referenced elsewhere within \\nthis (or other) JSON schema.",
                                                "pattern": "^[A-Fa-f0-9]{64}$",
                                                "examples": [
                                                    "c01b39c7a35ccc3b081a3e83d2c71fa9a767ebfeb45c69f08e17dfe3ef375a7b"
                                                ]
                                            }
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "object",
                                "title": "Check: filetype checks based on its filename",
                                "description": "This object exists with the only purpose of being a reference of pattern checks \\nof the given filetype of a file based on its corresponding filename (e.g. if the \\nfile is 'alignment.bam.gpg' its filetypeId shall be 'BAM' and not 'XLSX')",
                                "anyOf": [
                                    {
                                        "title": "CEL Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "CEL"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a CEL file",
                                                "meta:propertyCurie": "format:1638",
                                                "description": "This object exists to hold the filename pattern that a 'CEL' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^.+\\.cel(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.cel.gz.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "TSV Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "TSV"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a TSV file",
                                                "meta:propertyCurie": "format:3475",
                                                "description": "This object exists to hold the filename pattern that a 'TSV' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^.+\\.tsv(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.tsv.gz.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "ADF Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "ADF"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a ADF (Array Design Format) file",
                                                "meta:propertyCurie": "NCIT:C172213",
                                                "description": "This object exists to hold the filename pattern that a 'ADF' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.(adf)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.adf.gz.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "FASTQ Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "FASTQ"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a FASTQ file",
                                                "meta:propertyCurie": "format:1930",
                                                "description": "This object exists to hold the filename pattern that a 'FASTQ' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^.+\\.(fastq|fq)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.fastq.gz.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "FASTA Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "FASTA"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a FASTA file",
                                                "meta:propertyCurie": "format:1929",
                                                "description": "This object exists to hold the filename pattern that a 'FASTA' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^.+\\.(fasta|fa|frn|faa|ffn|fna|seq)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.fasta.gz.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "SDRF Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "SDRF"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a SDRF file",
                                                "meta:propertyCurie": "NCIT:C172211",
                                                "description": "This object exists to hold the filename pattern that a 'SDRF' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^.+\\.(tsv|sdrf)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.sdrf.gz.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "IDF Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "IDF"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a IDF file",
                                                "meta:propertyCurie": "NCIT:C172212",
                                                "description": "This object exists to hold the filename pattern that a 'IDF' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^.+\\.(tsv|idf)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.idf.gz.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "VCF Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "VCF"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a VCF file",
                                                "meta:propertyCurie": "format:3016",
                                                "description": "This object exists to hold the filename pattern that a 'VCF' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^.+\\.vcf(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.vcf.gz.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "SRA Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "SRA"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a SRA file",
                                                "meta:propertyCurie": "format:3698",
                                                "description": "This object exists to hold the filename pattern that a 'SRA' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^.+\\.sra(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.sra.gz"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "SRF Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "SRF"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a SRF file",
                                                "meta:propertyCurie": "format:3017",
                                                "description": "This object exists to hold the filename pattern that a 'SRF' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^.+\\.srf(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.srf.gz.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "SFF Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "SFF"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a SFF file",
                                                "meta:propertyCurie": "format:3284",
                                                "description": "This object exists to hold the filename pattern that a 'SFF' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^.+\\.sff(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.sff.gz.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "BAM Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "BAM"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a BAM file",
                                                "meta:propertyCurie": "format:2572",
                                                "description": "This object exists to hold the filename pattern that a 'BAM' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^.+\\.bam(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.bam.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "CRAM Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "CRAM"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a CRAM file",
                                                "meta:propertyCurie": "format:3462",
                                                "description": "This object exists to hold the filename pattern that a 'CRAM' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^.+\\.cram(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.cram.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "XLSX Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "XLSX"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a  file",
                                                "meta:propertyCurie": "format:3620",
                                                "description": "This object exists to hold the filename pattern that a 'XLSX' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^.+\\.xlsx(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.xlsx.tar.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "CSV Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "CSV"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a CSV file",
                                                "meta:propertyCurie": "format:3752",
                                                "description": "This object exists to hold the filename pattern that a 'CSV' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^.+\\.csv(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.csv"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "BED Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "BED"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a BED file",
                                                "meta:propertyCurie": "format:3003",
                                                "description": "This object exists to hold the filename pattern that a 'BED' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^.+\\.bed(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.bed.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "IDAT Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "IDAT"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a IDAT file",
                                                "meta:propertyCurie": "format:3578",
                                                "description": "This object exists to hold the filename pattern that a 'IDAT' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^.+\\.idat(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.idat.zip"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "MAP Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "MAP"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a MAP file",
                                                "meta:propertyCurie": "format:3285",
                                                "description": "This object exists to hold the filename pattern that a 'MAP' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^.+\\.map(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.map.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "PED Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "PED"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a PED file",
                                                "meta:propertyCurie": "format:3286",
                                                "description": "This object exists to hold the filename pattern that a 'PED' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^.+\\.(ped|tped)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.ped.gz.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "BIM Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "BIM"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a BIM file",
                                                "description": "This object exists to hold the filename pattern that a 'BIM' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^.+\\.bim(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.bim.gz.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "FAM Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "FAM"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a FAM file",
                                                "description": "This object exists to hold the filename pattern that a 'FAM' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^.+\\.(fam|tfam)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.fam.gz.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "TXT Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "TXT"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a TXT file",
                                                "meta:propertyCurie": "format:2330",
                                                "description": "This object exists to hold the filename pattern that a 'TXT' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema. It \\ncan represent multiple types of data (e.g. an ADF file or a README file)",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.(txt|TXT)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.txt.gz.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "EXP Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "EXP"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a EXP file",
                                                "meta:propertyCurie": "format:1631",
                                                "description": "This object exists to hold the filename pattern that a 'EXP' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.(exp|EXP)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.exp.gz.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "GPR Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "GPR"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a GPR file",
                                                "meta:propertyCurie": "format:3829",
                                                "description": "This object exists to hold the filename pattern that a 'GPR' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.(gpr|GPR)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.gpr.gz.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "PY Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "PY"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a PY file",
                                                "meta:propertyCurie": "format:3996",
                                                "description": "This object exists to hold the filename pattern that a 'PY' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.(py|PY|pyc|pyo|pyd|ipynb)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.py.gz.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "SH Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "SH"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a SH file",
                                                "description": "This object exists to hold the filename pattern that a 'SH' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.(sh|SH)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.sh.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "MD5 Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "MD5"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a MD5 file",
                                                "meta:propertyCurie": "data:2190",
                                                "description": "This object exists to hold the filename pattern that a 'MD5' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.(md5|MD5)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.md5.gz.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "HAP Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "HAP"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a HAP file",
                                                "description": "This object exists to hold the filename pattern that a 'HAP' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.(hap|HAP)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.hap.gz.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "CSFASTA Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "CSFASTA"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a CSFASTA file",
                                                "description": "This object exists to hold the filename pattern that a 'CSFASTA' filetypeId \\nwould have, for it to be referenced elsewhere within this (or other) JSON \\nschema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.csfasta(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.csfasta.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "LOC Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "LOC"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a LOC file",
                                                "description": "This object exists to hold the filename pattern that a 'LOC' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.(loc|tsv)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.loc.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "HTML Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "HTML"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a HTML file",
                                                "meta:propertyCurie": "format:2331",
                                                "description": "This object exists to hold the filename pattern that a 'HTML' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.html(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.html.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "HIC Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "HIC"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a HIC file",
                                                "description": "This object exists to hold the filename pattern that a 'HIC' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.hic(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.hic.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "MD Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "MD"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a MD file",
                                                "description": "This object exists to hold the filename pattern that a 'MD' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.(md|markdown)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.md.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "MATLAB Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "MATLAB"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a MATLAB file",
                                                "meta:propertyCurie": "format:4007",
                                                "description": "This object exists to hold the filename pattern that a 'MATLAB' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.(M|m|MAT|mat)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.mat.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "PERL Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "PERL"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a PERL file",
                                                "meta:propertyCurie": "format:3998",
                                                "description": "This object exists to hold the filename pattern that a 'PERL' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.(pl|perl)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.pl.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "TIF Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "TIF"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a TIF file",
                                                "description": "This object exists to hold the filename pattern that a 'TIF' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.tif(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.tif.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "R Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "R"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a R file",
                                                "meta:propertyCurie": "format:3999",
                                                "description": "This object exists to hold the filename pattern that a 'R' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.(r|R|rdata|rda)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.r.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "SNP Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "SNP"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a SNP file",
                                                "description": "This object exists to hold the filename pattern that a 'SNP' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.snp(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.snp.zip.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "XML Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "XML"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a XML file",
                                                "meta:propertyCurie": "format:2332",
                                                "description": "This object exists to hold the filename pattern that a 'XML' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.xml(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.xml.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "SVG Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "SVG"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a SVG file",
                                                "meta:propertyCurie": "format:3604",
                                                "description": "This object exists to hold the filename pattern that a 'SVG' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.svg(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.svg.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "PNG Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "PNG"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a PNG file",
                                                "meta:propertyCurie": "format:3603",
                                                "description": "This object exists to hold the filename pattern that a 'PNG' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.png(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.png.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "JPG Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "JPG"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a JPG file",
                                                "meta:propertyCurie": "format:3579",
                                                "description": "This object exists to hold the filename pattern that a 'JPG' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.jpg(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.jpg.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "GTC Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "GTC"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a GTC file",
                                                "description": "This object exists to hold the filename pattern that a 'GTC' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.gtc(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.gtc.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "HDF5 Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "HDF5"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a HDF5 file",
                                                "meta:propertyCurie": "format:3590",
                                                "description": "This object exists to hold the filename pattern that a 'HDF5' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.(h5|hdf5)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.h5.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "FAST5 Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "FAST5"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a FAST5 file",
                                                "meta:propertyCurie": "format:3590",
                                                "description": "This object exists to hold the filename pattern that a 'FAST5' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.fast5(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.fast5.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "PAIR Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "PAIR"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a PAIR file",
                                                "description": "This object exists to hold the filename pattern that a 'PAIR' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.pair(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.pair.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "TXT Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "TXT"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a TXT file",
                                                "meta:propertyCurie": "format:2330",
                                                "description": "This object exists to hold the filename pattern that a 'TXT' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema. It \\ncan represent multiple types of data (e.g. an ADF file or a README file)",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.(txt|TXT)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.txt.gz.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "BGI Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "BGI"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a BGI file",
                                                "description": "This object exists to hold the filename pattern that a 'BGI' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.bgi(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.bgi.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "BGEN Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "BGEN"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a BGEN file",
                                                "description": "This object exists to hold the filename pattern that a 'BGEN' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.bgen(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.bgen.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "GEN Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "GEN"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a GEN file",
                                                "description": "This object exists to hold the filename pattern that a 'GEN' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.gen(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.gen.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "PXF Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "PXF"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a PXF file",
                                                "description": "This object exists to hold the filename pattern that a 'PXF' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.(json|yaml)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.json.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "LOOM Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "LOOM"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a LOOM file",
                                                "meta:propertyCurie": "format:3913",
                                                "description": "This object exists to hold the filename pattern that a 'LOOM' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.loom(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.loom.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "BAX.H5 Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "BAX.H5"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a BAX.H5 file",
                                                "description": "This object exists to hold the filename pattern that a 'BAX.H5' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.(bax\\.h5|h5)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.bax.h5.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "BAS.H5 Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "BAS.H5"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a BAS.H5 file",
                                                "description": "This object exists to hold the filename pattern that a 'BAS.H5' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.(bas\\.h5|h5)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.bas.h5.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "ASM Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "ASM"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a ASM file",
                                                "description": "This object exists to hold the filename pattern that a 'ASM' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.asm(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.asm.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "CSI Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "CSI"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a CSI file",
                                                "description": "This object exists to hold the filename pattern that a 'CSI' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.csi(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.csi.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "TBI Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "TBI"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a TBI file",
                                                "meta:propertyCurie": "format:3700",
                                                "description": "This object exists to hold the filename pattern that a 'TBI' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.tbi(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.tbi.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "BCF Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "BCF"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a BCF file",
                                                "meta:propertyCurie": "format:3020",
                                                "description": "This object exists to hold the filename pattern that a 'BCF' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.bcf(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.bcf.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "qual454 Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "qual454"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a QUAL454 file",
                                                "meta:propertyCurie": "format:3611",
                                                "description": "This object exists to hold the filename pattern that a 'QUAL454' filetypeId \\nwould have, for it to be referenced elsewhere within this (or other) JSON \\nschema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.(qual454|qual)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.qual.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "qualsolid Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "qualsolid"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a QUALSOLID file",
                                                "meta:propertyCurie": "format:3610",
                                                "description": "This object exists to hold the filename pattern that a 'QUALSOLID' filetypeId \\nwould have, for it to be referenced elsewhere within this (or other) JSON \\nschema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.(qualsolid|qual)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.qualsolid.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "FASTQ-illumina Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "FASTQ-illumina"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a FASTQ-ILLUMINA file",
                                                "meta:propertyCurie": "format:1931",
                                                "description": "This object exists to hold the filename pattern that a 'FASTQ-ILLUMINA' \\nfiletypeId would have, for it to be referenced elsewhere within this (or other) \\nJSON schema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.(fastq|fq)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.fastq.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "FASTQ-helicos Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "FASTQ-helicos"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a FASTQ-HELICOS file",
                                                "description": "This object exists to hold the filename pattern that a 'FASTQ-HELICOS' \\nfiletypeId would have, for it to be referenced elsewhere within this (or other) \\nJSON schema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.(fastq|fq)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.fastq.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "FASTQ-sanger Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "FASTQ-sanger"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a FASTQ-SANGER file",
                                                "meta:propertyCurie": "format:1932",
                                                "description": "This object exists to hold the filename pattern that a 'FASTQ-SANGER' filetypeId \\nwould have, for it to be referenced elsewhere within this (or other) JSON \\nschema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.(fastq|fq)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.fastq.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "FASTQ-solexa Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "FASTQ-solexa"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a FASTQ-SOLEXA file",
                                                "meta:propertyCurie": "format:1933",
                                                "description": "This object exists to hold the filename pattern that a 'FASTQ-SOLEXA' filetypeId \\nwould have, for it to be referenced elsewhere within this (or other) JSON \\nschema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.(fastq|fq)(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.fastq.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "SAM Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "SAM"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a SAM file",
                                                "meta:propertyCurie": "format:2573",
                                                "description": "This object exists to hold the filename pattern that a 'SAM' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.sam(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.sam.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "CRAI Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "CRAI"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a CRAI file",
                                                "description": "This object exists to hold the filename pattern that a 'CRAI' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.crai(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.crai.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "BAI Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "BAI"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a BAI file",
                                                "meta:propertyCurie": "format:3327",
                                                "description": "This object exists to hold the filename pattern that a 'BAI' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.bai(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.bai.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "MTX Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "MTX"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a MTX file",
                                                "meta:propertyCurie": "format:3916",
                                                "description": "This object exists to hold the filename pattern that a 'MTX' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.mtx(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.mtx.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "MEX Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "MEX"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a MEX file",
                                                "description": "This object exists to hold the filename pattern that a 'MEX' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.mex(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.mex.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "GMX Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "GMX"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a GMX file",
                                                "description": "This object exists to hold the filename pattern that a 'GMX' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.gmx(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.gmx.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "GMT Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "GMT"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a GMT file",
                                                "description": "This object exists to hold the filename pattern that a 'GMT' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.gmt(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.gmt.gpg"
                                                ]
                                            }
                                        }
                                    },
                                    {
                                        "title": "GRP Filename patternCheck",
                                        "properties": {
                                            "filetype": {
                                                "enum": [
                                                    "GRP"
                                                ]
                                            },
                                            "filename": {
                                                "type": "string",
                                                "title": "Filename pattern of a GRP file",
                                                "description": "This object exists to hold the filename pattern that a 'GRP' filetypeId would \\nhave, for it to be referenced elsewhere within this (or other) JSON schema.",
                                                "pattern": "^[^<>:;,?\"*|/]+\\.grp(\\.(gz|zip|rar|arj|tar|7z|bz2))?(\\.gpg)?$",
                                                "examples": [
                                                    "my_file1.grp.gpg"
                                                ]
                                            }
                                        }
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "type": "object",
                        "title": "Check: allowed filetypes for an assay",
                        "description": "This object exists with the only purpose of being a reference list of the \\nallowed filetypes of an assay (e.g. if the filetype is 'PY', it should not be \\naccepted as raw data). It imitates the 'filetype' property with a subset of the \\nallowed filetypes.",
                        "required": [
                            "filetype"
                        ],
                        "properties": {
                            "filetype": {
                                "type": "string",
                                "enum": [
                                    "BAM",
                                    "CRAM",
                                    "SAM",
                                    "FASTA",
                                    "BAI",
                                    "CRAI",
                                    "CSI",
                                    "MD",
                                    "TXT",
                                    "XML",
                                    "MD5",
                                    "FASTQ",
                                    "FASTQ-helicos",
                                    "FASTQ-illumina",
                                    "BAS.H5",
                                    "BAX.H5",
                                    "HDF5",
                                    "FASTQ-sanger",
                                    "FASTQ-solexa",
                                    "IDAT",
                                    "CEL",
                                    "qualsolid",
                                    "qual454",
                                    "SRA",
                                    "SRF",
                                    "SFF",
                                    "CSFASTA",
                                    "GPR",
                                    "ADF",
                                    "FAST5"
                                ]
                            }
                        }
                    }
                ]
            }
        },
        "assayAttributes": {
            "type": "array",
            "title": "Assay custom attributes",
            "description": "Custom attributes of an assay: reusable attributes to encode tag-value pairs \\n(e.g. Tag being 'additional context' and its Value 'this specific assay was \\nstored mistakenly for longer periods of time, so its data could be \\nmisleading...') with optional units. Its properties are inherited from the \\ncommon-definitions.json schema.",
            "minItems": 1,
            "additionalProperties": false,
            "uniqueItems": true,
            "items": {
                "type": "object",
                "title": "Custom attribute of an object",
                "description": "Reusable attributes to encode tag-value pairs (e.g. Tag being 'Age' and its \\nValue '40') with optional units (e.g. 'years').",
                "required": [
                    "tag",
                    "value"
                ],
                "additionalProperties": false,
                "properties": {
                    "tag": {
                        "type": "string",
                        "title": "Tag of the custom attribute",
                        "description": "The name of the attribute (e.g. 'Age').",
                        "minLength": 1,
                        "examples": [
                            "age"
                        ]
                    },
                    "value": {
                        "type": [
                            "string",
                            "number"
                        ],
                        "title": "Value of the custom attribute",
                        "description": "The value of the attribute (e.g. '40').",
                        "examples": [
                            "smoker",
                            40
                        ]
                    },
                    "units": {
                        "type": "string",
                        "title": "Units of the custom attribute",
                        "description": "The optional units of the attribute (e.g. 'years').",
                        "minLength": 1,
                        "examples": [
                            "years"
                        ]
                    }
                }
            }
        }
    },
    "allOf": [
        {
            "title": "If the files are aligned reads, the reference alignment details are expected",
            "if": {
                "properties": {
                    "assayFiles": {
                        "items": {
                            "properties": {
                                "filetype": {
                                    "enum": [
                                        "BAM",
                                        "CRAM"
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "then": {
                "properties": {
                    "assayTypeSpecifications": {
                        "required": [
                            "sequencingAssaySpecifications"
                        ],
                        "properties": {
                            "sequencingAssaySpecifications": {
                                "required": [
                                    "referenceAlignmentDetails"
                                ]
                            }
                        }
                    }
                }
            }
        },
        {
            "title": "Allowed filetypes for a sequencing assay",
            "if": {
                "properties": {
                    "assayTypeSpecifications": {
                        "properties": {
                            "assayInstrument": {
                                "const": "sequencer"
                            }
                        }
                    }
                }
            },
            "then": {
                "properties": {
                    "assayFiles": {
                        "items": {
                            "properties": {
                                "filetype": {
                                    "enum": [
                                        "FASTQ",
                                        "FASTA",
                                        "SRA",
                                        "SRF",
                                        "SFF",
                                        "BAM",
                                        "CRAM"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        {
            "title": "Allowed filetypes for an array assay",
            "if": {
                "properties": {
                    "assayTypeSpecifications": {
                        "properties": {
                            "assayInstrument": {
                                "const": "array"
                            }
                        }
                    }
                }
            },
            "then": {
                "properties": {
                    "assayFiles": {
                        "items": {
                            "properties": {
                                "filetype": {
                                    "enum": [
                                        "CEL",
                                        "TSV",
                                        "XLSX",
                                        "CSV",
                                        "IDAT",
                                        "TXT",
                                        "EXP",
                                        "GPR"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        }
    ]
}
@endjson
{
    "$schema": "https://json-schema.org/draft/2019-09/schema#",
    "$id": "https://raw.githubusercontent.com/EbiEga/ega-metadata-schema/v1.0.0/schemas/EGA.common.json",
    "type": "object",
    "title": "EGA Common metadata schema",
    "meta:version": "1.0.0",
    "definitions": {
        "NameType": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "identifier": {
                    "type": "string"
                },
                "label": {
                    "type": "string",
                    "description": "Alternative/explanatory description of the same object/identifier."
                }
            }
        },
        "QualifiedNameType": {
            "type": "object",
            "required": [
                "NameType",
                "namespace"
            ],
            "additionalProperties": false,
            "properties": {
                "NameType": {
                    "$ref": "#/definitions/NameType"
                },
                "namespace": {
                    "type": "string",
                    "description": "A string value that constrains the domain of named identifiers (namespace)."
                }
            }
        },
        "IdentifierType": {
            "type": "object",
            "description": "Set of record identifiers",
            "additionalProperties": false,
            "properties": {
                "PRIMARY_ID": {
                    "description": "A primary identifier in the INSDC namespace.",
                    "$ref": "#/definitions/NameType"
                },
                "SECONDARY_ID": {
                    "description": "A secondary identifier in the INSDC namespace.",
                    "$ref": "#/definitions/NameType"
                },
                "EXTERNAL_ID": {
                    "description": "An identifer from a public non-INSDC resource.",
                    "$ref": "#/definitions/QualifiedNameType"
                },
                "SUBMITTER_ID": {
                    "description": "A submitter provided identifier.",
                    "$ref": "#/definitions/QualifiedNameType"
                },
                "UUID": {
                    "description": "A universally unique identifier that requires no namespace.",
                    "$ref": "#/definitions/NameType"
                }
            }
        },
        "ObjectType": {
            "type": "object",
            "properties": {
                "IDENTIFIERS": {
                    "$ref": "#/definitions/IdentifierType"
                },
                "alias": {
                    "type": "string",
                    "description": "Submitter designated name for the object. The name must be unique within the submission account."
                },
                "center_name": {
                    "type": "string",
                    "description": "The center name of the submitter."
                },
                "broker_name": {
                    "type": "string",
                    "description": "The center name of the broker."
                },
                "accession": {
                    "type": "string",
                    "description": "The object accession assigned by the archive."
                }
            }
        },
        "RefObjectType": {
            "type": "object",
            "properties": {
                "IDENTIFIERS": {
                    "$ref": "#/definitions/IdentifierType"
                },
                "refname": {
                    "type": "string",
                    "description": "Identifies an object by name within the namespace defined by attribute refcenter."
                },
                "refcenter": {
                    "type": "string",
                    "description": "The namespace of the attribute refname."
                },
                "accession": {
                    "type": "string",
                    "description": "Identifies a record by its accession.  The scope of resolution is the entire Archive."
                }
            },
            "anyOf": [
                {
                    "required": [
                        "refname",
                        "refcenter"
                    ]
                },
                {
                    "required": [
                        "accession"
                    ]
                },
                {
                    "required": [
                        "IDENTIFIERS"
                    ]
                }
            ]
        },
        "XRefType": {
            "type": "object",
            "required": [
                "DB",
                "ID"
            ],
            "additionalProperties": false,
            "properties": {
                "DB": {
                    "type": "string",
                    "description": "INSDC controlled vocabulary of permitted cross references. Please see http://www.insdc.org/db_xref.html . For example, FLYBASE."
                },
                "ID": {
                    "type": "string",
                    "description": "Accession in the referenced database.    For example,  FBtr0080008 (in FLYBASE)."
                },
                "LABEL": {
                    "type": "string",
                    "description": "Text label to display for the link."
                }
            }
        },
        "AttributeType": {
            "type": "object",
            "description": "Reusable attributes to encode tag-value pairs with optional units.",
            "required": [
                "TAG"
            ],
            "additionalProperties": false,
            "properties": {
                "TAG": {
                    "type": "string",
                    "description": "Name of the attribute"
                },
                "VALUE": {
                    "type": "string",
                    "description": "Value of the attribute."
                },
                "UNITS": {
                    "type": "string",
                    "description": "Optional scientific units."
                }
            }
        },
        "LinkType": {
            "type": "object",
            "description": "Reusable external links type to encode URL links, Entrez links, and db_xref links.",
            "oneOf": [
                {
                    "additionalProperties": false,
                    "properties": {
                        "URL_LINK": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                                "LABEL": {
                                    "type": "string"
                                },
                                "URL": {
                                    "type": "string",
                                    "format": "uri"
                                }
                            },
                            "required": [
                                "LABEL",
                                "URL"
                            ]
                        }
                    },
                    "required": [
                        "URL_LINK"
                    ]
                },
                {
                    "additionalProperties": false,
                    "properties": {
                        "XREF_LINK": {
                            "$ref": "#/definitions/XRefType"
                        }
                    },
                    "required": [
                        "XREF_LINK"
                    ]
                },
                {
                    "additionalProperties": false,
                    "properties": {
                        "ENTREZ_LINK": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                                "DB": {
                                    "type": "string",
                                    "description": "NCBI controlled vocabulary of permitted cross references.  Please see http://www.ncbi.nlm.nih.gov/entrez/eutils/einfo.fcgi? "
                                },
                                "ID": {
                                    "type": "integer",
                                    "description": "Numeric record id meaningful to the NCBI Entrez system."
                                },
                                "QUERY": {
                                    "type": "string",
                                    "description": "Accession string meaningful to the NCBI Entrez system."
                                },
                                "LABEL": {
                                    "type": "string",
                                    "description": "How to label the link."
                                }
                            },
                            "oneOf": [
                                {
                                    "required": [
                                        "DB",
                                        "ID"
                                    ]
                                },
                                {
                                    "required": [
                                        "DB",
                                        "QUERY"
                                    ]
                                }
                            ]
                        }
                    },
                    "required": [
                        "ENTREZ_LINK"
                    ]
                }
            ]
        },
        "SpotDescriptorType": {
            "type": "array",
            "title": "Spot descriptor",
            "description": "The 'SpotDescriptorType' specifies how to decode the individual reads of interest from the monolithic spot sequence. The spot descriptor contains aspects of the experimental design, platform, and processing information. There will be two methods of specification: one will be an index into a table of typical decodings, the other being an exact specification. This construct is needed for loading data and for interpreting the loaded sequencing assays. It can be omitted if the loader can infer read layout (from multiple input files or from one input files).",
            "minItems": 1,
            "additionalProperties": false,
            "uniqueItems": true,
            "items": {
                "type": "object",
                "title": "Spot decode spec",
                "description": "",
                "additionalProperties": false,
                "required": [
                    "READ_SPECS"
                ],
                "properties": {
                    "SPOT_LENGTH": {
                        "type": "integer",
                        "title": "Spot length",
                        "description": "Number of base/color calls, cycles, or flows per spot (raw sequence length or flow length including all application and technical tags and mate pairs, but not including gap lengths). This value will be platform dependent, library dependent, and possibly run dependent. Variable length platforms will still have a constant flow/cycle length.",
                        "minInclusive": 0
                    },
                    "READ_SPECS": {
                        "type": "array",
                        "title": "Read specs",
                        "description": "",
                        "minItems": 1,
                        "uniqueItems": true,
                        "items": {
                            "type": "object",
                            "title": "Read spec",
                            "description": "",
                            "additionalProperties": false,
                            "required": [
                                "READ_INDEX",
                                "READ_CLASS",
                                "READ_TYPE",
                                "RELATIVE_ORDER",
                                "BASE_COORD",
                                "EXPECTED_BASECALL_TABLE"
                            ],
                            "properties": {
                                "READ_INDEX": {
                                    "type": "integer",
                                    "title": "Read index",
                                    "description": "READ_INDEX starts at 0 and is incrementally increased for each sequential READ_SPEC within a SPOT_DECODE_SPEC.",
                                    "minInclusive": 0
                                },
                                "READ_LABEL": {
                                    "type": "string",
                                    "title": "Read label",
                                    "description": "READ_LABEL is a name for this tag, and can be used to on output to determine read name, for example F or R.",
                                    "minLength": 1
                                },
                                "READ_CLASS": {
                                    "type": "string",
                                    "title": "Read class",
                                    "description": "",
                                    "enum": [
                                        "Application Read",
                                        "Technical Read"
                                    ],
                                    "meta:enum": {
                                        "Application Read": "",
                                        "Technical Read": ""
                                    }
                                },
                                "READ_TYPE": {
                                    "type": "string",
                                    "title": "Read type",
                                    "description": "",
                                    "enum": [
                                        "Forward",
                                        "Reverse",
                                        "Adapter",
                                        "Primer",
                                        "Linker",
                                        "BarCode",
                                        "Other"
                                    ]
                                },
                                "RELATIVE_ORDER": {
                                    "type": "object",
                                    "title": "Relative order",
                                    "description": "The read is located beginning at the offset or cycle relative to another read. This choice is appropriate for example when specifying a read that follows a variable length expected sequence(s).",
                                    "additionalProperties": false,
                                    "properties": {
                                        "follows_read_index": {
                                            "type": "integer",
                                            "title": "Follows read index",
                                            "description": "Specify the read index that precedes this read.",
                                            "minInclusive": 0
                                        },
                                        "precedes_read_index": {
                                            "type": "integer",
                                            "title": "Precedes read index",
                                            "description": "Specify the read index that follows this read.",
                                            "minInclusive": 0
                                        }
                                    }
                                },
                                "BASE_COORD": {
                                    "type": "integer",
                                    "title": "Base coord",
                                    "description": "The location of the read start in terms of base count (1 is beginning of spot)"
                                },
                                "EXPECTED_BASECALL_TABLE": {
                                    "type": "object",
                                    "title": "Expected basecall table",
                                    "description": "A set of choices of expected basecalls for a current read. Read will be zero-length if none is found.",
                                    "additionalProperties": false,
                                    "required": [
                                        "BASECALLS"
                                    ],
                                    "properties": {
                                        "default_length": {
                                            "type": "integer",
                                            "title": "Default length",
                                            "description": "Specify whether the spot should have a default length for this tag if the expected base cannot be matched.",
                                            "minInclusive": 0
                                        },
                                        "base_coord": {
                                            "type": "integer",
                                            "title": "Base coord",
                                            "description": "Specify an optional starting point for tag (base offset from 1).",
                                            "minInclusive": 0
                                        },
                                        "BASECALLS": {
                                            "type": "array",
                                            "title": "Basecalls array",
                                            "description": "Element's body contains a basecall, attribute provide description of this read meaning as well as matching rules.",
                                            "minItems": 1,
                                            "uniqueItems": true,
                                            "items": {
                                                "type": "object",
                                                "title": "Basecall",
                                                "description": "",
                                                "additionalProperties": false,
                                                "required": [
                                                    "read_group_tag",
                                                    "min_match",
                                                    "max_mismatch",
                                                    "match_edge"
                                                ],
                                                "properties": {
                                                    "read_group_tag": {
                                                        "type": "string",
                                                        "title": "Read group tag",
                                                        "description": "When match occurs, the read will be tagged with this group membership.",
                                                        "minLength": 1
                                                    },
                                                    "min_match": {
                                                        "type": "integer",
                                                        "title": "Min match",
                                                        "description": "Minimum number of matches to trigger identification.",
                                                        "minInclusive": 0
                                                    },
                                                    "max_mismatch": {
                                                        "type": "integer",
                                                        "title": "Max mismatch",
                                                        "description": "Maximum number of mismatches",
                                                        "minInclusive": 0
                                                    },
                                                    "match_edge": {
                                                        "type": "string",
                                                        "title": "Match edge",
                                                        "description": "Where the match should occur. Changes the rules on how minMatch and maxMismatch are counted.",
                                                        "enum": [
                                                            "full",
                                                            "start",
                                                            "end"
                                                        ],
                                                        "meta:enum": {
                                                            "full": "Only @maxMismatch influences matching process",
                                                            "start": "Both matches and mismatches are counted. When @maxMismatch is exceeded - it is not a match. When @minMatch is reached - match is declared.",
                                                            "end": "Both matches and mismatches are counted. When @maxMismatch is exceeded - it is not a match. When @minMatch is reached - match is declared."
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "type454Model": {
            "type": "string",
            "enum": [
                "454 GS",
                "454 GS 20",
                "454 GS FLX",
                "454 GS FLX+",
                "454 GS FLX Titanium",
                "454 GS Junior",
                "unspecified"
            ]
        },
        "typeIlluminaModel": {
            "type": "string",
            "enum": [
                "HiSeq X Five",
                "HiSeq X Ten",
                "Illumina Genome Analyzer",
                "Illumina Genome Analyzer II",
                "Illumina Genome Analyzer IIx",
                "Illumina HiScanSQ",
                "Illumina HiSeq 1000",
                "Illumina HiSeq 1500",
                "Illumina HiSeq 2000",
                "Illumina HiSeq 2500",
                "Illumina HiSeq 3000",
                "Illumina HiSeq 4000",
                "Illumina HiSeq X",
                "Illumina iSeq 100",
                "Illumina MiSeq",
                "Illumina MiniSeq",
                "Illumina NovaSeq X",
                "Illumina NovaSeq 6000",
                "NextSeq 500",
                "NextSeq 550",
                "NextSeq 1000",
                "NextSeq 2000",
                "unspecified"
            ]
        },
        "typeHelicosModel": {
            "type": "string",
            "enum": [
                "Helicos HeliScope",
                "unspecified"
            ]
        },
        "typeAbiSolidModel": {
            "type": "string",
            "enum": [
                "AB SOLiD System",
                "AB SOLiD System 2.0",
                "AB SOLiD System 3.0",
                "AB SOLiD 3 Plus System",
                "AB SOLiD 4 System",
                "AB SOLiD 4hq System",
                "AB SOLiD PI System",
                "AB 5500 Genetic Analyzer",
                "AB 5500xl Genetic Analyzer",
                "AB 5500xl-W Genetic Analysis System",
                "unspecified"
            ]
        },
        "typeCGModel": {
            "type": "string",
            "enum": [
                "Complete Genomics",
                "unspecified"
            ]
        },
        "typeBGISEQModel": {
            "type": "string",
            "enum": [
                "BGISEQ-50",
                "BGISEQ-500",
                "MGISEQ-2000RS"
            ]
        },
        "typeOxfordNanoporeModel": {
            "type": "string",
            "enum": [
                "MinION",
                "GridION",
                "PromethION",
                "unspecified"
            ]
        },
        "typePacBioModel": {
            "type": "string",
            "enum": [
                "Onso",
                "PacBio RS",
                "PacBio RS II",
                "Revio",
                "Sequel",
                "Sequel II",
                "Sequel IIe",
                "unspecified"
            ]
        },
        "typeIontorrentModel": {
            "type": "string",
            "enum": [
                "Ion Torrent PGM",
                "Ion Torrent Proton",
                "Ion Torrent S5",
                "Ion Torrent S5 XL",
                "Ion Torrent Genexus",
                "Ion GeneStudio S5",
                "Ion GeneStudio S5 Prime",
                "Ion GeneStudio S5 Plus",
                "unspecified"
            ]
        },
        "typeCapillaryModel": {
            "type": "string",
            "enum": [
                "AB 3730xL Genetic Analyzer",
                "AB 3730 Genetic Analyzer",
                "AB 3500xL Genetic Analyzer",
                "AB 3500 Genetic Analyzer",
                "AB 3130xL Genetic Analyzer",
                "AB 3130 Genetic Analyzer",
                "AB 310 Genetic Analyzer",
                "unspecified"
            ]
        },
        "typeDnbSeqModel": {
            "type": "string",
            "enum": [
                "DNBSEQ-T7",
                "DNBSEQ-G400",
                "DNBSEQ-G50",
                "DNBSEQ-G400 FAST",
                "unspecified"
            ]
        },
        "typeElementModel": {
            "type": "string",
            "enum": [
                "Element AVITI",
                "unspecified"
            ]
        },
        "typeUltimaModel": {
            "type": "string",
            "enum": [
                "UG 100",
                "unspecified"
            ]
        },
        "typeVelaDiagnosticsModel": {
            "type": "string",
            "enum": [
                "Sentosa SQ301",
                "unspecified"
            ]
        },
        "typeGenapsysModel": {
            "type": "string",
            "enum": [
                "GENIUS",
                "Genapsys Sequencer",
                "GS111",
                "unspecified"
            ]
        },
        "typeGeneMindModel": {
            "type": "string",
            "enum": [
                "GenoCare 1600",
                "GenoLab M",
                "FASTASeq 300",
                "unspecified"
            ]
        },
        "typeTapestriModel": {
            "type": "string",
            "enum": [
                "Tapestri",
                "unspecified"
            ]
        },
        "PlatformType": {
            "type": "object",
            "description": "The PLATFORM record selects which sequencing platform and platform-specific runtime parameters. This will be determined by the Center.",
            "oneOf": [
                {
                    "required": [
                        "LS454"
                    ],
                    "additionalProperties": false,
                    "properties": {
                        "LS454": {
                            "type": "object",
                            "description": "454 technology use 1-color sequential flows",
                            "required": [
                                "INSTRUMENT_MODEL"
                            ],
                            "additionalProperties": false,
                            "properties": {
                                "INSTRUMENT_MODEL": {
                                    "$ref": "#/definitions/type454Model"
                                }
                            }
                        }
                    }
                },
                {
                    "required": [
                        "ILLUMINA"
                    ],
                    "additionalProperties": false,
                    "properties": {
                        "ILLUMINA": {
                            "type": "object",
                            "description": "Illumina is 4-channel flowgram with 1-to-1 mapping between basecalls and flows",
                            "required": [
                                "INSTRUMENT_MODEL"
                            ],
                            "additionalProperties": false,
                            "properties": {
                                "INSTRUMENT_MODEL": {
                                    "$ref": "#/definitions/typeIlluminaModel"
                                }
                            }
                        }
                    }
                },
                {
                    "required": [
                        "HELICOS"
                    ],
                    "additionalProperties": false,
                    "properties": {
                        "HELICOS": {
                            "type": "object",
                            "description": "Helicos is similar to 454 technology - uses 1-color sequential flows",
                            "required": [
                                "INSTRUMENT_MODEL"
                            ],
                            "additionalProperties": false,
                            "properties": {
                                "INSTRUMENT_MODEL": {
                                    "$ref": "#/definitions/typeHelicosModel"
                                }
                            }
                        }
                    }
                },
                {
                    "required": [
                        "ABI_SOLID"
                    ],
                    "additionalProperties": false,
                    "properties": {
                        "ABI_SOLID": {
                            "type": "object",
                            "description": "ABI is 4-channel flowgram with 1-to-1 mapping between basecalls and flows",
                            "required": [
                                "INSTRUMENT_MODEL"
                            ],
                            "additionalProperties": false,
                            "properties": {
                                "INSTRUMENT_MODEL": {
                                    "$ref": "#/definitions/typeAbiSolidModel"
                                }
                            }
                        }
                    }
                },
                {
                    "required": [
                        "COMPLETE_GENOMICS"
                    ],
                    "additionalProperties": false,
                    "properties": {
                        "COMPLETE_GENOMICS": {
                            "type": "object",
                            "description": "CompleteGenomics platform type. At present there is no instrument model.",
                            "required": [
                                "INSTRUMENT_MODEL"
                            ],
                            "additionalProperties": false,
                            "properties": {
                                "INSTRUMENT_MODEL": {
                                    "$ref": "#/definitions/typeCGModel"
                                }
                            }
                        }
                    }
                },
                {
                    "required": [
                        "BGISEQ"
                    ],
                    "additionalProperties": false,
                    "properties": {
                        "BGISEQ": {
                            "type": "object",
                            "description": "",
                            "required": [
                                "INSTRUMENT_MODEL"
                            ],
                            "additionalProperties": false,
                            "properties": {
                                "INSTRUMENT_MODEL": {
                                    "$ref": "#/definitions/typeBGISEQModel"
                                }
                            }
                        }
                    }
                },
                {
                    "required": [
                        "OXFORD_NANOPORE"
                    ],
                    "additionalProperties": false,
                    "properties": {
                        "OXFORD_NANOPORE": {
                            "type": "object",
                            "description": "Oxford Nanopore platform type. nanopore-based electronic single molecule analysis",
                            "required": [
                                "INSTRUMENT_MODEL"
                            ],
                            "additionalProperties": false,
                            "properties": {
                                "INSTRUMENT_MODEL": {
                                    "$ref": "#/definitions/typeOxfordNanoporeModel"
                                }
                            }
                        }
                    }
                },
                {
                    "required": [
                        "PACBIO_SMRT"
                    ],
                    "additionalProperties": false,
                    "properties": {
                        "PACBIO_SMRT": {
                            "type": "object",
                            "description": "PacificBiosciences platform type for the single molecule real time (SMRT) technology.",
                            "required": [
                                "INSTRUMENT_MODEL"
                            ],
                            "additionalProperties": false,
                            "properties": {
                                "INSTRUMENT_MODEL": {
                                    "$ref": "#/definitions/typePacBioModel"
                                }
                            }
                        }
                    }
                },
                {
                    "required": [
                        "ION_TORRENT"
                    ],
                    "additionalProperties": false,
                    "properties": {
                        "ION_TORRENT": {
                            "type": "object",
                            "description": "Ion Torrent Personal Genome Machine (PGM) from Life Technologies.",
                            "required": [
                                "INSTRUMENT_MODEL"
                            ],
                            "additionalProperties": false,
                            "properties": {
                                "INSTRUMENT_MODEL": {
                                    "$ref": "#/definitions/typeIontorrentModel"
                                }
                            }
                        }
                    }
                },
                {
                    "required": [
                        "CAPILLARY"
                    ],
                    "additionalProperties": false,
                    "properties": {
                        "CAPILLARY": {
                            "type": "object",
                            "description": "Sequencers based on capillary electrophoresis technology manufactured by LifeTech (formerly Applied BioSciences). ",
                            "required": [
                                "INSTRUMENT_MODEL"
                            ],
                            "additionalProperties": false,
                            "properties": {
                                "INSTRUMENT_MODEL": {
                                    "$ref": "#/definitions/typeCapillaryModel"
                                }
                            }
                        }
                    }
                },
                {
                    "required": [
                        "DNBSEQ"
                    ],
                    "additionalProperties": false,
                    "properties": {
                        "DNBSEQ": {
                            "type": "object",
                            "description": "Sequencers based on DNBSEQ by MGI Tech.",
                            "required": [
                                "INSTRUMENT_MODEL"
                            ],
                            "additionalProperties": false,
                            "properties": {
                                "INSTRUMENT_MODEL": {
                                    "$ref": "#/definitions/typeDnbSeqModel"
                                }
                            }
                        }
                    }
                },
                {
                    "required": [
                        "ELEMENT"
                    ],
                    "additionalProperties": false,
                    "properties": {
                        "ELEMENT": {
                            "type": "object",
                            "description": "",
                            "required": [
                                "INSTRUMENT_MODEL"
                            ],
                            "additionalProperties": false,
                            "properties": {
                                "INSTRUMENT_MODEL": {
                                    "$ref": "#/definitions/typeElementModel"
                                }
                            }
                        }
                    }
                },
                {
                    "required": [
                        "ULTIMA"
                    ],
                    "additionalProperties": false,
                    "properties": {
                        "ULTIMA": {
                            "type": "object",
                            "description": "",
                            "required": [
                                "INSTRUMENT_MODEL"
                            ],
                            "additionalProperties": false,
                            "properties": {
                                "INSTRUMENT_MODEL": {
                                    "$ref": "#/definitions/typeUltimaModel"
                                }
                            }
                        }
                    }
                },
                {
                    "required": [
                        "VELA_DIAGNOSTICS"
                    ],
                    "additionalProperties": false,
                    "properties": {
                        "VELA_DIAGNOSTICS": {
                            "type": "object",
                            "description": "semi-conductor based sequencing technology.",
                            "required": [
                                "INSTRUMENT_MODEL"
                            ],
                            "additionalProperties": false,
                            "properties": {
                                "INSTRUMENT_MODEL": {
                                    "$ref": "#/definitions/typeVelaDiagnosticsModel"
                                }
                            }
                        }
                    }
                },
                {
                    "required": [
                        "GENAPSYS"
                    ],
                    "additionalProperties": false,
                    "properties": {
                        "GENAPSYS": {
                            "type": "object",
                            "description": "Chip based electronic sensing of polymerase extension reaction",
                            "required": [
                                "INSTRUMENT_MODEL"
                            ],
                            "additionalProperties": false,
                            "properties": {
                                "INSTRUMENT_MODEL": {
                                    "$ref": "#/definitions/typeGenapsysModel"
                                }
                            }
                        }
                    }
                },
                {
                    "required": [
                        "GENEMIND"
                    ],
                    "additionalProperties": false,
                    "properties": {
                        "GENEMIND": {
                            "type": "object",
                            "description": "",
                            "required": [
                                "INSTRUMENT_MODEL"
                            ],
                            "additionalProperties": false,
                            "properties": {
                                "INSTRUMENT_MODEL": {
                                    "$ref": "#/definitions/typeGeneMindModel"
                                }
                            }
                        }
                    }
                },
                {
                    "required": [
                        "TAPESTRI"
                    ],
                    "additionalProperties": false,
                    "properties": {
                        "TAPESTRI": {
                            "type": "object",
                            "description": "",
                            "required": [
                                "INSTRUMENT_MODEL"
                            ],
                            "additionalProperties": false,
                            "properties": {
                                "INSTRUMENT_MODEL": {
                                    "$ref": "#/definitions/typeTapestriModel"
                                }
                            }
                        }
                    }
                }
            ]
        },
        "PipelineType": {
            "type": "array",
            "description": "The PipelineType identifies the sequence or tree of actions to process the sequencing data.",
            "required": [
                "PIPE_SECTION"
            ],
            "items": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "PIPE_SECTION": {
                        "type": "object",
                        "minItems": 1,
                        "uniqueItems": true,
                        "required": [
                            "STEP_INDEX",
                            "PREV_STEP_INDEX",
                            "PROGRAM",
                            "VERSION"
                        ],
                        "additionalProperties": false,
                        "properties": {
                            "STEP_INDEX": {
                                "type": "string",
                                "description": "Lexically ordered value that allows for the pipe section to be hierarchically ordered. The float primitive data type is used to allow for pipe sections to be inserted later on."
                            },
                            "PREV_STEP_INDEX": {
                                "type": [
                                    "array",
                                    "null"
                                ],
                                "minItems": 1,
                                "uniqueItems": true,
                                "items": {
                                    "type": [
                                        "string",
                                        "null"
                                    ],
                                    "description": "STEP_INDEX of the previous step in the workflow. Set to NIL if the first pipe section."
                                }
                            },
                            "PROGRAM": {
                                "type": "string",
                                "description": "Name of the program or process for primary analysis. This may include a test or condition that leads to branching in the workflow."
                            },
                            "VERSION": {
                                "type": "string",
                                "description": "Version of the program or process for primary analysis."
                            },
                            "NOTES": {
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "minItems": 0,
                                "maxItems": 1,
                                "description": "Notes about the program or process for primary analysis."
                            },
                            "section_name": {
                                "type": "string",
                                "description": "Name of the processing pipeline section."
                            }
                        }
                    }
                }
            }
        },
        "SequencingDirectivesType": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "SAMPLE_DEMUX_DIRECTIVE": {
                    "type": "string",
                    "description": "Tells the Archive who will execute the sample demultiplexing operation.",
                    "enum": [
                        "leave_as_pool",
                        "submitter_demultiplexed"
                    ],
                    "meta:enum": {
                        "leave_as_pool": "There shall be no sample de-multiplexing at the level of assiging individual reads to sample pool members.",
                        "submitter_demultiplexed": "The submitter has assigned individual reads to sample pool members by providing individual files containing reads with the same member assignment."
                    }
                }
            }
        },
        "ProcessingType": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "PIPELINE": {
                    "description": "Generic processing pipeline specification",
                    "$ref": "#/definitions/PipelineType"
                },
                "DIRECTIVES": {
                    "description": "Processing directives tell the Sequence Read Archive how to treat the input data, if any treatment is requested.",
                    "$ref": "#/definitions/SequencingDirectivesType"
                }
            }
        },
        "ReferenceAssemblyType": {
            "type": "object",
            "description": "Reference assembly details.",
            "oneOf": [
                {
                    "required": [
                        "STANDARD"
                    ],
                    "additionalProperties": false,
                    "properties": {
                        "STANDARD": {
                            "type": "object",
                            "description": "A standard genome assembly.",
                            "additionalProperties": false,
                            "required": [
                                "accession"
                            ],
                            "properties": {
                                "refname": {
                                    "type": "string",
                                    "description": "A recognized name for the genome assembly."
                                },
                                "accession": {
                                    "type": "string",
                                    "description": "Identifies the genome assembly using an accession number and a sequence version."
                                }
                            }
                        }
                    }
                },
                {
                    "required": [
                        "CUSTOM"
                    ],
                    "additionalProperties": false,
                    "properties": {
                        "CUSTOM": {
                            "type": "object",
                            "description": "Other genome assembly.",
                            "additionalProperties": false,
                            "required": [
                                "URL_LINK"
                            ],
                            "properties": {
                                "DESCRIPTION": {
                                    "type": "string",
                                    "description": "Description of the genome assembly."
                                },
                                "URL_LINK": {
                                    "type": "array",
                                    "description": "A link to the genome assembly.",
                                    "items": {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "required": [
                                            "URL"
                                        ],
                                        "properties": {
                                            "LABEL": {
                                                "type": "string",
                                                "description": "Text label to display for the link."
                                            },
                                            "URL": {
                                                "type": "string",
                                                "format": "uri",
                                                "description": "The internet service link (file:, http:, ftp:, etc)."
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            ]
        },
        "ReferenceSequenceType": {
            "type": "object",
            "description": "Reference assembly and sequence details.",
            "properties": {
                "ASSEMBLY": {
                    "$ref": "#/definitions/ReferenceAssemblyType",
                    "description": "Reference assembly details."
                },
                "SEQUENCE": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "description": "Reference sequence details.",
                        "additionalProperties": false,
                        "required": [
                            "accession"
                        ],
                        "properties": {
                            "refname": {
                                "type": "string",
                                "description": "A recognized name for the reference sequence."
                            },
                            "accession": {
                                "type": "string",
                                "description": "Accession.version with version being mandatory."
                            },
                            "label": {
                                "type": "string",
                                "description": "This is how Reference Sequence is labeled in submission file(s). It is equivalent to SQ label in BAM. Optional when submitted file uses INSDC accession.version."
                            }
                        }
                    }
                }
            }
        },
        "runAnalysisFileType": {
            "type": "object",
            "required": [
                "FILE"
            ],
            "properties": {
                "FILE": {
                    "type": "object",
                    "required": [
                        "filename",
                        "filetype",
                        "checksum_method",
                        "checksum"
                    ],
                    "properties": {
                        "READ_LABEL": {
                            "type": [
                                "array"
                            ],
                            "minItems": 1,
                            "additionalProperties": false,
                            "uniqueItems": true,
                            "description": "The READ_LABEL can associate a certain file to a certain read_label defined in the SPOT_DESCRIPTOR.",
                            "items": {
                                "type": "string"
                            }
                        },
                        "READ_TYPE": {
                            "type": [
                                "array"
                            ],
                            "minItems": 1,
                            "additionalProperties": false,
                            "uniqueItems": true,
                            "description": "",
                            "items": {
                                "type": "string",
                                "description": "",
                                "enum": [
                                    "single",
                                    "paired",
                                    "cell_barcode",
                                    "umi_barcode",
                                    "feature_barcode",
                                    "sample_barcode",
                                    "spatial_barcode"
                                ]
                            }
                        },
                        "filename": {
                            "type": "string",
                            "description": "The name or relative pathname of the data file."
                        },
                        "filetype": {
                            "type": "string",
                            "description": "The data file type.",
                            "anyOf": [
                                {
                                    "$ref": "#/definitions/runFileTypeEnum"
                                },
                                {
                                    "$ref": "#/definitions/analysisFileTypeEnum"
                                }
                            ]
                        },
                        "quality_scoring_system": {
                            "type": [
                                "string"
                            ],
                            "description": "How the input data are scored for quality.",
                            "enum": [
                                "phred",
                                "log-odds"
                            ]
                        },
                        "quality_encoding": {
                            "type": [
                                "string"
                            ],
                            "description": "Character used in representing the minimum quality value. Helps specify how to decode text rendering of quality data.",
                            "enum": [
                                "ascii",
                                "decimal",
                                "hexadecimal"
                            ]
                        },
                        "ascii_offset": {
                            "type": [
                                "string"
                            ],
                            "description": "Character used in representing the minimum quality value.  Helps specify how to decode text rendering of quality data.",
                            "enum": [
                                "!",
                                "@"
                            ]
                        },
                        "checksum_method": {
                            "type": "string",
                            "description": "Checksum method used.",
                            "enum": [
                                "MD5",
                                "SHA-256"
                            ]
                        },
                        "checksum": {
                            "type": "string",
                            "description": "Checksum of uncompressed file."
                        },
                        "unencrypted_checksum": {
                            "type": [
                                "string"
                            ],
                            "description": "Checksum of unenrypted file (used in conjunction with checksum of encrypted file)."
                        },
                        "checklist": {
                            "type": "string",
                            "description": "The name of the checklist."
                        }
                    }
                }
            }
        },
        "runFileTypeEnum": {
            "type": "string",
            "enum": [
                "sra",
                "srf",
                "sff",
                "fastq",
                "fasta",
                "tab",
                "454_native",
                "454_native_seq",
                "454_native_qual",
                "Helicos_native",
                "Illumina_native",
                "Illumina_native_seq",
                "Illumina_native_prb",
                "Illumina_native_int",
                "Illumina_native_qseq",
                "Illumina_native_scarf",
                "SOLiD_native",
                "SOLiD_native_csfasta",
                "SOLiD_native_qual",
                "PacBio_HDF5",
                "bam",
                "cram",
                "CompleteGenomics_native",
                "OxfordNanopore_native"
            ]
        },
        "analysisFileTypeEnum": {
            "type": "string",
            "enum": [
                "tab",
                "bam",
                "bai",
                "cram",
                "crai",
                "vcf",
                "vcf_aggregate",
                "bcf",
                "tabix",
                "wig",
                "bed",
                "gff",
                "gfa",
                "fasta",
                "fastq",
                "flatfile",
                "chromosome_list",
                "sample_list",
                "readme_file",
                "phenotype_file",
                "BioNano_native",
                "Kallisto_native",
                "agp",
                "unlocalised_list",
                "info",
                "manifest",
                "csi",
                "bcf_aggregate",
                "other"
            ]
        },
        "AUTHORS": {
            "type": "array",
            "title": "List of authors",
            "minItems": 1,
            "uniqueItems": true,
            "items": {
                "type": "string"
            }
        },
        "objectReferenceArray": {
            "type": "array",
            "title": "Array of object references",
            "minItems": 1,
            "uniqueItems": true,
            "items": {
                "$ref": "#/definitions/RefObjectType"
            }
        },
        "objectReferenceArrayWithLabels": {
            "type": "array",
            "title": "Array of object references",
            "minItems": 1,
            "uniqueItems": true,
            "items": {
                "allOf": [
                    {
                        "$ref": "#/definitions/RefObjectType"
                    },
                    {
                        "properties": {
                            "label": {
                                "type": "string",
                                "description": "A label associating the run with run references in data files."
                            }
                        }
                    }
                ]
            }
        }
    }
}
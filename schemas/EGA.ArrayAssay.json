{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "https://github.com/EbiEga/ega-metadata-schema/tree/main/schemas/EGA.ArrayAssay.json",
    "type": "object",
    "title": "EGA ArrayAssay metadata schema",
    "description": "Metadata schema used by the European Genome-phenome Archive (EGA) to validate its ArrayAssay metadata object. This object is intended to contain metadata about the physical array to which the assayed molecule is hybridized. Used exclusively an Array Format (AF) submission. Further details can be found in the EGA-metadata-schema GitHub repository (https://github.com/EbiEga/ega-metadata-schema/tree/main/schemas) and EGA-archive website (https://ega-archive.org/)",
    "required": ["object_ids", "arrayAssay_center", "assay_files"],
    "additionalProperties": false,
    "properties": {
      "object_ids": {
        "type": "object",
        "title": "Object's IDs block",
        "description": "Node containing the main identifiers of the object (e.g. alias, center_name...), inherited from the common definitions. #! We extend the core object (object_coreIDs) by adding a pattern check based on this schema's nature: an ArrayAssay (by using EGA-ArrayAssay-id-pattern)", 
        "allOf": [
          {
            "$ref": "https://github.com/EbiEga/ega-metadata-schema/tree/main/schemas/EGA.common-definitions.json#/definitions/object_coreIDs"
          },
          {
            "properties": {
              "accession": {
                "$ref": "https://github.com/EbiEga/ega-metadata-schema/tree/main/schemas/EGA.common-definitions.json#/definitions/EGA-ArrayAssay-id-pattern"
              }
            }
          }
        ]        
      },

      "arrayAssay_center": {
        "type": "string",
        "title": "Centername that performed the ArrayAssay",
        "description": "The name of the center (e.g. 'EBI-TEST') responsible for the profiling by microarray (executed the ArrayAssay), if applicable (in case it’s different from the center submitting metadata)."
      },

      "arrayAssay_date": {
        "type": "string",
        "title": "Date of the ArrayAssay",
        "description": "ISO date (format YYYY-MM-DD - e.g. '2021-05-15') when the ArrayAssay took place. If the protocols are long enough, the date shall be the day the ArrayAssay concluded.",
        "$ref": "https://github.com/EbiEga/ega-metadata-schema/tree/main/schemas/EGA.common-definitions.json#/definitions/EGA-ISO-date-YYYY-MM-DD-pattern"
      },

      "sample_number": {
        "type": "integer",
        "title": "Number of samples of the ArrayAssay",
        "description": "Number of samples included in the Assay (i.e. pooled into one single microarray, labeled differently). One sample corresponds to one biological replicate [EFO:0002091] (it could be the genetic content from a single cell, a tissue… from a single individual or from several individuals). Shall not be mistaken for technical replicates [CHEBI:24432] being used several times (see https://www.ebi.ac.uk/seqdb/confluence/pages/viewpage.action?spaceKey=EGA&title=Sample+Representation)."
      },

      "sample_Labels": {
        "type": "array",
        "title": "Array of Sample-label pairs of the ArrayAssay",
        "description": "Sample-Label pairs (format being 'EGAN[0-9]{11}:Label' - e.g. 'EGAN00000000001:Cy3') to know which samples used in this assay are labeled by which chemicals. Could be omitted if the array is of one single label and colour. #! Using an empty item list but defining the sample-label pairs as possible additionalItems we create the correct constraint: anything but a sample-label pair is rejected, but EGA can add as many as required.",
        "additionalProperties": false,
        "items": [],
        "additionalItems": {
          "type": "string",
          "title": "Sample-label pair",
          "pattern": "^EGAN\\d{11}:[a-zA-Z0-9 ]+$"
        }
      },

      "ArrayAssay_relationships": {
        "type": "array",
        "title": "ArrayAssay relationships",
        "description": "Comprises metadata (e.g. Source or Target) of a directional association between two entities. This relationships node contains all the possible relationships between metadata objects, both outside of (e.g. an Array Design Format that was submitted to ArrayExpress being linked to their microarray data within EGA) and within (e.g. an ArrayAssay being linked to a Sample) the EGA. #! Using an empty item list but defining the relationship as possible additionalItems we create the correct constraint: anything but a relationship object is rejected, but EGA can add as many as required.",
        "additionalProperties": false,
        "additionalItems": { "$ref": "https://github.com/EbiEga/ega-metadata-schema/tree/main/schemas/EGA.common-definitions.json#/definitions/relationship_object" },
        "items": []
      },

      "assay_files": {
        "type": "array",
        "title": "Assay files object from an ArrayAssay",
        "description": "This array object contains the specific files derived from performing an hybridization of the assayed molecule to a physical array. Given the amount of technologies available for such purpose, the allowed filetypes shall be agreed upon and updated accordingly. #! Using an empty item list but defining the file object as possible additionalItems we create the correct constraint: anything but a file object is rejected, but EGA can add as many as required.",
        "additionalProperties": false,
        "additionalItems": { "$ref": "https://github.com/EbiEga/ega-metadata-schema/tree/main/schemas/EGA.common-definitions.json#/definitions/file_object" },
        "items": []
      },

      "arrayAssay_attributes": {
        "type": "array",
        "title": "ArrayAssay custom attributes",
        "description": "Custom attributes of an ArrayAssay: reusable attributes to encode tag-value pairs (e.g. Tag being 'Targeted loci' and its Value '5:63256183-63258334') with optional units (e.g. 'base pairs'). Its properties are inherited from the common-definitions.json schema. #! Using an empty item list but defining the custom attributes as possible additionalItems we create the correct constraint: anything but a custom attribute is rejected, but EGA can add as many as required.",
        "additionalProperties": false,
        "additionalItems": { "$ref": "https://github.com/EbiEga/ega-metadata-schema/tree/main/schemas/EGA.common-definitions.json#/definitions/custom_attribute" },
        "items": []
      }

    }
      
  }
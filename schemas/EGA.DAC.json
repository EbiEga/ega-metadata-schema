{
    "$schema": "https://json-schema.org/draft/2019-09/schema",
    "$id": "https://raw.githubusercontent.com/EbiEga/ega-metadata-schema/main/schemas/EGA.DAC.json",
    "type": "object",
    "title": "EGA DAC metadata schema",
    "meta:version": "0.0.0",
    "$async": true,
    "description": "Metadata schema used by the European Genome-phenome Archive (EGA) to validate its Data Access Committee (DAC) metadata object. This object is intended to contain metadata about the body of one or more named individuals who are responsible for data release to external requestors based on consent and/or National Research Ethics terms. A DAC is typically formed, but not necessarily, from the same organization that collected the samples and generated any associated files/analyses. Further details can be found in the EGA-metadata-schema GitHub repository (https://github.com/EbiEga/ega-metadata-schema/tree/main/schemas) and EGA-archive website (https://ega-archive.org/submission/data_access_committee)",
    "required": ["object_id", "dac_contacts"],
    "additionalProperties": false,
    "properties": {
      "object_id": {
        "type": "object",
        "title": "Object's IDs block",
        "description": "Node containing the main identifiers of the object (e.g. alias, center_name...), inherited from the common definitions. #! We extend the core object (object_core_id) by adding a pattern check based on this schema's nature: an DAC (by using EGA-DAC-id-pattern)", 
        "allOf": [
          {
            "title": "Inherited object_core_id object",
            "$ref": "./EGA.common-definitions.json#/definitions/object_core_id"
          },
          {
            "title": "Check that DAC EGA ID (EGAC) is correct",
            "properties": {
              "ega_accession": {
                "$ref": "./EGA.common-definitions.json#/definitions/EGA-DAC-id-pattern"
              }
            }
          }
        ]        
      },

      "schema_descriptor": {
        "title": "Schema descriptor node",
        "description": "Inherited schema descriptor node containing metadata about the schemas and standards used to create the JSON document itself.",
        "$ref": "./EGA.common-definitions.json#/definitions/schema_descriptor"
      },

      "object_title": {
        "type": "string",
        "title": "Title of the DAC",
        "description": "Short free-form text that can be used to call out DAC records in searches or displays.",
        "minLength": 1,
        "examples": [ "EBI Consortium Data Access Committee" ]
      },

      "object_description": {
        "type": "string",
        "title": "Description of the DAC",
        "description": "An in-depth description of the DAC, including its overall purpose or nature of studies it governs.",
        "minLength": 1,
        "examples": [ "EBI DAC governing data from projects related to human microbiome with data provenance..." ]
      },

      "dac_contacts": {
        "type": "object",
        "title": "DAC contacts' details",
        "description": "Object containing the main contact's and optional additional contact's details.",
        "additionalProperties": false,
        "required": ["main_contact"],
        "properties": {
          "main_contact": {
            "title": "Main contact of the DAC",
            "description": "The main contact of that DAC whose contact details will be used first to reach the DAC.",
            "$ref": "./EGA.common-definitions.json#/definitions/contact_details"
          },
          "additional_contacts": {
            "type": "array",
            "title": "Additional DAC contacts' details",
            "description": "An array compromising additional contact details to use when in need to reach the DAC yet the main contact is unresponsive or does not exist.",
            "minItems": 1,
            "additionalProperties": false,
            "uniqueItems": true,
            "items": { 
              "$ref": "./EGA.common-definitions.json#/definitions/contact_details" 
            }
          }
        }
      },

      "dac_relationships": {
        "type": "array",
        "title": "DAC relationships",
        "description": "Comprises metadata (e.g. Source or Target) of a directional association between two entities. This relationships node contains all the possible relationships between metadata objects, both outside of (e.g. an Array Design Format that was submitted to ArrayExpress being linked to their microarray data within EGA) and within (e.g. a policy being linked to a DAC) the EGA.",
        "minItems": 1,
        "additionalProperties": false,
        "uniqueItems": true,
        "items": {
          "allOf": [
            {
              "title": "Inherited relationship node",
              "$ref": "./EGA.common-definitions.json#/definitions/relationship_object"
            },
            {
              "title": "Relationship constraints for a DAC",
              "description": "Not all possible relationships between objects are allowed (e.g. an individual should not be linked to a policy). This node contains the restricted relationships that can be given for a DAC.",
              "anyOf": [
                {
                  "title": "Allowed relationships of type referenced_by (main ones)",
                  "allOf": [
                    {
                      "$ref": "./EGA.common-definitions.json#/definitions/r-type-referenced_by"
                    },
                    {
                      "anyOf": [
                        {
                          "$ref": "./EGA.common-definitions.json#/definitions/r-target-policy"
                        },
                        {
                          "$ref": "./EGA.common-definitions.json#/definitions/r-source-submission"
                        }
                      ]
                    }
                  ]                  
                },
                {
                  "title": "Allowed relationships of type same_as, grouped_with and member_of (optional ones)",
                  "allOf": [
                    {
                      "anyOf": [
                        {
                          "$ref": "./EGA.common-definitions.json#/definitions/r-type-same_as"
                        },
                        {
                          "$ref": "./EGA.common-definitions.json#/definitions/r-type-grouped_with"
                        },
                        {
                          "$ref": "./EGA.common-definitions.json#/definitions/r-type-member_of"
                        }
                      ]
                    },
                    {
                      "anyOf": [
                        {
                          "$ref": "./EGA.common-definitions.json#/definitions/r-source-DAC"
                        },
                        {
                          "$ref": "./EGA.common-definitions.json#/definitions/r-target-DAC"
                        }
                      ]
                    }
                  ]
                },
                {
                  "title": "Relationships of external accessions and URLs (optional ones)",
                  "description": "Almost any relationship is imaginable with external accessions and URLs.",
                  "allOf": [
                    {
                      "anyOf": [
                        {
                          "$ref": "./EGA.common-definitions.json#/definitions/r-type-child_of"
                        },
                        {
                          "$ref": "./EGA.common-definitions.json#/definitions/r-type-family_relationship_with"
                        },
                        {
                          "$ref": "./EGA.common-definitions.json#/definitions/r-type-grouped_with"
                        },
                        {
                          "$ref": "./EGA.common-definitions.json#/definitions/r-type-same_as"
                        },
                        {
                          "$ref": "./EGA.common-definitions.json#/definitions/r-type-referenced_by"
                        },
                        {
                          "$ref": "./EGA.common-definitions.json#/definitions/r-type-develops_from"
                        },
                        {
                          "$ref": "./EGA.common-definitions.json#/definitions/r-type-member_of"
                        },
                        {
                          "$ref": "./EGA.common-definitions.json#/definitions/r-type-is_after"
                        }
                      ]
                    },
                    {
                      "anyOf": [
                        {
                          "$ref": "./EGA.common-definitions.json#/definitions/r-source-external_accession"
                        },
                        {
                          "$ref": "./EGA.common-definitions.json#/definitions/r-source-external_URL"
                        },
                        {
                          "$ref": "./EGA.common-definitions.json#/definitions/r-target-external_accession"
                        },
                        {
                          "$ref": "./EGA.common-definitions.json#/definitions/r-target-external_URL"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]          
        },
        "contains": {
          "title": "Constraint to have at least one 'submission' relationship",
          "$ref": "./EGA.common-definitions.json#/definitions/r-constraint-one-sourced-submission"
        }
      },

      "dac_attributes": {
        "type": "array",
        "title": "DAC custom attributes",
        "description": "Custom attributes of a DAC: reusable attributes to encode tag-value pairs (e.g. Tag being 'Targeted loci' and its Value '5:63256183-63258334') with optional units (e.g. 'base pairs'). Its properties are inherited from the common-definitions.json schema.",
        "minItems": 1,
        "additionalProperties": false,
        "uniqueItems": true,
        "items": { 
          "$ref": "./EGA.common-definitions.json#/definitions/custom_attribute" 
        }
      }

    }      
  }